var data = decodeToJson(payload);
var deviceName = "Device name " + data.deviceInfo.deviceName; // Replace the text "Device name " with the actual name of your device
var deviceType = "Device type"; // Replace the text "Device type" with the actual type of your device
var groupName = null; // If groupName is not null - created device will be added to the entity group with such name.
var customerName = null; // If customerName is not null - created devices will be assigned to customer with such name.

// use assetName and assetType instead of deviceName and deviceType
// to automatically create assets instead of devices.
// var assetName = 'Asset A';
// var assetType = 'building';

// If you want to parse incoming data somehow, you can add your code to this function.
// input: bytes
// expected output:
//  {
//    "attributes": {"attributeKey": "attributeValue"},
//    "telemetry": [{"ts": 1...1, "values": {"telemetryKey":"telemetryValue"}, {"ts": 1...2, "values":                      {"telemetryKey":"telemetryValue"}}]
//  }

function decodePayload(input) {
    var output = {
        attributes: {},
        telemetry: []
    };

    // --- Decoding code --- //
    var decoded = {};

    output.telemetry = [{
        ts: timestamp,
        values: decoded
    }];
    // --- Decoding code --- //
    return output;
}

// --- attributes and telemetry objects ---
var telemetry = [];
var attributes = {};
// --- attributes and telemetry objects ---

// --- Timestamp parsing
var dateString = data.time;
timestamp = parseDateToTimestamp(dateString);
// --- Timestamp parsing

// Passing incoming bytes to decodePayload function, to get custom decoding
var customDecoding = decodePayload(base64ToBytes(data
.data));


attributes.eui = data.deviceInfo.devEui;

// Collecting data to result
if (customDecoding.?telemetry.size() > 0) {
    if (customDecoding.telemetry instanceof java.util.ArrayList) {
        foreach(telemetryObj: customDecoding.telemetry) {
            if (telemetryObj.ts != null && telemetryObj.values != null) {
                telemetry.add(telemetryObj);
            }
        }
    } else {
        telemetry.putAll(customDecoding.telemetry);
    }
}

if (customDecoding.?attributes.size() > 0) {
    attributes.putAll(customDecoding.attributes);
}

// You can add some keys manually to attributes or telemetry
attributes.eui = data.deviceInfo.?devEui;
attributes.devAddr = data.devAddr;
attributes.fPort = data.fPort;
attributes.applicationId = data.deviceInfo.?applicationId;
attributes.applicationName = data.deviceInfo.?applicationName;
attributes.tenantId = data.deviceInfo.?tenantId;
attributes.tenantName = data.deviceInfo.?tenantName;
attributes.deviceProfileId = data.deviceInfo.?deviceProfileId;
attributes.deviceProfileName = data.deviceInfo.?deviceProfileName;
attributes.frequency = data.txInfo.?frequency;
attributes.bandwidth = data.txInfo.?modulation.?lora.?bandwidth;
attributes.spreadingFactor = data.txInfo.?modulation.?lora.?spreadingFactor;
attributes.codeRate = data.txInfo.?modulation.?lora.?codeRate;

var gatewayInfo = getGatewayInfo();
var addDataToTelemetry = {};
addDataToTelemetry.snr = gatewayInfo.snr;
addDataToTelemetry.rssi = gatewayInfo.rssi;
addDataToTelemetry.channel = gatewayInfo.channel;
addDataToTelemetry.rfChain = gatewayInfo.rfChain;
addDataToTelemetry.fCnt = data.fCnt;

var isIncludeGatewayInfo = metadata["includeGatewayInfo"];
if(isIncludeGatewayInfo == true) {
   telemetry = processTelemetryData(telemetry, addDataToTelemetry);
}

var result = {
    deviceName: deviceName,
    deviceType: deviceType,
    //  assetName: assetName,
    //  assetType: assetType,
    attributes: attributes,
    telemetry: telemetry
};

addAdditionalInfoForDeviceMsg(result, customerName, groupName);

return result;

function addAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName) {
    if (customerName != null) {
        deviceInfo.customerName = customerName;
    }
    if (groupName != null) {
        deviceInfo.groupName = groupName;
    }
}

function parseDateToTimestamp(dateString) {
    var timestamp = -1;
    if (dateString != null) {
        timestamp = new Date(dateString).getTime();
        if (timestamp == -1) {
            var secondsSeparatorIndex = dateString.lastIndexOf(
                '.') + 1;
            var millisecondsEndIndex = dateString.lastIndexOf(
                '+');
            if (millisecondsEndIndex == -1) {
                millisecondsEndIndex = dateString.lastIndexOf(
                    'Z');
            }
            if (millisecondsEndIndex == -1) {
                millisecondsEndIndex = dateString.lastIndexOf(
                    '-');
            }
            if (millisecondsEndIndex == -1) {
                if (dateString.length >= secondsSeparatorIndex +
                    3) {
                    dateString = dateString.substring(0,
                        secondsSeparatorIndex + 3);
                }
            } else {
                dateString = dateString.substring(0,
                        secondsSeparatorIndex + 3) +
                    dateString.substring(millisecondsEndIndex,
                        dateString.length);
            }
            timestamp = new Date(dateString).getTime();
        }
    }
    // If we cannot parse timestamp - we will use the current timestamp
    if (timestamp == -1) {
        timestamp = Date.now();
    }

    return timestamp;
}

function getGatewayInfo() {
    var gatewayList = data.rxInfo;
    var maxRssi = Integer.MIN_VALUE;
    var gatewayInfo = {};

    foreach (gateway : gatewayList) {
        if(gateway.rssi > maxRssi) {
            maxRssi = gateway.rssi;
            gatewayInfo = gateway;
        }
    }

    return gatewayInfo;
}

function processTelemetryData(telemetry, addDataToTelemetry) {
    if (telemetry.size > 1) {
        telemetry = addDataToMultipleTelemetries(telemetry, addDataToTelemetry);
    }
    else if (telemetry.size == 1) {
        telemetry = addDataToSingleTelemetry(telemetry, addDataToTelemetry);
    }
    else {
        telemetry.add(addDataToTelemetry);
    }

    return telemetry;
}

function addDataToMultipleTelemetries(telemetry, addDataToTelemetry) {
    foreach(element : addDataToTelemetry.entrySet()) {
        if(!telemetry[0]["values"].keys.contains(element.key)) {
            telemetry[0]["values"][element.key] = element.value;
        }
        if (!telemetry[1]["values"].keys.contains(element.key)) {
            telemetry[1]["values"][element.key] = element.value;
        }
    }

    return telemetry;
}

function addDataToSingleTelemetry(telemetry, addDataToTelemetry) {
    foreach(element : addDataToTelemetry.entrySet()) {
            if(!telemetry[0]["values"].keys.contains(element.key)) {
                telemetry[0]["values"][element.key] = element.value;
            }
    }

    return telemetry;
}
