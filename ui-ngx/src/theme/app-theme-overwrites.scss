/**
 * ThingsBoard, Inc. ("COMPANY") CONFIDENTIAL
 *
 * Copyright Â© 2016-2024 ThingsBoard, Inc. All Rights Reserved.
 *
 * NOTICE: All information contained herein is, and remains
 * the property of ThingsBoard, Inc. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to ThingsBoard, Inc.
 * and its suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material is strictly forbidden
 * unless prior written permission is obtained from COMPANY.
 *
 * Access to the source code contained herein is hereby forbidden to anyone except current COMPANY employees,
 * managers or contractors who have executed Confidentiality and Non-disclosure agreements
 * explicitly covering such access.
 *
 * The copyright notice above does not evidence any actual or intended publication
 * or disclosure  of  this source code, which includes
 * information that is confidential and/or proprietary, and is a trade secret, of  COMPANY.
 * ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
 * OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT
 * THE EXPRESS WRITTEN CONSENT OF COMPANY IS STRICTLY PROHIBITED,
 * AND IN VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.
 * THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION
 * DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS,
 * OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
 */
@use '@angular/material' as mat;
@use '@angular/material/core/tokens/token-utils';
@use '@angular/material/core/tokens/m2/mdc/filled-button' as tokens-mdc-filled-button;
@use '@angular/material/core/tokens/m2/mdc/protected-button' as tokens-mdc-protected-button;
@use '@angular/material/core/tokens/m2/mdc/fab' as tokens-mdc-fab;
@use '@angular/material/core/tokens/m2/mdc/checkbox' as tokens-mdc-checkbox;
@use 'sass:meta';
@use 'sass:color';

@mixin app-theme-overwrites($primary, $config-or-theme) {
  @include _mat-form-field-overwrites($primary, $config-or-theme);
  @include _mat-button-overwrites($primary, $config-or-theme);
  @include _mat-fab-overwrites($primary, $config-or-theme);
  @include _mat-checkbox-overwrites($primary, $config-or-theme);
  @include _mat-progress-bar-overwrites($primary, $config-or-theme);
}

@mixin _mat-form-field-overwrites($primary, $config-or-theme) {
  .mat-mdc-form-field.mat-form-field-appearance-fill {
    .mdc-text-field--filled, .mat-mdc-form-field-focus-overlay {
      &:before {
        content: "";
        display: block;
        width: 100%;
        height: 100%;
        position: absolute;
        left: 0;
        top: 0;
        background-color: mat.m2-get-color-from-palette($primary);
      }
      background-color: transparent;
    }
    .mdc-text-field--filled {
      &:before {
        opacity: 0.03;
      }
      &:not(.mdc-text-field--disabled) {
        &:before {
          opacity: 0.06;
        }
        background-color: transparent;
      }
    }
    .mat-mdc-form-field-focus-overlay {
      &:before {
        opacity: 0.87;
      }
    }
  }
  .mat-mdc-form-field {
    .mat-mdc-form-field-hint-wrapper {
      color: rgba(0, 0, 0, 0.6);
    }
  }
}

@mixin _mat-button-overwrites($primary, $config-or-theme) {
  $config: mat.m2-get-color-config($config-or-theme);
  $accent: map_get($config, accent);
  .mat-toolbar {
    .mat-mdc-outlined-button {
      --mdc-outlined-button-outline-color: inherit;
      &:not(:disabled) {
        border-color: var(--mdc-outlined-button-outline-color, inherit);
      }
    }
  }
  .mat-mdc-unelevated-button {
    &.mat-primary {
      @include _unelevated-button-variant(
          mat.m2-get-color-from-palette($primary, default-contrast),
          mat.m2-get-color-from-palette($primary)
      );
    }
    &.mat-accent {
      @include _unelevated-button-variant(
          mat.m2-get-color-from-palette($accent, default-contrast),
          mat.m2-get-color-from-palette($accent)
      );
    }
  }
  .mat-mdc-raised-button {
    &.mat-primary {
      @include _raised-button-variant(
          mat.m2-get-color-from-palette($primary, default-contrast),
          mat.m2-get-color-from-palette($primary)
      );
    }
    &.mat-accent {
      @include _raised-button-variant(
          mat.m2-get-color-from-palette($accent, default-contrast),
          mat.m2-get-color-from-palette($accent)
      );
    }
  }
}

@mixin _mat-fab-overwrites($primary, $config-or-theme) {
  $config: mat.m2-get-color-config($config-or-theme);
  $accent: map_get($config, accent);
  .mat-mdc-fab, .mat-mdc-mini-fab {
    &.mat-primary {
      @include _fab-variant(
          mat.m2-get-color-from-palette($primary, default-contrast),
          mat.m2-get-color-from-palette($primary)
      );
    }
    &.mat-accent {
      @include _fab-variant(
          mat.m2-get-color-from-palette($accent, default-contrast),
          mat.m2-get-color-from-palette($accent)
      );
    }
  }
}

@mixin _mat-checkbox-overwrites($primary, $config-or-theme) {
  $config: mat.m2-get-color-config($config-or-theme);
  $accent: map_get($config, accent);
  .mat-mdc-checkbox {
    &.mat-primary {
      @include private-checkbox-styles-with-color(
          mat.m2-get-color-from-palette($primary, default-contrast),
          mat.m2-get-color-from-palette($primary)
      );
      @include _selected-ripple-colors(
          mat.m2-get-color-from-palette($primary, default-contrast),
          mat.m2-get-color-from-palette($primary)
      );
    }

    &.mat-accent {
      @include private-checkbox-styles-with-color(
          mat.m2-get-color-from-palette($accent, default-contrast),
          mat.m2-get-color-from-palette($accent)
      );
      @include _selected-ripple-colors(
          mat.m2-get-color-from-palette($accent, default-contrast),
          mat.m2-get-color-from-palette($accent)
      );
    }
  }
}

@mixin _mat-progress-bar-overwrites($primary, $config-or-theme) {
  $config: mat.m2-get-color-config($config-or-theme);
  $accent: map_get($config, accent);
  $background: map_get(map_get($config, background), background);

  .mat-mdc-progress-bar {

    .mdc-linear-progress__buffer-bar {
      background-color: _get-buffer-color($primary, $background);
    }

    &.mat-accent {
      .mdc-linear-progress__buffer-bar {
        background-color: _get-buffer-color($accent, $background);
      }
    }
  }
}

@mixin _raised-button-variant($foreground, $background) {
  @include token-utils.create-token-values(tokens-mdc-protected-button.$prefix,
  (
    container-color: $background,
    label-text-color: $foreground
  ));
}

@mixin _unelevated-button-variant($foreground, $background) {
  @include token-utils.create-token-values(tokens-mdc-filled-button.$prefix,
  (
    container-color: $background,
    label-text-color: $foreground
  ));
}

@mixin _fab-variant($foreground, $background) {
  @include token-utils.create-token-values(tokens-mdc-fab.$prefix,
    (
      container-color: $background,
      icon-color: $foreground
    ));
  --mat-mdc-fab-color: #{$foreground};
}

@mixin private-checkbox-styles-with-color($foreground, $background) {
  @include token-utils.create-token-values(tokens-mdc-checkbox.$prefix,
    (
      selected-checkmark-color: $foreground,
      selected-focus-icon-color: $background,
      selected-hover-icon-color: $background,
      selected-icon-color: $background,
      selected-pressed-icon-color: $background
    ));
}

@mixin _selected-ripple-colors($foreground, $background) {
  .mdc-checkbox--selected ~ {
    .mat-mdc-checkbox-ripple {
      @include mat.ripple-color((
        foreground: (
          base: $foreground
        ),
      ));
    }

    .mdc-checkbox__ripple {
      background: $background;
    }
  }
}

@function _get-buffer-color($theme, $background) {
  $theme-color: mat.m2-get-color-from-palette($theme);
  // Return fallback color if the theme uses variables to define colors.
  @if (meta.type-of($theme-color) != 'color' or meta.type-of($background) != 'color') {
    @return mat.m2-get-color-from-palette($theme, lighter);
  }
  @return color.mix($theme-color, $background, $weight: 25%);
}
