// If you want to override configuration from converter you can set value instead of null to variables below.
var entityType = null; // Entity type allows you to choose type of created entity. Can be DEVICE or ASSET.
var name = null; // Device or asset name.
var profile = null; // Device or asset profile name.
var group = null; // If group is not null - created entity will be added to the entity group with such name.
var customer = null; // If customer is not null - created entity will be assigned to customer with such name.

// If you want to parse incoming data somehow, you can add your code to decodePayload function.
// input: bytes
// Note ts represents a timestamp in milliseconds since the Unix epoch (January 1, 1970)
// expected output:
//  {
//    "attributes": {"attributeKey": "attributeValue"},
//    "telemetry": [{"ts": 1730898982391, "values": {"telemetryKey":"telemetryValue"}, {"ts": 1730518182391, "values": {"telemetryKey":"telemetryValue"}}]
//  }

function decodePayload(input) {
    var output = {
        attributes: {},
        telemetry: []
    };

    // --- Timestamp parsing
    var dateString = metadata.time;
    timestamp = parseDateToTimestamp(dateString);
    // --- Timestamp parsing

    var decoded = {}; // Key/value telemetry object.
    for (var i = 0; i < input.length - 2;) {
        var channel_id = input[i++] & 0xff;
        var channel_type = input[i++] & 0xff;
        // BATTERY
        if (channel_id === 0x01 && channel_type === 0x75) {
            decoded.battery = input[i];
            i += 1;
        }
    }

    output.telemetry = [{
        ts: timestamp,
        values: decoded
    }];

    // --- Decoding code --- //
    return output;
}

// --- attributes and telemetry objects ---
var telemetry = [];
var attributes = {};
// --- attributes and telemetry objects ---

var customDecoding = decodePayload(payload);

// Collecting data to result
if (customDecoding.?telemetry.size() > 0) {
    if (customDecoding.telemetry instanceof java.util.ArrayList) {
        foreach(telemetryObj: customDecoding.telemetry) {
            if (telemetryObj.ts != null && telemetryObj.values != null) {
                telemetry.add(telemetryObj);
            }
        }
    } else {
        telemetry.putAll(customDecoding.telemetry);
    }
}

if (customDecoding.?attributes.size() > 0) {
    attributes.putAll(customDecoding.attributes);
}

var result = {
    type: entityType,
    name: name,
    profile: profile,
    customer: customer,
    group: group,

    attributes: attributes,
    telemetry: telemetry
};

return result;

function parseDateToTimestamp(dateString) {
    var date = new Date(dateString);
    var timestamp = date.getTime();

    // If we cannot parse timestamp - we will use the current timestamp
    if (timestamp == -1) {
        timestamp = Date.now();
    }

    return timestamp;
}
