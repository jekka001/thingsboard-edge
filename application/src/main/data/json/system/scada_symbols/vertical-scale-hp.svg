<svg xmlns="http://www.w3.org/2000/svg" xmlns:tb="https://thingsboard.io/svg" width="400" height="800" fill="none" version="1.1" viewBox="0 0 400 800"><tb:metadata xmlns=""><![CDATA[{
  "title": "HP Simple vertical scale",
  "description": "Simple vertical scale with current volume value and configurable warning and critical scale.",
  "searchTags": [
    "scale"
  ],
  "widgetSizeX": 2,
  "widgetSizeY": 4,
  "tags": [
    {
      "tag": "clickArea",
      "stateRenderFunction": null,
      "actions": {
        "click": {
          "actionFunction": "ctx.api.callAction(event, 'click');"
        }
      }
    },
    {
      "tag": "highCriticalScale",
      "stateRenderFunction": "function calculateOffset(value, minValue, maxValue) {\n    var clampedValue = Math.max(minValue, Math.min(value, maxValue));\n    var normalizedValue = (clampedValue - minValue) / (maxValue - minValue);\n    var offset = normalizedValue * 653;\n\n    return offset;\n}\n\nvar minValue = ctx.properties.minValue;\nvar maxValue = ctx.properties.maxValue;\nvar showHighCriticalValue = ctx.properties.showHighCriticalScale;\nvar highCriticalValue = ctx.properties.highCriticalScale;\n\nif (showHighCriticalValue) {\n    element.show();\n    var offset = calculateOffset(highCriticalValue, minValue, maxValue);\n    var childrenElement = element.children();\n    childrenElement[0].height(653-offset);\n    childrenElement[1].height(653-offset-1);\n} else {\n    element.hide();\n}",
      "actions": null
    },
    {
      "tag": "highCriticalScaleBackground",
      "stateRenderFunction": "var value = ctx.values.value;\nvar showHighCriticalValue = ctx.properties.showHighCriticalScale;\n\nif (showHighCriticalValue && value !== null) {\n    var highCriticalScale = ctx.properties.highCriticalScale;\n    if (value >= highCriticalScale && value <= ctx.properties.maxValue) {\n        element.fill(ctx.properties.activeCriticalScaleColor);\n    } else {\n        element.fill(ctx.properties.defaultCriticalScaleColor)\n    }\n}",
      "actions": null
    },
    {
      "tag": "highWarningScale",
      "stateRenderFunction": "function calculateOffset(value, minValue, maxValue) {\n    var clampedValue = Math.max(minValue, Math.min(value, maxValue));\n    var normalizedValue = (clampedValue - minValue) / (maxValue - minValue);\n    var offset = normalizedValue * 653;\n\n    return offset;\n}\n\nvar minValue = ctx.properties.minValue;\nvar maxValue = ctx.properties.maxValue;\nvar showHighWarningScale = ctx.properties.showHighWarningScale;\nvar highWarningValue = ctx.properties.highWarningScale;\nif (showHighWarningScale) {\n    element.show();\n    var offset = calculateOffset(highWarningValue, minValue, maxValue);\n    var childrenElement = element.children();\n    childrenElement[0].height(653-offset);\n    childrenElement[1].height(653-offset-1);\n} else {\n    element.hide();\n}",
      "actions": null
    },
    {
      "tag": "highWarningScaleBackground",
      "stateRenderFunction": "var value = ctx.values.value;\nvar showHighWarningScale = ctx.properties.showHighWarningScale;\nvar showHighCriticalScale = ctx.properties.showHighCriticalScale;\n\nif (showHighWarningScale && value !== null) {\n    var highCriticalScale = ctx.properties.highCriticalScale;\n    if (!showHighCriticalScale) {\n        highCriticalScale = ctx.properties.maxValue;\n    }\n    var highWarningScale = ctx.properties.highWarningScale;\n    if (value < highCriticalScale && value >= highWarningScale) {\n        element.fill(ctx.properties.activeWarningScaleColor);\n    } else {\n        element.fill(ctx.properties.defaultWarningScaleColor);\n    }\n}",
      "actions": null
    },
    {
      "tag": "label",
      "stateRenderFunction": "if (ctx.properties.label) {\n    element.show();\n    ctx.api.font(element, ctx.properties.labelFont, ctx.properties.labelColor);\n    ctx.api.text(element, ctx.properties.labelText);\n} else {\n    element.hide();\n}",
      "actions": null
    },
    {
      "tag": "lowCriticalScale",
      "stateRenderFunction": "function calculateOffset(value, minValue, maxValue) {\n    var clampedValue = Math.max(minValue, Math.min(value, maxValue));\n    var normalizedValue = (clampedValue - minValue) / (maxValue - minValue);\n    var offset = normalizedValue * 653;\n\n    return offset;\n}\n\nvar minValue = ctx.properties.minValue;\nvar maxValue = ctx.properties.maxValue;\nvar showLowCriticalScale = ctx.properties.showLowCriticalScale;\nvar lowCriticalValue = ctx.properties.lowCriticalScale;\nif (showLowCriticalScale) {\n    element.show();\n    var offset = calculateOffset(lowCriticalValue, minValue, maxValue);\n    var childrenElement = element.children();\n    childrenElement[0].height(offset);\n    childrenElement[1].height(offset-1);\n} else {\n    element.hide();\n}",
      "actions": null
    },
    {
      "tag": "lowCriticalScaleBackground",
      "stateRenderFunction": "var value = ctx.values.value;\nvar showLowCriticalScale = ctx.properties.showLowCriticalScale;\nif (showLowCriticalScale && value !== null) {\n    var lowCriticalScale = ctx.properties.lowCriticalScale;\n    if (value <= lowCriticalScale && value >= ctx.properties.minValue) {\n        element.fill(ctx.properties.activeCriticalScaleColor);\n    } else {\n        element.fill(ctx.properties.defaultCriticalScaleColor)\n    }\n}",
      "actions": null
    },
    {
      "tag": "lowWarningScale",
      "stateRenderFunction": "function calculateOffset(value, minValue, maxValue) {\n    var clampedValue = Math.max(minValue, Math.min(value, maxValue));\n    var normalizedValue = (clampedValue - minValue) / (maxValue - minValue);\n    var offset = normalizedValue * 653;\n\n    return offset;\n}\n\nvar minValue = ctx.properties.minValue;\nvar maxValue = ctx.properties.maxValue;\nvar showLowWarningScale = ctx.properties.showLowWarningScale;\nvar lowWarningValue = ctx.properties.lowWarningScale;\nif (showLowWarningScale) {\n    element.show();\n    var offset = calculateOffset(lowWarningValue, minValue, maxValue);\n    var childrenElement = element.children();\n    childrenElement[0].height(offset);\n    childrenElement[1].height(offset-1);\n} else {\n    element.hide();\n}",
      "actions": null
    },
    {
      "tag": "lowWarningScaleBackground",
      "stateRenderFunction": "var value = ctx.values.value;\nvar showLowWarningScale = ctx.properties.showLowWarningScale;\nvar showLowCriticalScale = ctx.properties.showLowCriticalScale;\n\nif (showLowWarningScale && value !== null) {\n    var lowCriticalScale = ctx.properties.lowCriticalScale;\n    if (!showLowCriticalScale) {\n        lowCriticalScale = ctx.properties.minValue;\n    }\n    var lowWarningScale = ctx.properties.lowWarningScale;\n    if (value > lowCriticalScale && value <= lowWarningScale) {\n        element.fill(ctx.properties.activeWarningScaleColor);\n    } else {\n        element.fill(ctx.properties.defaultWarningScaleColor);\n    }\n}",
      "actions": null
    },
    {
      "tag": "maxValue",
      "stateRenderFunction": "if (ctx.properties.minMaxValue) {\n    ctx.api.text(element, ctx.properties.maxValue);\n}",
      "actions": null
    },
    {
      "tag": "minMaxValue",
      "stateRenderFunction": "if (ctx.properties.minMaxValue) {\n    element.show();\n} else {\n    element.hide();\n}",
      "actions": null
    },
    {
      "tag": "minValue",
      "stateRenderFunction": "if (ctx.properties.minMaxValue) {\n    ctx.api.text(element, ctx.properties.minValue);\n}",
      "actions": null
    },
    {
      "tag": "scaleBackground",
      "stateRenderFunction": "element.fill(ctx.properties.scaleColor);",
      "actions": null
    },
    {
      "tag": "target",
      "stateRenderFunction": "function calculateOffset(value, minValue, maxValue) {\n    var clampedValue = Math.max(minValue, Math.min(value, maxValue));\n    var normalizedValue = (clampedValue - minValue) / (maxValue - minValue);\n    var offset = normalizedValue * 653;\n\n    return offset;\n}\n\nvar minValue = ctx.properties.minValue;\nvar maxValue = ctx.properties.maxValue;\nvar showTarget = ctx.properties.showTarget;\nvar targetValue = ctx.values.targetValue;\n\nif (showTarget && targetValue !== null) {\n    element.show();\n    var offset = calculateOffset(targetValue, minValue, maxValue);\n    element.transform({translateY: -(Math.min(Math.max(offset-17, 0), 617))});\n} else {\n    element.hide();\n}\n\n",
      "actions": null
    },
    {
      "tag": "targetBackground",
      "stateRenderFunction": "element.fill(ctx.properties.targetColor);",
      "actions": null
    },
    {
      "tag": "units",
      "stateRenderFunction": "if (ctx.properties.showUnits) {\n    element.show();\n    ctx.api.font(element, ctx.properties.unitsFont, ctx.properties.unitsColor);\n    ctx.api.text(element, ctx.properties.units);\n} else {\n    element.hide();\n}",
      "actions": null
    },
    {
      "tag": "value",
      "stateRenderFunction": "if (ctx.properties.value !== null) {\n    element.show();\n    ctx.api.font(element, ctx.properties.valueFont, ctx.properties.valueColor);\n    ctx.api.text(element, ctx.api.formatValue(ctx.values.value, ctx.properties.valueDecimals, null, ctx.properties.valueDecimals));\n} else {\n    element.hide();\n}",
      "actions": null
    },
    {
      "tag": "valuePointer",
      "stateRenderFunction": "element.fill(ctx.properties.arrowColor);",
      "actions": null
    },
    {
      "tag": "valuePosition",
      "stateRenderFunction": "function calculateOffset(value, minValue, maxValue) {\n    var clampedValue = Math.max(minValue, Math.min(value, maxValue));\n    var normalizedValue = (clampedValue - minValue) / (maxValue - minValue);\n    var offset = normalizedValue * 653;\n\n    return offset;\n}\n\nvar minValue = ctx.properties.minValue;\nvar maxValue = ctx.properties.maxValue;\nvar value = ctx.values.value;\n\nif (value !== null) {\n    var offset = calculateOffset(value, minValue, maxValue);\n    element.transform({translateY: -offset});\n}\n",
      "actions": null
    }
  ],
  "behavior": [
    {
      "id": "value",
      "name": "{i18n:scada.symbol.value}",
      "hint": "{i18n:scada.symbol.value-hint}",
      "group": null,
      "type": "value",
      "valueType": "DOUBLE",
      "trueLabel": null,
      "falseLabel": null,
      "stateLabel": null,
      "defaultGetValueSettings": {
        "action": "GET_TIME_SERIES",
        "defaultValue": null,
        "executeRpc": {
          "method": "getState",
          "requestTimeout": 5000,
          "requestPersistent": false,
          "persistentPollingInterval": 1000
        },
        "getAttribute": {
          "scope": null,
          "key": "state"
        },
        "getTimeSeries": {
          "key": "temperature"
        },
        "dataToValue": {
          "type": "NONE",
          "dataToValueFunction": "/* Should return boolean value */\nreturn data;"
        }
      },
      "defaultSetValueSettings": null,
      "defaultWidgetActionSettings": null
    },
    {
      "id": "targetValue",
      "name": "{i18n:scada.symbol.target-value}",
      "hint": "{i18n:scada.symbol.target-value-hint}",
      "group": null,
      "type": "value",
      "valueType": "DOUBLE",
      "trueLabel": null,
      "falseLabel": null,
      "stateLabel": null,
      "defaultGetValueSettings": {
        "action": "GET_ATTRIBUTE",
        "defaultValue": null,
        "executeRpc": {
          "method": "getState",
          "requestTimeout": 5000,
          "requestPersistent": false,
          "persistentPollingInterval": 1000
        },
        "getAttribute": {
          "scope": "SERVER_SCOPE",
          "key": "target"
        },
        "getTimeSeries": {
          "key": "state"
        },
        "dataToValue": {
          "type": "NONE",
          "dataToValueFunction": "/* Should return boolean value */\nreturn data;"
        }
      },
      "defaultSetValueSettings": null,
      "defaultWidgetActionSettings": null
    },
    {
      "id": "click",
      "name": "{i18n:scada.symbol.on-click}",
      "hint": "{i18n:scada.symbol.on-click-hint}",
      "group": null,
      "type": "widgetAction",
      "valueType": "BOOLEAN",
      "trueLabel": null,
      "falseLabel": null,
      "stateLabel": null,
      "defaultGetValueSettings": null,
      "defaultSetValueSettings": null,
      "defaultWidgetActionSettings": {
        "type": "doNothing",
        "targetDashboardStateId": null,
        "openRightLayout": false,
        "setEntityId": false,
        "stateEntityParamName": null
      }
    }
  ],
  "properties": [
    {
      "id": "minMaxValue",
      "name": "{i18n:scada.symbol.min-max-value}",
      "type": "switch",
      "default": false,
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "minValue",
      "name": "{i18n:scada.symbol.min-max-value}",
      "type": "number",
      "default": 0,
      "required": true,
      "subLabel": "{i18n:scada.symbol.min-value}",
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": 1
    },
    {
      "id": "maxValue",
      "name": "{i18n:scada.symbol.min-max-value}",
      "type": "number",
      "default": 100,
      "required": true,
      "subLabel": "{i18n:scada.symbol.max-value}",
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": 1
    },
    {
      "id": "showHighCriticalScale",
      "name": "{i18n:scada.symbol.high-critical-scale}",
      "type": "switch",
      "default": true,
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "highCriticalScale",
      "name": "{i18n:scada.symbol.high-critical-scale}",
      "type": "number",
      "default": 85,
      "required": null,
      "subLabel": "",
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": "showHighCriticalScale",
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": 1
    },
    {
      "id": "showHighWarningScale",
      "name": "{i18n:scada.symbol.high-warning-scale}",
      "type": "switch",
      "default": true,
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "highWarningScale",
      "name": "{i18n:scada.symbol.high-warning-scale}",
      "type": "number",
      "default": 70,
      "required": null,
      "subLabel": "",
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": "showHighWarningScale",
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": 1
    },
    {
      "id": "showLowWarningScale",
      "name": "{i18n:scada.symbol.low-warning-scale}",
      "type": "switch",
      "default": true,
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "lowWarningScale",
      "name": "{i18n:scada.symbol.low-warning-scale}",
      "type": "number",
      "default": 30,
      "required": null,
      "subLabel": "",
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": "showLowWarningScale",
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": 1
    },
    {
      "id": "showLowCriticalScale",
      "name": "{i18n:scada.symbol.low-critical-scale}",
      "type": "switch",
      "default": true,
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "lowCriticalScale",
      "name": "{i18n:scada.symbol.low-critical-scale}",
      "type": "number",
      "default": 15,
      "required": null,
      "subLabel": "",
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": "showLowCriticalScale",
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": 1
    },
    {
      "id": "value",
      "name": "{i18n:scada.symbol.value}",
      "type": "switch",
      "default": true,
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "valueDecimals",
      "name": "{i18n:scada.symbol.value}",
      "type": "number",
      "default": 0,
      "required": true,
      "subLabel": "Decimals",
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": "value",
      "rowClass": "",
      "fieldClass": "",
      "min": 0,
      "max": 10,
      "step": 1
    },
    {
      "id": "valueFont",
      "name": "{i18n:scada.symbol.value}",
      "type": "font",
      "default": {
        "size": 60,
        "sizeUnit": "px",
        "family": "Roboto",
        "weight": "400",
        "style": "normal"
      },
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": "value",
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "valueColor",
      "name": "{i18n:scada.symbol.value}",
      "type": "color",
      "default": "#002878",
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": "value",
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "label",
      "name": "{i18n:scada.symbol.label}",
      "type": "switch",
      "default": true,
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "labelText",
      "name": "{i18n:scada.symbol.label}",
      "type": "text",
      "default": "Outdoor",
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": "label",
      "rowClass": "",
      "fieldClass": "flex",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "labelFont",
      "name": "{i18n:scada.symbol.label}",
      "type": "font",
      "default": {
        "size": 56,
        "sizeUnit": "px",
        "family": "Roboto",
        "weight": "500",
        "style": "normal"
      },
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": "label",
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "labelColor",
      "name": "{i18n:scada.symbol.label}",
      "type": "color",
      "default": "#000000DE",
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": "label",
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "showUnits",
      "name": "{i18n:scada.symbol.units}",
      "type": "switch",
      "default": true,
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "units",
      "name": "{i18n:scada.symbol.units}",
      "type": "units",
      "default": "°C",
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": "showUnits",
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "unitsFont",
      "name": "{i18n:scada.symbol.units}",
      "type": "font",
      "default": {
        "size": 56,
        "sizeUnit": "px",
        "family": "Roboto",
        "weight": "500",
        "style": "normal"
      },
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": "showUnits",
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "unitsColor",
      "name": "{i18n:scada.symbol.units}",
      "type": "color",
      "default": "#000000DE",
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": "showUnits",
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "arrowColor",
      "name": "{i18n:scada.symbol.arrow-color}",
      "type": "color",
      "default": "#666666",
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "showTarget",
      "name": "{i18n:scada.symbol.target}",
      "type": "switch",
      "default": false,
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "targetColor",
      "name": "{i18n:scada.symbol.target}",
      "type": "color",
      "default": "#DEDEDE",
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": "showTarget",
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "scaleColor",
      "name": "{i18n:scada.symbol.scale-color}",
      "type": "color",
      "default": "#C8DFF7",
      "required": null,
      "subLabel": null,
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "defaultWarningScaleColor",
      "name": "{i18n:scada.symbol.warning-scale-color}",
      "type": "color",
      "default": "#EBEBEB",
      "required": null,
      "subLabel": "Default",
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "activeWarningScaleColor",
      "name": "{i18n:scada.symbol.warning-scale-color}",
      "type": "color",
      "default": "#FAA405",
      "required": null,
      "subLabel": "Active",
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "defaultCriticalScaleColor",
      "name": "{i18n:scada.symbol.critical-scale-color}",
      "type": "color",
      "default": "#666666",
      "required": null,
      "subLabel": "Default",
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    },
    {
      "id": "activeCriticalScaleColor",
      "name": "{i18n:scada.symbol.critical-scale-color}",
      "type": "color",
      "default": "#D12730",
      "required": null,
      "subLabel": "Active",
      "divider": null,
      "fieldSuffix": null,
      "disableOnProperty": null,
      "rowClass": "",
      "fieldClass": "",
      "min": null,
      "max": null,
      "step": null
    }
  ]
}]]></tb:metadata>
<text x="206.16602" y="43.234375" fill="#000000" font-family="Roboto" font-size="56px" font-weight="400" text-anchor="middle" tb:tag="label" xml:space="preserve"><tspan transform="translate(0,-144)" dominant-baseline="middle">Outdoor</tspan></text><text x="195.21875" y="774.25" fill="#000000" font-family="Roboto" font-size="56px" font-weight="400" text-anchor="middle" tb:tag="units" xml:space="preserve"><tspan transform="translate(0,-144)" dominant-baseline="middle">°C</tspan></text><g tb:tag="scale">
  <rect x="176" y="83" width="42" height="652" fill="#c8dff7" tb:tag="scaleBackground"/>
  <rect x="176.5" y="83.5" width="41" height="651" stroke="#000" stroke-opacity=".87"/>
  <g tb:tag="lowWarningScale">
   <rect transform="scale(1,-1)" x="176" y="-736.5" width="42" height="170" fill="#ebebeb" tb:tag="lowWarningScaleBackground"/>
   <rect transform="scale(1,-1)" x="176.5" y="-736" width="41" height="169" stroke="#000" stroke-opacity=".87"/>
  </g>
  <g tb:tag="highWarningScale">
   <rect x="176" y="83" width="42" height="170" fill="#ebebeb" tb:tag="highWarningScaleBackground"/>
   <rect x="176.5" y="83.5" width="41" height="169" stroke="#000" stroke-opacity=".87"/>
  </g>
  <g tb:tag="lowCriticalScale">
   <rect transform="scale(1,-1)" x="176" y="-736.5" width="42" height="90" fill="#666" tb:tag="lowCriticalScaleBackground"/>
   <rect transform="scale(1,-1)" x="176.5" y="-736" width="41" height="89" stroke="#000" stroke-opacity=".87"/>
  </g>
  <g tb:tag="highCriticalScale">
   <rect x="176" y="83" width="42" height="90" fill="#666" tb:tag="highCriticalScaleBackground"/>
   <rect x="176.5" y="83.5" width="41" height="89" stroke="#000" stroke-opacity=".87"/>
  </g>
 </g><g font-family="Roboto" font-size="32px" font-weight="500" text-anchor="middle" style="display: none;" tb:tag="minMaxValue">
  <text x="260.02344" y="97" fill="#666" style="" tb:tag="maxValue" xml:space="preserve"><tspan dominant-baseline="middle">100</tspan></text>
  <text x="239.07031" y="727" fill="#666666" style="" tb:tag="minValue" xml:space="preserve"><tspan dominant-baseline="middle">0</tspan></text>
 </g><g transform="translate(0,-350)" tb:tag="valuePosition">
  <path d="m168 734-42-24v48z" fill="#666" tb:tag="valuePointer"/>
  <text x="262.53329" y="738.125" fill="#002878" font-family="Roboto" font-size="60px" font-weight="400" text-anchor="middle" tb:tag="value" xml:space="preserve"><tspan transform="translate(0,-144)" dominant-baseline="middle">26</tspan></text>
 </g><g transform="translate(0,-440)" tb:tag="target">
  <rect transform="rotate(-45)" x="-379.7" y="634.25" width="24" height="24" fill="#dedede" tb:tag="targetBackground"/>
  <rect transform="rotate(-45)" x="-378.7" y="635.25" width="22" height="22" stroke="#000" stroke-opacity=".87" stroke-width="2"/>
 </g><path d="m134.53 0s-134.53 0-134.53 134v656.72c0 5.3024 3.5817 9.2808 8 9.2808h384c4.418 0 8-3.9784 8-9.2808v-656.72c0-134-132.14-134-132.14-134h-67.86zm134.14 162.4c-2.5773 0-4.6667 2.5072-4.6667 5.6v600.8c0 3.0928 2.0893 5.6 4.6667 5.6h29.333c2.5773 0 4.6667-2.5072 4.6667-5.6v-600.8c0-3.0928-2.0893-5.6-4.6667-5.6z" fill="#000" fill-opacity="0" style="stroke-width:.7303" tb:tag="clickArea"/>
</svg>