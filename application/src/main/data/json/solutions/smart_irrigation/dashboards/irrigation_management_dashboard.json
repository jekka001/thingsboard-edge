{
  "title": "Irrigation management",
  "image": "tb-image;/api/images/system/smart-irrigation.jpg",
  "mobileHide": false,
  "mobileOrder": null,
  "configuration": {
    "description": "",
    "widgets": {
      "a6b597ee-cb21-ee9f-dc98-8673f1d976f1": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 6.5,
        "config": {
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1667907617960,
                "endTimeMs": 1667994017960
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0,0,0,0.87)",
          "padding": "0px",
          "settings": {
            "entitiesTitle": "Irrigation Schedule",
            "enableSearch": true,
            "enableSelectColumnDisplay": true,
            "enableStickyHeader": true,
            "enableStickyAction": true,
            "reserveSpaceForHiddenAction": "true",
            "displayEntityName": false,
            "displayEntityLabel": false,
            "displayEntityType": false,
            "displayPagination": true,
            "defaultPageSize": 10,
            "defaultSortOrder": "Name",
            "useRowStyleFunction": false
          },
          "title": "New Entities table",
          "dropShadow": false,
          "enableFullscreen": false,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400,
            "padding": "5px 10px 5px 10px"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "4ed5e77d-3c18-a442-e616-14f73013a686",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "name",
                  "type": "entityField",
                  "label": "Name",
                  "color": "#8bc34a",
                  "settings": {
                    "columnWidth": "80px",
                    "useCellStyleFunction": true,
                    "cellStyleFunction": "return {\n  fontWeight: 600\n}\n",
                    "useCellContentFunction": true,
                    "cellContentFunction": "return '<span style=\"background: rgba(111, 116, 242, 0.08); border-radius: 16px; padding: 4px 8px; color: #5553AF;\">'+value+'</span>';",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.6933423282312259,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "schedule",
                  "type": "entityField",
                  "label": "Start day",
                  "color": "#4caf50",
                  "settings": {
                    "columnWidth": "60px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "var schedule = JSON.parse(value);\nvar dateFormat;\nif (new Date().getYear() === new Date(schedule.startTime).getYear()) {\n    dateFormat = 'd MMM';\n} else {\n    dateFormat = 'd MMM yyyy';\n}\nreturn ctx.date.transform(schedule.startTime, dateFormat);",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.04733952880745074,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "schedule",
                  "type": "entityField",
                  "label": "Start time",
                  "color": "#f44336",
                  "settings": {
                    "columnWidth": "60px",
                    "useCellStyleFunction": true,
                    "cellStyleFunction": "return {\n  fontWeight: 600\n}\n",
                    "useCellContentFunction": true,
                    "cellContentFunction": "var schedule = JSON.parse(value);\nvar time = ctx.date.transform(schedule.startTime, 'HH:mm');\nreturn '<span style=\"background: rgba(111, 116, 242, 0.08); border-radius: 16px; padding: 4px 8px; color: #5553AF;\">'+time+'</span>';\n",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.1466902034288322,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "schedule",
                  "type": "entityField",
                  "label": "Repeat",
                  "color": "#9c27b0",
                  "settings": {
                    "columnWidth": "60px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "var schedulerWeekday =\n  [\n    'scheduler.sunday',\n    'scheduler.monday',\n    'scheduler.tuesday',\n    'scheduler.wednesday',\n    'scheduler.thursday',\n    'scheduler.friday',\n    'scheduler.saturday'\n  ];\nvar schedule = JSON.parse(value);\nif (schedule.repeat) {\n    var type = schedule.repeat.type;\n    if (type === 'DAILY') {\n        return ctx.translate.instant('scheduler.daily');\n    } else if (type === 'EVERY_N_DAYS') {\n        return ctx.translate.instant('scheduler.every-n-days-text', {days: schedule.repeat.days});\n    } else if (type === 'MONTHLY') {\n        return ctx.translate.instant('scheduler.monthly');\n    } else if (type === 'EVERY_N_WEEKS') {\n        return ctx.translate.instant('scheduler.every-n-weeks-text', {weeks: schedule.repeat.weeks});\n    } else if (type === 'YEARLY') {\n        return ctx.translate.instant('scheduler.scheduler.yearly');\n    } else if (type === 'TIMER') {\n        var timeUnit = schedule.repeat.timeUnit;\n        var timeUnitRepeatText;\n        if (timeUnit === 'HOURS') {\n            timeUnitRepeatText = 'scheduler.every-hour';\n        } else if (timeUnit === 'MINUTES') {\n            timeUnitRepeatText = 'scheduler.every-minute';\n        } else {\n            timeUnitRepeatText = 'scheduler.every-second';\n        }\n        return ctx.translate.instant(timeUnitRepeatText, {count: schedule.repeat.repeatInterval});\n    } else {\n        var text = ctx.translate.instant('scheduler.weekly') + ' ' + ctx.translate.instant('scheduler.on') + ' ';\n        text += schedule.repeat.repeatOn.map((day) => ctx.translate.instant(schedulerWeekday[day])).join(', ');\n        return text;\n    }\n} else {\n    return '&#8212;';\n}\n",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.8312570330048112,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "schedule",
                  "type": "entityField",
                  "label": "End day",
                  "color": "#ffc107",
                  "settings": {
                    "columnWidth": "80px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "var schedule = JSON.parse(value);\nif (schedule.repeat && schedule.repeat.endsOn) {\n    var dateFormat;\n    if (new Date().getYear() === new Date(schedule.repeat.endsOn).getYear()) {\n        dateFormat = 'd MMM';\n    } else {\n        dateFormat = 'd MMM yyyy';\n    }\n    return ctx.date.transform(schedule.repeat.endsOn, dateFormat);\n} else {\n    return '&#8212;';\n}\n",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.17195353755002496,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "configuration",
                  "type": "entityField",
                  "label": "Duration",
                  "color": "#2196f3",
                  "settings": {
                    "columnWidth": "80px",
                    "useCellStyleFunction": true,
                    "cellStyleFunction": "return {\n  fontWeight: 600\n}",
                    "useCellContentFunction": true,
                    "cellContentFunction": "var configuration = JSON.parse(value);\nvar duration;\nif (configuration.msgBody && configuration.msgBody.durationInMinutes) {\n    duration = configuration.msgBody.durationInMinutes + ' min';\n} else {\n    duration = '&#8212;';\n}\n\nreturn '<span style=\"background: rgba(111, 116, 242, 0.08); border-radius: 16px; padding: 4px 8px;  color: #5553AF;\">'+duration+'</span>';\n",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.6115695527306177,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "configuration",
                  "type": "entityField",
                  "label": "Volume",
                  "color": "#607d8b",
                  "settings": {
                    "columnWidth": "80px",
                    "useCellStyleFunction": true,
                    "cellStyleFunction": "return {\n  fontWeight: 600\n}",
                    "useCellContentFunction": true,
                    "cellContentFunction": "var configuration = JSON.parse(value);\nvar volume;\nif (configuration.msgBody && configuration.msgBody.volumeInLitters) {\n    volume = configuration.msgBody.volumeInLitters + ' l';\n} else {\n    volume = '&#8212;';\n}\n\nreturn '<span style=\"background: rgba(111, 116, 242, 0.08); border-radius: 16px; padding: 4px 8px; color: #5553AF;\">'+volume+'</span>';\n",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.17406314101781595,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ]
            }
          ],
          "displayTimewindow": true,
          "showTitleIcon": false,
          "titleTooltip": "",
          "enableDataExport": false,
          "widgetStyle": {},
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "actions": {
            "headerButton": [
              {
                "name": "Create irrigation schedule",
                "icon": "add",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form #addSchedulerEventForm=\"ngForm\" [formGroup]=\"addSchedulerEventFormGroup\"\n      (ngSubmit)=\"save()\" class=\"sf-scheduler-event-form\">\n  <mat-toolbar class=\"flex flex-row\" color=\"primary\">\n    <h2>Create irrigation schedule</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content class=\"flex flex-col\">\n    <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n      <mat-form-field class=\"mat-block flex-1\">\n        <mat-label>Name</mat-label>\n        <input matInput formControlName=\"name\" required>\n        <mat-error *ngIf=\"addSchedulerEventFormGroup.get('name').hasError('required')\">\n          Name is required.\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <span class=\"title-modal\">Start</span>\n    <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Date</mat-label>\n        <mat-datetimepicker-toggle [for]=\"startDatePicker\" matSuffix></mat-datetimepicker-toggle>\n        <mat-datetimepicker (opened)=\"datePickerOpened()\" #startDatePicker type=\"date\" openOnFocus=\"true\"></mat-datetimepicker>\n        <input required matInput formControlName=\"startDate\" [matDatetimepicker]=\"startDatePicker\">\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Time</mat-label>\n        <mat-datetimepicker-toggle [for]=\"startTimePicker\" matSuffix></mat-datetimepicker-toggle>\n        <mat-datetimepicker (opened)=\"datePickerOpened()\" #startTimePicker type=\"time\" openOnFocus=\"true\"></mat-datetimepicker>\n        <input required matInput formControlName=\"startTime\" [matDatetimepicker]=\"startTimePicker\">\n      </mat-form-field>\n    </div>\n    <span class=\"title-modal\">Stop irrigation condition</span>\n    <mat-button-toggle-group formControlName=\"condition\" aria-label=\"Condition\">\n      <mat-button-toggle class=\"flex-1\" value=\"consumption\">Consumption</mat-button-toggle>\n      <mat-button-toggle class=\"flex-1\" value=\"duration\">Duration</mat-button-toggle>\n    </mat-button-toggle-group>\n    <section *ngIf=\"addSchedulerEventFormGroup.get('condition').value === 'consumption'\" class=\"flex flex-col\">\n      <label class=\"tb-small\" style=\"padding-top: 12px; padding-bottom: 12px;\">Stop irrigation when the amount of water used reaches specified value</label>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Liters</mat-label>\n        <input required matInput formControlName=\"volumeInLitters\" type=\"number\" min=\"1\" step=\"1\">\n        <mat-error *ngIf=\"addSchedulerEventFormGroup.get('volumeInLitters').hasError('required')\">\n          Volume in litters is required.\n        </mat-error>\n        <mat-error *ngIf=\"addSchedulerEventFormGroup.get('volumeInLitters').hasError('min')\">\n          Volume in litters must be greater than 0.\n        </mat-error>\n      </mat-form-field>\n    </section>\n    <section *ngIf=\"addSchedulerEventFormGroup.get('condition').value === 'duration'\" class=\"flex flex-col\">\n      <label class=\"tb-small\" style=\"padding-top: 12px; padding-bottom: 12px;\">Stop irrigation after the specified time</label>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Duration, min</mat-label>\n        <input required matInput formControlName=\"durationInMinutes\" type=\"number\" min=\"1\" step=\"1\">\n        <mat-error *ngIf=\"addSchedulerEventFormGroup.get('durationInMinutes').hasError('required')\">\n          Duration is required.\n        </mat-error>\n        <mat-error *ngIf=\"addSchedulerEventFormGroup.get('durationInMinutes').hasError('min')\">\n          Duration must be greater than 0.\n        </mat-error>\n      </mat-form-field>\n    </section>\n    <mat-slide-toggle formControlName=\"repeat\" style=\"padding-bottom: 48px;\">\n      Repeat\n    </mat-slide-toggle>\n    <section *ngIf=\"addSchedulerEventFormGroup.get('repeat').value\" class=\"flex flex-col\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label translate>scheduler.repeats</mat-label>\n        <mat-select matInput formControlName=\"repeatType\" required panelClass=\"sf-scheduler-event-form\">\n          <mat-option *ngFor=\"let repeatType of schedulerRepeatTypeValues\" [value]=\"repeatType\">\n            {{ schedulerRepeatTypes[repeatType] | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\" *ngIf=\"addSchedulerEventFormGroup.get('repeatType').value === 'EVERY_N_DAYS'\" style=\"padding-bottom: 16px;\">\n        <mat-label translate>scheduler.repeat-every-n-days</mat-label>\n        <input type=\"number\" min=\"1\" step=\"1\" matInput formControlName=\"days\" required>\n        <mat-error *ngIf=\"addSchedulerEventFormGroup.get('days').hasError('required')\">\n          {{ 'scheduler.repeat-days-required' | translate }}\n        </mat-error>\n        <mat-error *ngIf=\"addSchedulerEventFormGroup.get('days').hasError('min')\">\n          {{ 'scheduler.invalid-repeat-days-value' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\" *ngIf=\"addSchedulerEventFormGroup.get('repeatType').value === 'EVERY_N_WEEKS'\" style=\"padding-bottom: 16px;\">\n        <mat-label translate>scheduler.repeat-every-n-weeks</mat-label>\n        <input type=\"number\" min=\"1\" step=\"1\" matInput formControlName=\"weeks\" required>\n        <mat-error *ngIf=\"addSchedulerEventFormGroup.get('weeks').hasError('required')\">\n          {{ 'scheduler.repeat-weeks-required' | translate }}\n        </mat-error>\n        <mat-error *ngIf=\"addSchedulerEventFormGroup.get('days').hasError('min')\">\n          {{ 'scheduler.invalid-repeat-weeks-value' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <section *ngIf=\"addSchedulerEventFormGroup.get('repeatType').value === 'TIMER'\"\n               formGroupName=\"timerRepeat\"\n               class=\"flex flex-col\">\n        <label translate class=\"tb-small\" style=\"padding-bottom: 8px;\">scheduler.repeat-every</label>\n        <div class=\"flex flex-col gap-2 gt-sm:flex-row\">\n          <mat-form-field appearance=\"fill\" class=\"gt-sm:max-w-50% flex-full\">\n            <mat-label>Interval</mat-label>\n            <input type=\"number\" min=\"0\" stype=\"any\" matInput formControlName=\"repeatInterval\" required>\n            <mat-error *ngIf=\"addSchedulerEventFormGroup.get('timerRepeat.repeatInterval').hasError('required')\">\n              {{ 'scheduler.time-interval-required' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field appearance=\"fill\" class=\"gt-sm:max-w-50% flex-full\">\n            <mat-label>Time unit</mat-label>\n            <mat-select matInput formControlName=\"timeUnit\" required panelClass=\"sf-scheduler-event-form\">\n              <mat-option *ngFor=\"let timeUnit of schedulerTimeUnitValues\" [value]=\"timeUnit\">\n                {{ schedulerTimeUnits[timeUnit] | translate }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"addSchedulerEventFormGroup.get('timerRepeat.timeUnit').hasError('required')\">\n              {{ 'scheduler.time-unit-required' | translate }}\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </section>\n      <section *ngIf=\"addSchedulerEventFormGroup.get('repeatType').value === 'WEEKLY'\"\n               formArrayName=\"weeklyRepeat\"\n               class=\"flex flex-col\" style=\"padding-bottom: 16px;\">\n        <label translate class=\"tb-small\">scheduler.repeat-on</label>\n        <span style=\"height: 16px;\"></span>\n        <div class=\"flex flex-row gap-4\">\n          <ng-container *ngFor=\"let key of weeklyRepeatsKeys\">\n            <button type=\"button\"\n                    mat-button\n                    class=\"weekly-repeat\"\n                    [color]=\"weeklyRepeatControl(key).value ? 'primary' : ''\"\n                    [class]=\"{ 'mdc-button--outlined mat-mdc-outlined-button': !weeklyRepeatControl(key).value, 'mdc-button--raised mat-mdc-raised-button no-border': weeklyRepeatControl(key).value }\"\n                    (click)=\"toggleWeeklyRepeat(key)\"\n                    matTooltip=\"{{ weeklyRepeats[key].tooltip | translate }}\"\n                    matTooltipPosition=\"above\">\n              {{ weeklyRepeats[key].label | translate }}\n            </button>\n          </ng-container>\n        </div>\n      </section>\n      <section class=\"flex flex-row items-start justify-start\">\n        <mat-form-field appearance=\"fill\">\n          <mat-label>End date</mat-label>\n          <mat-datetimepicker-toggle [for]=\"endDatePicker\" matSuffix></mat-datetimepicker-toggle>\n          <mat-datetimepicker (opened)=\"datePickerOpened()\" #endDatePicker type=\"date\" openOnFocus=\"true\"></mat-datetimepicker>\n          <input required matInput formControlName=\"endsOnDate\" [matDatetimepicker]=\"endDatePicker\" [errorStateMatcher]=\"endsOnDateMatcher\">\n          <mat-error *ngIf=\"addSchedulerEventFormGroup.hasError('endsOnDateValidator')\">\n            Invalid date.\n          </mat-error>\n        </mat-form-field>\n      </section>\n    </section>\n  </div>\n  <div mat-dialog-actions class=\"flex flex-row items-center justify-end\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || addSchedulerEventForm.invalid || !addSchedulerEventForm.dirty\">\n      Create\n    </button>\n  </div>\n</form>\n",
                "customCss": ".sf-scheduler-event-form .mat-toolbar.mat-primary {\n    background: #fff;\n    color: rgba(0, 0, 0, 0.87);\n}\n\n.sf-scheduler-event-form .mat-mdc-button.mat-primary:not(:disabled), .sf-scheduler-event-form .mat-mdc-icon-button.mat-primary:not(:disabled), .sf-scheduler-event-form .mat-mdc-outlined-button.mat-primary:not(:disabled) {\n    color: #5553AF;\n}\n\n.sf-scheduler-event-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-scheduler-event-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-scheduler-event-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-scheduler-event-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    color: #fff;\n}\n\n.sf-scheduler-event-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-scheduler-event-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-scheduler-event-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-scheduler-event-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    background-color: #6F74F2;\n}\n\n.sf-scheduler-event-form .mat-mdc-button .mat-mdc-button-persistent-ripple::before, .sf-scheduler-event-form .mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before, .sf-scheduler-event-form .mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before, .sf-scheduler-event-form .mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before {\n    background-color: #6F74F2;\n}\n\n.sf-scheduler-event-form .mat-mdc-form-field .mdc-text-field--focused .mdc-floating-label {\n    color: #5553AF;\n}\n\n.sf-scheduler-event-form .mdc-text-field--filled .mdc-line-ripple::after {\n    border-bottom-color: #6F74F2;\n}\n\n.sf-scheduler-event-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__handle::after, \n.sf-scheduler-event-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::after, \n.sf-scheduler-event-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::before {\n    background-color: #6F74F2 !important;\n}\n\n.sf-scheduler-event-form .mat-mdc-slide-toggle.mat-accent .mdc-switch .mdc-switch__track::after {\n    background: rgba(111, 116, 242, 0.54) !important;\n}\n\n.sf-scheduler-event-form .mat-datetimepicker-calendar-header {\n    background-color: #6F74F2;\n}\n\n.sf-scheduler-event-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-selected {\n    background-color: #6F74F2;\n}\n\n.sf-scheduler-event-form .mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-selected {\n    background-color: #8689f4;\n}\n\n.sf-scheduler-event-form .mat-datetimepicker-clock-center, .sf-scheduler-event-form .mat-datetimepicker-clock-hand, .sf-scheduler-event-form .mat-datetimepicker-clock-hand:before {\n    background-color: #6F74F2;\n}\n\n.sf-scheduler-event-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-today:not(.mat-datetimepicker-calendar-body-selected) {\n    border-color: #6F74F2;\n}\n\n.sf-scheduler-event-form .mat-icon {\n    color: #868D9C;\n}\n\n.sf-scheduler-event-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #868D9C;\n    padding-bottom: 8px;\n}\n\n.sf-scheduler-event-form .mat-button-toggle-group-appearance-standard, .sf-scheduler-event-form .mat-button-toggle-standalone.mat-button-toggle-appearance-standard {\n    border: none;\n}\n\n.sf-scheduler-event-form .mat-button-toggle-group {\n    min-height: 32px;\n}\n\n.sf-scheduler-event-form .mat-button-toggle {\n    background: rgba(0, 0, 0, 0.06);\n    height: 32px;\n    align-items: center;\n    display: flex;\n}\n\n.sf-scheduler-event-form .mat-button-toggle-checked .mat-button-toggle-button {\n    background-color: #fff;\n    border-radius: 4px;\n    margin-left: 2px;\n    margin-right: 2px;\n}\n\n.sf-scheduler-event-form .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n    line-height: 28px;\n    font-size: 14px;\n}\n\n.sf-scheduler-event-form .mat-button-toggle-group-appearance-standard .mat-button-toggle+.mat-button-toggle {\n    border-left: none;\n}\n\n.sf-scheduler-event-form .mat-button-toggle-checked.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay {\n    opacity: .01;\n}\n\n.sf-scheduler-event-form .mat-mdc-button.weekly-repeat {\n    padding: 0 15px;\n    min-width: 0;\n}\n\n.sf-scheduler-event-form .mat-mdc-button.weekly-repeat.no-border {\n    border: 1px solid #6F74F2;\n}\n\n.sf-scheduler-event-form.mat-primary .mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text {\n    color: #5553AF;\n}\n\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet schedulerEventService = $injector.get(widgetContext.servicesMap.get('schedulerEventService'));\n\nopenAddSchedulerEventDialog();\n\nfunction openAddSchedulerEventDialog() {\n    customDialog.customDialog(htmlTemplate, AddSchedulerEventDialogController).subscribe();\n}\n\n\nfunction AddSchedulerEventDialogController(instance) {\n    let vm = instance;\n\n    var currentDate = new Date();\n    var startDate = new Date(\n      currentDate.getFullYear(),\n      currentDate.getMonth(),\n      currentDate.getDate());\n    var startTime = new Date(\n      currentDate.getFullYear(),\n      currentDate.getMonth(),\n      currentDate.getDate(),\n      0,0,0,0);\n\n    vm.schedulerRepeatTypes = {\n        'DAILY': 'scheduler.daily',\n        'EVERY_N_DAYS': 'scheduler.every-n-days',\n        'WEEKLY': 'scheduler.weekly',\n        'EVERY_N_WEEKS': 'scheduler.every-n-weeks',\n        'MONTHLY': 'scheduler.monthly',\n        'YEARLY': 'scheduler.yearly',\n        'TIMER': 'scheduler.timer'\n    };\n\n      \n    vm.schedulerRepeatTypeValues = Object.keys(vm.schedulerRepeatTypes);\n    \n    vm.schedulerTimeUnits = {\n        'HOURS': 'scheduler.hours',\n        'MINUTES': 'scheduler.minutes',\n        'SECONDS': 'scheduler.seconds'\n    };\n\n      \n    vm.schedulerTimeUnitValues = Object.keys(vm.schedulerTimeUnits);\n    \n    vm.weeklyRepeats = {\n      0: { label: 'scheduler.sunday-label', tooltip: 'scheduler.repeat-on-sunday' },  \n      1: { label: 'scheduler.monday-label', tooltip: 'scheduler.repeat-on-monday' },\n      2: { label: 'scheduler.tuesday-label', tooltip: 'scheduler.repeat-on-tuesday' },\n      3: { label: 'scheduler.wednesday-label', tooltip: 'scheduler.repeat-on-wednesday' },\n      4: { label: 'scheduler.thursday-label', tooltip: 'scheduler.repeat-on-thursday' },\n      5: { label: 'scheduler.friday-label', tooltip: 'scheduler.repeat-on-friday' },\n      6: { label: 'scheduler.saturday-label', tooltip: 'scheduler.repeat-on-saturday' },\n    };\n    \n    vm.weeklyRepeatsKeys = Object.keys(vm.weeklyRepeats);\n    \n    vm.weeklyRepeatControl  = function(index) {\n        return vm.addSchedulerEventFormGroup.get('weeklyRepeat').at(index);\n    }\n    \n    vm.toggleWeeklyRepeat = function(key) {\n        const control = vm.weeklyRepeatControl(key);\n        control.setValue(!control.value);\n        vm.addSchedulerEventFormGroup.get('weeklyRepeat').markAsDirty();\n    }\n    \n    vm.createDefaultWeeklyRepeat = function(startDate, weeklyRepeat) {\n        if (!weeklyRepeat) {\n          weeklyRepeat = [];\n          for (let i = 0; i < 7; i++) {\n            weeklyRepeat[i] = false;\n          }\n        }\n        if (typeof startDate !== 'undefined' && startDate !== null) {\n          const setCurrentDate = weeklyRepeat.filter(repeat => repeat).length === 0;\n          if (setCurrentDate) {\n            const day = moment(startDate).day();\n            weeklyRepeat[day] = true;\n          }\n        }\n        return weeklyRepeat;\n    }\n    \n    vm.endsOnDateValidator = function(startDate, endsOnDate) {\n        return (group) => {\n          if (group.controls[endsOnDate].status === 'VALID') {\n            if (group.controls[startDate].value.getTime() > group.controls[endsOnDate].value.getTime()) {\n              return { endsOnDateValidator: true };\n            }\n          }\n          return null;\n        };\n    };\n    \n    vm.endsOnDateMatcher = {\n        isErrorState: function(control) {\n            const invalidCtrl = control && !!(control.invalid);\n            const invalidParent = control && !!(control.parent &&\n            control.parent.invalid && control.parent.hasError('endsOnDateValidator'));\n            return (invalidCtrl || invalidParent);\n        }\n    };\n    \n    vm.datePickerOpened = function() {\n      $('.mat-datetimepicker-popup').addClass('sf-scheduler-event-form');\n    };\n\n\n    vm.addSchedulerEventFormGroup = vm.fb.group({\n      name: ['', [vm.validators.required]],\n      startDate: [startDate, [vm.validators.required]],\n      startTime: [startTime, [vm.validators.required]],\n      condition: ['consumption', []],\n      volumeInLitters: [1000, [vm.validators.required, vm.validators.min(1)]],\n      durationInMinutes: [30, [vm.validators.required, vm.validators.min(1)]],\n      repeat: [null, []],\n      repeatType: [null, [vm.validators.required]],\n      weeklyRepeat: vm.fb.array(vm.createDefaultWeeklyRepeat()),\n      endsOnDate: [null, [vm.validators.required]],\n      days: [null, [vm.validators.min(1), vm.validators.required]],\n      weeks: [null, [vm.validators.min(1), vm.validators.required]],\n      timerRepeat: vm.fb.group(\n        {\n          repeatInterval: [null, [vm.validators.required, vm.validators.min(0)]],\n          timeUnit: [null, [vm.validators.required]]\n        }\n      )\n    },\n    {\n        validator: vm.endsOnDateValidator('startDate', 'endsOnDate')\n    });\n    \n    vm.addSchedulerEventFormGroup.get('repeat').valueChanges.subscribe((repeat) => {\n      if (repeat) {\n        vm.addSchedulerEventFormGroup.get('repeatType').patchValue('DAILY', {emitEvent: false});\n        const startDate = vm.addSchedulerEventFormGroup.get('startDate').value;\n        const endsOnDate = new Date(\n          startDate.getFullYear(),\n          startDate.getMonth(),\n          startDate.getDate() + 5);\n        vm.addSchedulerEventFormGroup.get('endsOnDate').patchValue(endsOnDate, {emitEvent: false});\n      }\n      vm.updateEnabledState();\n    });\n    \n    vm.addSchedulerEventFormGroup.get('repeatType').valueChanges.subscribe((repeatType) => {\n      if (repeatType === 'WEEKLY') {\n          const startDate = vm.addSchedulerEventFormGroup.get('startDate').value;\n          vm.addSchedulerEventFormGroup.get('weeklyRepeat').patchValue(vm.createDefaultWeeklyRepeat(startDate), {emitEvent: false});\n      }\n      vm.updateEnabledState();\n    });\n    \n    vm.addSchedulerEventFormGroup.get('weeklyRepeat').valueChanges.subscribe((weeklyRepeat) => {\n      const startDate = vm.addSchedulerEventFormGroup.get('startDate').value;\n      vm.addSchedulerEventFormGroup.get('weeklyRepeat').patchValue(vm.createDefaultWeeklyRepeat(startDate, weeklyRepeat),\n        {emitEvent: false});\n    });\n    \n    vm.addSchedulerEventFormGroup.get('condition').valueChanges.subscribe(() => {\n      vm.updateEnabledState();\n    });\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    vm.updateEnabledState = function() {\n        vm.addSchedulerEventFormGroup.enable({emitEvent: false});\n        const repeat = vm.addSchedulerEventFormGroup.get('repeat').value;\n        const condition = vm.addSchedulerEventFormGroup.get('condition').value;\n        if (!repeat) {\n            vm.addSchedulerEventFormGroup.get('repeatType').disable({emitEvent: false});\n            vm.addSchedulerEventFormGroup.get('weeklyRepeat').disable({emitEvent: false});\n            vm.addSchedulerEventFormGroup.get('endsOnDate').disable({emitEvent: false});\n            vm.addSchedulerEventFormGroup.get('timerRepeat').disable({emitEvent: false});\n            vm.addSchedulerEventFormGroup.get('days').disable({emitEvent: false});\n            vm.addSchedulerEventFormGroup.get('weeks').disable({emitEvent: false});\n        } else {\n            const repeatType = vm.addSchedulerEventFormGroup.get('repeatType').value;\n            if (repeatType !== 'WEEKLY') {\n                vm.addSchedulerEventFormGroup.get('weeklyRepeat').disable({emitEvent: false});\n            }\n            if (repeatType !== 'TIMER') {\n                vm.addSchedulerEventFormGroup.get('timerRepeat').disable({emitEvent: false});\n            }\n            if (repeatType !== 'EVERY_N_DAYS') {\n                vm.addSchedulerEventFormGroup.get('days').disable({emitEvent: false});\n            }\n            if (repeatType !== 'EVERY_N_WEEKS') {\n                vm.addSchedulerEventFormGroup.get('weeks').disable({emitEvent: false});\n            }\n        }\n        if (condition === 'consumption') {\n            vm.addSchedulerEventFormGroup.get('durationInMinutes').disable({emitEvent: false});\n        } else {\n            vm.addSchedulerEventFormGroup.get('volumeInLitters').disable({emitEvent: false});\n        }\n        \n        vm.addSchedulerEventFormGroup.get('repeatType').updateValueAndValidity({emitEvent: false});\n        vm.addSchedulerEventFormGroup.get('weeklyRepeat').updateValueAndValidity({emitEvent: false});\n        vm.addSchedulerEventFormGroup.get('endsOnDate').updateValueAndValidity({emitEvent: false});\n        vm.addSchedulerEventFormGroup.get('timerRepeat').updateValueAndValidity({emitEvent: false});\n        vm.addSchedulerEventFormGroup.get('days').updateValueAndValidity({emitEvent: false});\n        vm.addSchedulerEventFormGroup.get('weeks').updateValueAndValidity({emitEvent: false});\n        vm.addSchedulerEventFormGroup.get('durationInMinutes').updateValueAndValidity({emitEvent: false});\n        vm.addSchedulerEventFormGroup.get('volumeInLitters').updateValueAndValidity({emitEvent: false});\n    };\n    \n    vm.save = function() {\n        vm.addSchedulerEventFormGroup.markAsPristine();\n        saveSchedulerEventObservable().subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n    \n    vm.updateEnabledState();\n\n    function saveSchedulerEventObservable() {\n        const formValues = vm.addSchedulerEventFormGroup.value;\n        let schedulerEvent = {\n            name: formValues.name,\n            type: 'START_IRRIGATION',\n            originatorId: widgetContext.stateController.getStateParams().entityId,\n            schedule: {\n                timezone: moment.tz.guess()\n            },\n            configuration: {\n                msgType: 'START_IRRIGATION',\n                msgBody: {}\n            }\n        };\n        const startDateValue = formValues.startDate;\n        const startTimeValue = formValues.startTime;\n        const startTime = new Date(\n            startDateValue.getFullYear(),\n            startDateValue.getMonth(),\n            startDateValue.getDate(),\n            startTimeValue.getHours(),\n            startTimeValue.getMinutes(),\n            startTimeValue.getSeconds()\n        );\n        schedulerEvent.schedule.startTime = startTime.getTime();\n        if (formValues.repeat) {\n            schedulerEvent.schedule.repeat = {\n                type: formValues.repeatType,\n                endsOn: formValues.endsOnDate.getTime()\n            };\n            if (formValues.repeatType === 'WEEKLY') {\n                schedulerEvent.schedule.repeat.repeatOn = [];\n                for (let i = 0; i < 7; i++) {\n                    if (formValues.weeklyRepeat[i]) {\n                        schedulerEvent.schedule.repeat.repeatOn.push(i);\n                    }\n                }\n            } else if (formValues.repeatType === 'TIMER') {\n                schedulerEvent.schedule.repeat.repeatInterval = formValues.timerRepeat.repeatInterval;\n                schedulerEvent.schedule.repeat.timeUnit = formValues.timerRepeat.timeUnit;\n            } else if (formValues.repeatType === 'EVERY_N_DAYS') {\n                schedulerEvent.schedule.repeat.days = formValues.days;\n            } else if (formValues.repeatType === 'EVERY_N_WEEKS') {\n                schedulerEvent.schedule.repeat.weeks = formValues.weeks;\n            }\n        }\n        const condition = formValues.condition;\n        if (condition === 'consumption') {\n            schedulerEvent.configuration.msgBody.volumeInLitters = formValues.volumeInLitters;\n        } else {\n            schedulerEvent.configuration.msgBody.durationInMinutes = formValues.durationInMinutes;\n        }\n        return schedulerEventService.saveSchedulerEvent(schedulerEvent);\n    }\n\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "0055529f-4ce0-f8c3-12b6-c466af22b063"
              }
            ],
            "actionCellButton": [
              {
                "name": "Edit irrigation schedule",
                "icon": "edit",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form #addSchedulerEventForm=\"ngForm\" [formGroup]=\"editSchedulerEventFormGroup\"\n      (ngSubmit)=\"save()\" class=\"sf-scheduler-event-form\">\n  <mat-toolbar class=\"flex flex-row\" color=\"primary\">\n    <h2>Edit irrigation schedule '{{ entityName }}'</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content class=\"flex flex-col\">\n    <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n      <mat-form-field class=\"mat-block flex-1\">\n        <mat-label>Name</mat-label>\n        <input matInput formControlName=\"name\" required>\n        <mat-error *ngIf=\"editSchedulerEventFormGroup.get('name').hasError('required')\">\n          Name is required.\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <span class=\"title-modal\">Start</span>\n    <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Date</mat-label>\n        <mat-datetimepicker-toggle [for]=\"startDatePicker\" matSuffix></mat-datetimepicker-toggle>\n        <mat-datetimepicker (opened)=\"datePickerOpened()\" #startDatePicker type=\"date\" openOnFocus=\"true\"></mat-datetimepicker>\n        <input required matInput formControlName=\"startDate\" [matDatetimepicker]=\"startDatePicker\">\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Time</mat-label>\n        <mat-datetimepicker-toggle [for]=\"startTimePicker\" matSuffix></mat-datetimepicker-toggle>\n        <mat-datetimepicker (opened)=\"datePickerOpened()\" #startTimePicker type=\"time\" openOnFocus=\"true\"></mat-datetimepicker>\n        <input required matInput formControlName=\"startTime\" [matDatetimepicker]=\"startTimePicker\">\n      </mat-form-field>\n    </div>\n    <span class=\"title-modal\">Stop irrigation condition</span>\n    <mat-button-toggle-group formControlName=\"condition\" aria-label=\"Condition\">\n      <mat-button-toggle class=\"flex-1\" value=\"consumption\">Consumption</mat-button-toggle>\n      <mat-button-toggle class=\"flex-1\" value=\"duration\">Duration</mat-button-toggle>\n    </mat-button-toggle-group>\n    <section *ngIf=\"editSchedulerEventFormGroup.get('condition').value === 'consumption'\" class=\"flex flex-col\">\n      <label class=\"tb-small\" style=\"padding-top: 12px; padding-bottom: 12px;\">Stop irrigation when the amount of water used reaches specified value</label>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Liters</mat-label>\n        <input required matInput formControlName=\"volumeInLitters\" type=\"number\" min=\"1\" step=\"1\">\n        <mat-error *ngIf=\"editSchedulerEventFormGroup.get('volumeInLitters').hasError('required')\">\n          Volume in litters is required.\n        </mat-error>\n        <mat-error *ngIf=\"editSchedulerEventFormGroup.get('volumeInLitters').hasError('min')\">\n          Volume in litters must be greater than 0.\n        </mat-error>\n      </mat-form-field>\n    </section>\n    <section *ngIf=\"editSchedulerEventFormGroup.get('condition').value === 'duration'\" class=\"flex flex-col\">\n      <label class=\"tb-small\" style=\"padding-top: 12px; padding-bottom: 12px;\">Stop irrigation after the specified time</label>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Duration, min</mat-label>\n        <input required matInput formControlName=\"durationInMinutes\" type=\"number\" min=\"1\" step=\"1\">\n        <mat-error *ngIf=\"editSchedulerEventFormGroup.get('durationInMinutes').hasError('required')\">\n          Duration is required.\n        </mat-error>\n        <mat-error *ngIf=\"editSchedulerEventFormGroup.get('durationInMinutes').hasError('min')\">\n          Duration must be greater than 0.\n        </mat-error>\n      </mat-form-field>\n    </section>\n    <mat-slide-toggle formControlName=\"repeat\" style=\"padding-bottom: 48px;\">\n      Repeat\n    </mat-slide-toggle>\n    <section *ngIf=\"editSchedulerEventFormGroup.get('repeat').value\" class=\"flex flex-col\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label translate>scheduler.repeats</mat-label>\n        <mat-select matInput formControlName=\"repeatType\" required panelClass=\"sf-scheduler-event-form\">\n          <mat-option *ngFor=\"let repeatType of schedulerRepeatTypeValues\" [value]=\"repeatType\">\n            {{ schedulerRepeatTypes[repeatType] | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\" *ngIf=\"editSchedulerEventFormGroup.get('repeatType').value === 'EVERY_N_DAYS'\" style=\"padding-bottom: 16px;\">\n        <mat-label translate>scheduler.repeat-every-n-days</mat-label>\n        <input type=\"number\" min=\"1\" step=\"1\" matInput formControlName=\"days\" required>\n        <mat-error *ngIf=\"editSchedulerEventFormGroup.get('days').hasError('required')\">\n          {{ 'scheduler.repeat-days-required' | translate }}\n        </mat-error>\n        <mat-error *ngIf=\"editSchedulerEventFormGroup.get('days').hasError('min')\">\n          {{ 'scheduler.invalid-repeat-days-value' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\" *ngIf=\"editSchedulerEventFormGroup.get('repeatType').value === 'EVERY_N_WEEKS'\" style=\"padding-bottom: 16px;\">\n        <mat-label translate>scheduler.repeat-every-n-weeks</mat-label>\n        <input type=\"number\" min=\"1\" step=\"1\" matInput formControlName=\"weeks\" required>\n        <mat-error *ngIf=\"editSchedulerEventFormGroup.get('weeks').hasError('required')\">\n          {{ 'scheduler.repeat-weeks-required' | translate }}\n        </mat-error>\n        <mat-error *ngIf=\"editSchedulerEventFormGroup.get('days').hasError('min')\">\n          {{ 'scheduler.invalid-repeat-weeks-value' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <section *ngIf=\"editSchedulerEventFormGroup.get('repeatType').value === 'TIMER'\"\n               formGroupName=\"timerRepeat\"\n               class=\"flex flex-col\">\n        <label translate class=\"tb-small\" style=\"padding-bottom: 8px;\">scheduler.repeat-every</label>\n        <div class=\"flex flex-col gap-2 gt-sm:flex-row\">\n          <mat-form-field appearance=\"fill\" class=\"flex-full gt-sm:max-w-50%\">\n            <mat-label>Interval</mat-label>\n            <input type=\"number\" min=\"0\" stype=\"any\" matInput formControlName=\"repeatInterval\" required>\n            <mat-error *ngIf=\"editSchedulerEventFormGroup.get('timerRepeat.repeatInterval').hasError('required')\">\n              {{ 'scheduler.time-interval-required' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field appearance=\"fill\" class=\"flex-full gt-sm:max-w-50%\">\n            <mat-label>Time unit</mat-label>\n            <mat-select matInput formControlName=\"timeUnit\" required panelClass=\"sf-scheduler-event-form\">\n              <mat-option *ngFor=\"let timeUnit of schedulerTimeUnitValues\" [value]=\"timeUnit\">\n                {{ schedulerTimeUnits[timeUnit] | translate }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"editSchedulerEventFormGroup.get('timerRepeat.timeUnit').hasError('required')\">\n              {{ 'scheduler.time-unit-required' | translate }}\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </section>\n      <section *ngIf=\"editSchedulerEventFormGroup.get('repeatType').value === 'WEEKLY'\"\n               formArrayName=\"weeklyRepeat\"\n               class=\"flex flex-col\" style=\"padding-bottom: 16px;\">\n        <label translate class=\"tb-small\">scheduler.repeat-on</label>\n        <span style=\"height: 16px;\"></span>\n        <div class=\"flex flex-row gap-4\">\n          <ng-container *ngFor=\"let key of weeklyRepeatsKeys\">\n            <button type=\"button\"\n                    mat-button\n                    class=\"weekly-repeat\"\n                    [color]=\"weeklyRepeatControl(key).value ? 'primary' : ''\"\n                    [class]=\"{ 'mdc-button--outlined mat-mdc-outlined-button': !weeklyRepeatControl(key).value, 'mdc-button--raised mat-mdc-raised-button no-border': weeklyRepeatControl(key).value }\"\n                    (click)=\"toggleWeeklyRepeat(key)\"\n                    matTooltip=\"{{ weeklyRepeats[key].tooltip | translate }}\"\n                    matTooltipPosition=\"above\">\n              {{ weeklyRepeats[key].label | translate }}\n            </button>\n          </ng-container>\n        </div>\n      </section>\n      <section class=\"flex flex-row items-start justify-start\">\n        <mat-form-field appearance=\"fill\">\n          <mat-label>End date</mat-label>\n          <mat-datetimepicker-toggle [for]=\"endDatePicker\" matSuffix></mat-datetimepicker-toggle>\n          <mat-datetimepicker (opened)=\"datePickerOpened()\" #endDatePicker type=\"date\" openOnFocus=\"true\"></mat-datetimepicker>\n          <input required matInput formControlName=\"endsOnDate\" [matDatetimepicker]=\"endDatePicker\" [errorStateMatcher]=\"endsOnDateMatcher\">\n          <mat-error *ngIf=\"editSchedulerEventFormGroup.hasError('endsOnDateValidator')\">\n            Invalid date.\n          </mat-error>\n        </mat-form-field>\n      </section>\n    </section>\n  </div>\n  <div mat-dialog-actions class=\"flex flex-row items-center justify-end\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || addSchedulerEventForm.invalid || !addSchedulerEventForm.dirty\">\n      Save\n    </button>\n  </div>\n</form>\n",
                "customCss": ".sf-scheduler-event-form .mat-toolbar.mat-primary {\n    background: #fff;\n    color: rgba(0, 0, 0, 0.87);\n}\n\n.sf-scheduler-event-form .mat-mdc-button.mat-primary:not(:disabled), .sf-scheduler-event-form .mat-mdc-icon-button.mat-primary:not(:disabled), .sf-scheduler-event-form .mat-mdc-outlined-button.mat-primary:not(:disabled) {\n    color: #5553AF;\n}\n\n.sf-scheduler-event-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-scheduler-event-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-scheduler-event-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-scheduler-event-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    color: #fff;\n}\n\n.sf-scheduler-event-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-scheduler-event-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-scheduler-event-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-scheduler-event-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    background-color: #6F74F2;\n}\n\n.sf-scheduler-event-form .mat-mdc-button .mat-mdc-button-persistent-ripple::before, .sf-scheduler-event-form .mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before, .sf-scheduler-event-form .mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before, .sf-scheduler-event-form .mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before {\n    background-color: #6F74F2;\n}\n\n.sf-scheduler-event-form .mat-mdc-form-field .mdc-text-field--focused .mdc-floating-label {\n    color: #5553AF;\n}\n\n.sf-scheduler-event-form .mdc-text-field--filled .mdc-line-ripple::after {\n    border-bottom-color: #6F74F2;\n}\n\n.sf-scheduler-event-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__handle::after, \n.sf-scheduler-event-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::after, \n.sf-scheduler-event-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::before {\n    background-color: #6F74F2 !important;\n}\n\n.sf-scheduler-event-form .mat-mdc-slide-toggle.mat-accent .mdc-switch .mdc-switch__track::after {\n    background: rgba(111, 116, 242, 0.54) !important;\n}\n\n.sf-scheduler-event-form .mat-datetimepicker-calendar-header {\n    background-color: #6F74F2;\n}\n\n.sf-scheduler-event-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-selected {\n    background-color: #6F74F2;\n}\n\n.sf-scheduler-event-form .mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-selected {\n    background-color: #8689f4;\n}\n\n.sf-scheduler-event-form .mat-datetimepicker-clock-center, .sf-scheduler-event-form .mat-datetimepicker-clock-hand, .sf-scheduler-event-form .mat-datetimepicker-clock-hand:before {\n    background-color: #6F74F2;\n}\n\n.sf-scheduler-event-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-today:not(.mat-datetimepicker-calendar-body-selected) {\n    border-color: #6F74F2;\n}\n\n.sf-scheduler-event-form .mat-icon {\n    color: #868D9C;\n}\n\n.sf-scheduler-event-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #868D9C;\n    padding-bottom: 8px;\n}\n\n.sf-scheduler-event-form .mat-button-toggle-group-appearance-standard, .sf-scheduler-event-form .mat-button-toggle-standalone.mat-button-toggle-appearance-standard {\n    border: none;\n}\n\n.sf-scheduler-event-form .mat-button-toggle-group {\n    min-height: 32px;\n}\n\n.sf-scheduler-event-form .mat-button-toggle {\n    background: rgba(0, 0, 0, 0.06);\n    height: 32px;\n    align-items: center;\n    display: flex;\n}\n\n.sf-scheduler-event-form .mat-button-toggle-checked .mat-button-toggle-button {\n    background-color: #fff;\n    border-radius: 4px;\n    margin-left: 2px;\n    margin-right: 2px;\n}\n\n.sf-scheduler-event-form .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n    line-height: 28px;\n    font-size: 14px;\n}\n\n.sf-scheduler-event-form .mat-button-toggle-group-appearance-standard .mat-button-toggle+.mat-button-toggle {\n    border-left: none;\n}\n\n.sf-scheduler-event-form .mat-button-toggle-checked.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay {\n    opacity: .01;\n}\n\n.sf-scheduler-event-form .mat-mdc-button.weekly-repeat {\n    padding: 0 15px;\n    min-width: 0;\n}\n\n.sf-scheduler-event-form .mat-mdc-button.weekly-repeat.no-border {\n    border: 1px solid #6F74F2;\n}\n\n.sf-scheduler-event-form.mat-primary .mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text {\n    color: #5553AF;\n}\n\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet schedulerEventService = $injector.get(widgetContext.servicesMap.get('schedulerEventService'));\n\nopenEditSchedulerEventDialog();\n\nfunction openEditSchedulerEventDialog() {\n    customDialog.customDialog(htmlTemplate, EditSchedulerEventDialogController).subscribe();\n}\n\n\nfunction EditSchedulerEventDialogController(instance) {\n    let vm = instance;\n    \n    vm.entityName = entityName;\n    \n    vm.schedulerEvent = null;\n\n    var currentDate = new Date();\n    var startDate = new Date(\n      currentDate.getFullYear(),\n      currentDate.getMonth(),\n      currentDate.getDate());\n    var startTime = new Date(\n      currentDate.getFullYear(),\n      currentDate.getMonth(),\n      currentDate.getDate(),\n      0,0,0,0);\n\n    vm.schedulerRepeatTypes = {\n        'DAILY': 'scheduler.daily',\n        'EVERY_N_DAYS': 'scheduler.every-n-days',\n        'WEEKLY': 'scheduler.weekly',\n        'EVERY_N_WEEKS': 'scheduler.every-n-weeks',\n        'MONTHLY': 'scheduler.monthly',\n        'YEARLY': 'scheduler.yearly',\n        'TIMER': 'scheduler.timer'\n    };\n\n      \n    vm.schedulerRepeatTypeValues = Object.keys(vm.schedulerRepeatTypes);\n    \n    vm.schedulerTimeUnits = {\n        'HOURS': 'scheduler.hours',\n        'MINUTES': 'scheduler.minutes',\n        'SECONDS': 'scheduler.seconds'\n    };\n\n      \n    vm.schedulerTimeUnitValues = Object.keys(vm.schedulerTimeUnits);\n    \n    vm.weeklyRepeats = {\n      0: { label: 'scheduler.sunday-label', tooltip: 'scheduler.repeat-on-sunday' },  \n      1: { label: 'scheduler.monday-label', tooltip: 'scheduler.repeat-on-monday' },\n      2: { label: 'scheduler.tuesday-label', tooltip: 'scheduler.repeat-on-tuesday' },\n      3: { label: 'scheduler.wednesday-label', tooltip: 'scheduler.repeat-on-wednesday' },\n      4: { label: 'scheduler.thursday-label', tooltip: 'scheduler.repeat-on-thursday' },\n      5: { label: 'scheduler.friday-label', tooltip: 'scheduler.repeat-on-friday' },\n      6: { label: 'scheduler.saturday-label', tooltip: 'scheduler.repeat-on-saturday' },\n    };\n    \n    vm.weeklyRepeatsKeys = Object.keys(vm.weeklyRepeats);\n    \n    vm.weeklyRepeatControl  = function(index) {\n        return vm.editSchedulerEventFormGroup.get('weeklyRepeat').at(index);\n    }\n    \n    vm.toggleWeeklyRepeat = function(key) {\n        const control = vm.weeklyRepeatControl(key);\n        control.setValue(!control.value);\n        vm.editSchedulerEventFormGroup.get('weeklyRepeat').markAsDirty();\n    }\n    \n    vm.createDefaultWeeklyRepeat = function(startDate, weeklyRepeat) {\n        if (!weeklyRepeat) {\n          weeklyRepeat = [];\n          for (let i = 0; i < 7; i++) {\n            weeklyRepeat[i] = false;\n          }\n        }\n        if (typeof startDate !== 'undefined' && startDate !== null) {\n          const setCurrentDate = weeklyRepeat.filter(repeat => repeat).length === 0;\n          if (setCurrentDate) {\n            const day = moment(startDate).day();\n            weeklyRepeat[day] = true;\n          }\n        }\n        return weeklyRepeat;\n    }\n    \n    vm.endsOnDateValidator = function(startDate, endsOnDate) {\n        return (group) => {\n          if (group.controls[endsOnDate].status === 'VALID') {\n            if (group.controls[startDate].value.getTime() > group.controls[endsOnDate].value.getTime()) {\n              return { endsOnDateValidator: true };\n            }\n          }\n          return null;\n        };\n    };\n    \n    vm.endsOnDateMatcher = {\n        isErrorState: function(control) {\n            const invalidCtrl = control && !!(control.invalid);\n            const invalidParent = control && !!(control.parent &&\n            control.parent.invalid && control.parent.hasError('endsOnDateValidator'));\n            return (invalidCtrl || invalidParent);\n        }\n    };\n    \n    vm.datePickerOpened = function() {\n      $('.mat-datetimepicker-popup').addClass('sf-scheduler-event-form');\n    };\n\n\n    vm.editSchedulerEventFormGroup = vm.fb.group({\n      name: ['', [vm.validators.required]],\n      startDate: [startDate, [vm.validators.required]],\n      startTime: [startTime, [vm.validators.required]],\n      condition: ['consumption', []],\n      volumeInLitters: [1000, [vm.validators.required, vm.validators.min(1)]],\n      durationInMinutes: [30, [vm.validators.required, vm.validators.min(1)]],\n      repeat: [null, []],\n      repeatType: [null, [vm.validators.required]],\n      weeklyRepeat: vm.fb.array(vm.createDefaultWeeklyRepeat()),\n      endsOnDate: [null, [vm.validators.required]],\n      days: [null, [vm.validators.min(1), vm.validators.required]],\n      weeks: [null, [vm.validators.min(1), vm.validators.required]],\n      timerRepeat: vm.fb.group(\n        {\n          repeatInterval: [null, [vm.validators.required, vm.validators.min(0)]],\n          timeUnit: [null, [vm.validators.required]]\n        }\n      )\n    },\n    {\n        validator: vm.endsOnDateValidator('startDate', 'endsOnDate')\n    });\n    \n    vm.editSchedulerEventFormGroup.get('repeat').valueChanges.subscribe((repeat) => {\n      if (repeat) {\n        vm.editSchedulerEventFormGroup.get('repeatType').patchValue('DAILY', {emitEvent: false});\n        const startDate = vm.editSchedulerEventFormGroup.get('startDate').value;\n        const endsOnDate = new Date(\n          startDate.getFullYear(),\n          startDate.getMonth(),\n          startDate.getDate() + 5);\n        vm.editSchedulerEventFormGroup.get('endsOnDate').patchValue(endsOnDate, {emitEvent: false});\n      }\n      vm.updateEnabledState();\n    });\n    \n    vm.editSchedulerEventFormGroup.get('repeatType').valueChanges.subscribe((repeatType) => {\n      if (repeatType === 'WEEKLY') {\n          const startDate = vm.editSchedulerEventFormGroup.get('startDate').value;\n          vm.editSchedulerEventFormGroup.get('weeklyRepeat').patchValue(vm.createDefaultWeeklyRepeat(startDate), {emitEvent: false});\n      }\n      vm.updateEnabledState();\n    });\n    \n    vm.editSchedulerEventFormGroup.get('weeklyRepeat').valueChanges.subscribe((weeklyRepeat) => {\n      const startDate = vm.editSchedulerEventFormGroup.get('startDate').value;\n      vm.editSchedulerEventFormGroup.get('weeklyRepeat').patchValue(vm.createDefaultWeeklyRepeat(startDate, weeklyRepeat),\n        {emitEvent: false});\n    });\n    \n    vm.editSchedulerEventFormGroup.get('condition').valueChanges.subscribe(() => {\n      vm.updateEnabledState();\n    });\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    vm.updateEnabledState = function() {\n        vm.editSchedulerEventFormGroup.enable({emitEvent: false});\n        const repeat = vm.editSchedulerEventFormGroup.get('repeat').value;\n        const condition = vm.editSchedulerEventFormGroup.get('condition').value;\n        if (!repeat) {\n            vm.editSchedulerEventFormGroup.get('repeatType').disable({emitEvent: false});\n            vm.editSchedulerEventFormGroup.get('weeklyRepeat').disable({emitEvent: false});\n            vm.editSchedulerEventFormGroup.get('endsOnDate').disable({emitEvent: false});\n            vm.editSchedulerEventFormGroup.get('timerRepeat').disable({emitEvent: false});\n            vm.editSchedulerEventFormGroup.get('days').disable({emitEvent: false});\n            vm.editSchedulerEventFormGroup.get('weeks').disable({emitEvent: false});\n        } else {\n            const repeatType = vm.editSchedulerEventFormGroup.get('repeatType').value;\n            if (repeatType !== 'WEEKLY') {\n                vm.editSchedulerEventFormGroup.get('weeklyRepeat').disable({emitEvent: false});\n            }\n            if (repeatType !== 'TIMER') {\n                vm.editSchedulerEventFormGroup.get('timerRepeat').disable({emitEvent: false});\n            }\n            if (repeatType !== 'EVERY_N_DAYS') {\n                vm.editSchedulerEventFormGroup.get('days').disable({emitEvent: false});\n            }\n            if (repeatType !== 'EVERY_N_WEEKS') {\n                vm.editSchedulerEventFormGroup.get('weeks').disable({emitEvent: false});\n            }\n        }\n        if (condition === 'consumption') {\n            vm.editSchedulerEventFormGroup.get('durationInMinutes').disable({emitEvent: false});\n        } else {\n            vm.editSchedulerEventFormGroup.get('volumeInLitters').disable({emitEvent: false});\n        }\n        \n        vm.editSchedulerEventFormGroup.get('repeatType').updateValueAndValidity({emitEvent: false});\n        vm.editSchedulerEventFormGroup.get('weeklyRepeat').updateValueAndValidity({emitEvent: false});\n        vm.editSchedulerEventFormGroup.get('endsOnDate').updateValueAndValidity({emitEvent: false});\n        vm.editSchedulerEventFormGroup.get('timerRepeat').updateValueAndValidity({emitEvent: false});\n        vm.editSchedulerEventFormGroup.get('days').updateValueAndValidity({emitEvent: false});\n        vm.editSchedulerEventFormGroup.get('weeks').updateValueAndValidity({emitEvent: false});\n        vm.editSchedulerEventFormGroup.get('durationInMinutes').updateValueAndValidity({emitEvent: false});\n        vm.editSchedulerEventFormGroup.get('volumeInLitters').updateValueAndValidity({emitEvent: false});\n    };\n    \n    vm.save = function() {\n        vm.editSchedulerEventFormGroup.markAsPristine();\n        saveSchedulerEventObservable().subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n    \n    loadSchedulerEvent();\n\n    function saveSchedulerEventObservable() {\n        const formValues = vm.editSchedulerEventFormGroup.value;\n        vm.schedulerEvent.name = formValues.name;\n        vm.schedulerEvent.schedule = { timezone: moment.tz.guess() };\n        const startDateValue = formValues.startDate;\n        const startTimeValue = formValues.startTime;\n        const startTime = new Date(\n            startDateValue.getFullYear(),\n            startDateValue.getMonth(),\n            startDateValue.getDate(),\n            startTimeValue.getHours(),\n            startTimeValue.getMinutes(),\n            startTimeValue.getSeconds()\n        );\n        vm.schedulerEvent.schedule.startTime = startTime.getTime();\n        if (formValues.repeat) {\n            vm.schedulerEvent.schedule.repeat = {\n                type: formValues.repeatType,\n                endsOn: formValues.endsOnDate.getTime()\n            };\n            if (formValues.repeatType === 'WEEKLY') {\n                vm.schedulerEvent.schedule.repeat.repeatOn = [];\n                for (let i = 0; i < 7; i++) {\n                    if (formValues.weeklyRepeat[i]) {\n                        vm.schedulerEvent.schedule.repeat.repeatOn.push(i);\n                    }\n                }\n            } else if (formValues.repeatType === 'TIMER') {\n                vm.schedulerEvent.schedule.repeat.repeatInterval = formValues.timerRepeat.repeatInterval;\n                vm.schedulerEvent.schedule.repeat.timeUnit = formValues.timerRepeat.timeUnit;\n            } else if (formValues.repeatType === 'EVERY_N_DAYS') {\n                vm.schedulerEvent.schedule.repeat.days = formValues.days;\n            } else if (formValues.repeatType === 'EVERY_N_WEEKS') {\n                vm.schedulerEvent.schedule.repeat.weeks = formValues.weeks;\n            }\n        } else {\n            delete vm.schedulerEvent.repeat;\n        }\n        const condition = formValues.condition;\n        vm.schedulerEvent.configuration.msgBody = {};\n        if (condition === 'consumption') {\n            vm.schedulerEvent.configuration.msgBody.volumeInLitters = formValues.volumeInLitters;\n        } else {\n            vm.schedulerEvent.configuration.msgBody.durationInMinutes = formValues.durationInMinutes;\n        }\n        return schedulerEventService.saveSchedulerEvent(vm.schedulerEvent);\n    }\n    \n    function loadSchedulerEvent() {\n        schedulerEventService.getSchedulerEvent(entityId.id).subscribe(\n            function (schedulerEvent) {\n                vm.schedulerEvent = schedulerEvent;\n                vm.editSchedulerEventFormGroup.get('name').patchValue(vm.schedulerEvent.name, {emitEvent: false});\n                \n                var startDateValue = new Date(vm.schedulerEvent.schedule.startTime);\n                var startDate = new Date(\n                  startDateValue.getFullYear(),\n                  startDateValue.getMonth(),\n                  startDateValue.getDate());\n                var startTime = new Date(\n                  startDateValue.getFullYear(),\n                  startDateValue.getMonth(),\n                  startDateValue.getDate(),\n                  startDateValue.getHours(),\n                  startDateValue.getMinutes(),\n                  startDateValue.getSeconds()\n                  ,0);\n                vm.editSchedulerEventFormGroup.get('startDate').patchValue(startDate, {emitEvent: false});\n                vm.editSchedulerEventFormGroup.get('startTime').patchValue(startTime, {emitEvent: false});\n                if (typeof vm.schedulerEvent.configuration.msgBody.volumeInLitters !== 'undefined' && \n                    vm.schedulerEvent.configuration.msgBody.volumeInLitters !== null) {\n                    vm.editSchedulerEventFormGroup.get('condition').patchValue('consumption', {emitEvent: false});\n                    vm.editSchedulerEventFormGroup.get('volumeInLitters').patchValue(vm.schedulerEvent.configuration.msgBody.volumeInLitters, {emitEvent: false});\n                } else {\n                    vm.editSchedulerEventFormGroup.get('condition').patchValue('duration', {emitEvent: false});\n                    vm.editSchedulerEventFormGroup.get('durationInMinutes').patchValue(vm.schedulerEvent.configuration.msgBody.durationInMinutes, {emitEvent: false});\n                }\n                if (vm.schedulerEvent.schedule.repeat) {\n                    vm.editSchedulerEventFormGroup.get('repeat').patchValue(true, {emitEvent: false});\n                    vm.editSchedulerEventFormGroup.get('repeatType').patchValue(vm.schedulerEvent.schedule.repeat.type, {emitEvent: false});\n                    if (vm.schedulerEvent.schedule.repeat.type === 'WEEKLY' && vm.schedulerEvent.schedule.repeat.repeatOn) {\n                        const weeklyRepeat = vm.createDefaultWeeklyRepeat();\n                        vm.schedulerEvent.schedule.repeat.repeatOn.forEach((repeatOn) => {\n                            weeklyRepeat[repeatOn] = true;\n                        });\n                        vm.editSchedulerEventFormGroup.get('weeklyRepeat').patchValue(weeklyRepeat, {emitEvent: false});\n                    } else if (vm.schedulerEvent.schedule.repeat.type === 'TIMER') {\n                        vm.editSchedulerEventFormGroup.get('timerRepeat').patchValue({\n                            repeatInterval: vm.schedulerEvent.schedule.repeat.repeatInterval,\n                            timeUnit: vm.schedulerEvent.schedule.repeat.timeUnit\n                        }, {emitEvent: false});\n                    } else if (vm.schedulerEvent.schedule.repeat.type === 'EVERY_N_DAYS') {\n                        vm.editSchedulerEventFormGroup.get('days').patchValue(vm.schedulerEvent.schedule.repeat.days, {emitEvent: false});\n                    } else if (vm.schedulerEvent.schedule.repeat.type === 'EVERY_N_WEEKS') {\n                        vm.editSchedulerEventFormGroup.get('weeks').patchValue(vm.schedulerEvent.schedule.repeat.weeks, {emitEvent: false});\n                    }\n                    vm.editSchedulerEventFormGroup.get('endsOnDate').patchValue(new Date(vm.schedulerEvent.schedule.repeat.endsOn), {emitEvent: false});\n                } else {\n                    vm.editSchedulerEventFormGroup.get('repeat').patchValue(false, {emitEvent: false});\n                }\n                \n                vm.updateEnabledState();\n            }\n        );\n    }\n\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "2b9ed19c-fc5c-f3fa-c5e2-561e0ac941f4"
              },
              {
                "name": "Delete irrigation schedule",
                "icon": "delete",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "",
                "customCss": ".sf-scheduler-delete-dialog .mat-mdc-button.mat-primary:not(:disabled), .sf-scheduler-delete-dialog .mat-icon-button.mat-primary, .sf-scheduler-delete-dialog .mat-mdc-outlined-button.mat-primary:not(:disabled) {\n    color: #5553AF;\n}\n\n.sf-scheduler-delete-dialog .mat-mdc-fab.mat-primary:not(:disabled), .sf-scheduler-delete-dialog .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-scheduler-delete-dialog .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-scheduler-delete-dialog .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    color: #fff;\n}\n\n.sf-scheduler-delete-dialog .mat-mdc-fab.mat-primary:not(:disabled), .sf-scheduler-delete-dialog .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-scheduler-delete-dialog .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-scheduler-delete-dialog .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    background-color: #6F74F2;\n}\n\n.sf-scheduler-delete-dialog .mat-mdc-button .mat-mdc-button-persistent-ripple::before, .sf-scheduler-delete-dialog .mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before, .sf-scheduler-delete-dialog .mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before, .sf-scheduler-delete-dialog .mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before {\n    background-color: #6F74F2;\n}",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\n\nlet schedulerEventService = $injector.get(widgetContext.servicesMap.get('schedulerEventService'));\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n    let title = 'Delete irrigation schedule \\'' +\n                 entityName + '\\'';\n    let content = 'Are you sure you want to delete the irrigation schedule \\'' + entityName + '\\'?';\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        function(result) {\n            if (result) {\n                deleteEntity();\n            }\n        }\n    );\n    $('tb-confirm-dialog').addClass('sf-scheduler-delete-dialog');\n}\n\nfunction deleteEntity() {\n    deleteEntityObservable(entityId).subscribe(\n        function success() {\n            widgetContext.updateAliases();\n        },\n        function fail() {\n            showErrorDialog();\n        }\n    );\n}\n\nfunction deleteEntityObservable(entityId) {\n    return schedulerEventService.deleteSchedulerEvent(entityId.id);\n}\n\nfunction showErrorDialog() {\n    let title = 'Error';\n    let content = 'An error occurred while deleting the irrigation schedule. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe(\n        function(result) {}\n    );\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "d25bf90c-9b6f-d98f-a4f0-420772761047"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "a6b597ee-cb21-ee9f-dc98-8673f1d976f1",
        "typeFullFqn": "system.cards.entities_table"
      },
      "8ce15aad-9ab2-55ce-2628-a663814d27b1": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 6.5,
        "config": {
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1667907617961,
                "endTimeMs": 1667994017961
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "entitiesTitle": "Fields",
            "enableSearch": true,
            "enableSelectColumnDisplay": true,
            "enableStickyHeader": true,
            "enableStickyAction": true,
            "reserveSpaceForHiddenAction": "true",
            "displayEntityName": false,
            "displayEntityLabel": false,
            "displayEntityType": false,
            "displayPagination": true,
            "defaultPageSize": 10,
            "defaultSortOrder": "Name",
            "useRowStyleFunction": false
          },
          "title": "New Entities table",
          "dropShadow": false,
          "enableFullscreen": false,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400,
            "padding": "5px 10px 5px 10px"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "cd737d26-3068-aae0-d370-c93f8e7e1a00",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "name",
                  "type": "entityField",
                  "label": "Name",
                  "color": "#ffc107",
                  "settings": {
                    "columnWidth": "30%",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.7231686834210371,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "label",
                  "type": "entityField",
                  "label": "Label",
                  "color": "#2196f3",
                  "settings": {
                    "columnWidth": "30%",
                    "useCellStyleFunction": true,
                    "cellStyleFunction": "return {\n    fontWeight: 600\n};",
                    "useCellContentFunction": true,
                    "cellContentFunction": "return value ? '<span style=\"background: rgba(111, 116, 242, 0.08); border-radius: 16px; padding: 4px 8px; color: #5553AF;\">'+value+'</span>' : '';",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.7427597097428846,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "cropType",
                  "type": "attribute",
                  "label": "Crop type",
                  "color": "#4caf50",
                  "settings": {
                    "columnWidth": "20%",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.45735173845667054,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "avgMoisture",
                  "type": "timeseries",
                  "label": "Average moisture",
                  "color": "#f44336",
                  "settings": {
                    "columnWidth": "20%",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "if (value) {\n    var minMoistureThreshold = entity['minMoistureThreshold'];\n    var maxMoistureThreshold = entity['maxMoistureThreshold'];\n    var background = '111, 116, 242';\n    var textColor = '#5553AF';\n    if (value < minMoistureThreshold || value > maxMoistureThreshold) {\n        background = '209, 39, 48';\n        textColor = '#D12730';\n    }\n    var percent = value + '%';\n    var percentText = value.toFixed(0) + '%';\n    return '<div style=\"width: 100%; max-width: 100px; height: 16px; background: linear-gradient(to right, rgba('+background+', 0.16) '+percent+', rgba('+background+', 0.08) '+percent+'); border-radius: 5.21053px; line-height: normal;\"><span style=\"padding-left: 4px; font-weight: 600; font-size: 13px; color: '+textColor+';\">'+percentText+'</span></div>';\n} else {\n    return 'No data';\n}",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.017767185128356955,
                  "aggregationType": "NONE",
                  "units": "%",
                  "decimals": 0,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "minMoistureThreshold",
                  "type": "attribute",
                  "label": "minMoistureThreshold",
                  "color": "#8bc34a",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "defaultColumnVisibility": "hidden",
                    "columnSelectionToDisplay": "disabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.5565658823011432,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "maxMoistureThreshold",
                  "type": "attribute",
                  "label": "maxMoistureThreshold",
                  "color": "#3f51b5",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "defaultColumnVisibility": "hidden",
                    "columnSelectionToDisplay": "disabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.860782325530304,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "irrigationState",
                  "type": "timeseries",
                  "label": "Irrigation",
                  "color": "#8bc34a",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "var text = value === 'ON' ? 'On' : 'Off';\nvar color = value === 'ON' ? '#198038' : 'red';\nreturn '<div><span style=\"width: 4px; height: 4px; border-radius: 2px; background: '+color+'; display: inline-block; vertical-align: middle;\"></span><span style=\"padding-left: 8px;\">'+text+'</span></div>';",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.20197437452090683,
                  "aggregationType": "NONE",
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ]
            }
          ],
          "displayTimewindow": true,
          "actions": {
            "rowClick": [
              {
                "name": "Field details",
                "icon": "more_horiz",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "openDashboardState",
                "targetDashboardStateId": "field",
                "setEntityId": true,
                "stateEntityParamName": null,
                "openRightLayout": false,
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "9fac49b3-0e6b-9beb-56a7-6da9cec34984"
              }
            ],
            "headerButton": [
              {
                "name": "Create field",
                "icon": "add",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form #addFieldForm=\"ngForm\" [formGroup]=\"addFieldFormGroup\"\n      (ngSubmit)=\"submit()\" class=\"sf-field-form\">\n  <mat-toolbar class=\"flex flex-row\" color=\"primary\">\n    <h2>{{ step === 1 ? 'Add field' : 'Setup field polygon' }}</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content class=\"flex flex-col\">\n    <section *ngIf=\"step === 1\" class=\"flex flex-col\">\n      <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n        <mat-form-field class=\"mat-block flex-1\">\n          <mat-label>Field Name</mat-label>\n          <input matInput formControlName=\"name\" required>\n          <mat-error *ngIf=\"addFieldFormGroup.get('name').hasError('required')\">\n            Field name is required.\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"mat-block flex-1\">\n          <mat-label>Label</mat-label>\n          <input matInput formControlName=\"label\">\n        </mat-form-field>\n      </div>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Crop type</mat-label>\n        <mat-select matInput formControlName=\"cropType\" required panelClass=\"sf-field-form\">\n          <mat-option *ngFor=\"let cropType of cropTypes\" [value]=\"cropType\">\n            {{ cropType }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"addFieldFormGroup.get('cropType').hasError('required')\">\n          Crop type is required.\n        </mat-error>\n      </mat-form-field>\n      <span class=\"title-modal\" style=\"padding-left: 8px;\">Moisture thresholds</span>\n      <div class=\"flex flex-col\">\n        <div class=\"flex flex-row items-center justify-between\" style=\"padding: 0 8px;\">\n          <label class=\"tb-small\">Min</label>\n          <label class=\"tb-small threshold-value\">{{ addFieldFormGroup.get('minMoistureThreshold').value }}%</label>\n        </div>\n        <mat-slider\n            color=\"primary\"\n            discrete\n            [displayWith]=\"formatMoistureThreshold\"\n            tickInterval=\"auto\"\n            step=\"1\"\n            min=\"0\"\n            max=\"100\"\n            aria-label=\"Minimum moisture threshold\"><input matSliderThumb formControlName=\"minMoistureThreshold\"/>\n        </mat-slider>\n      </div>\n      <div class=\"flex flex-col\">\n        <div class=\"flex flex-row items-center justify-between\" style=\"padding: 0 8px;\">\n          <label class=\"tb-small\">Max</label>\n          <label class=\"tb-small threshold-value\">{{ addFieldFormGroup.get('maxMoistureThreshold').value }}%</label>\n        </div>\n        <mat-slider\n            color=\"primary\"\n            discrete\n            [displayWith]=\"formatMoistureThreshold\"\n            tickInterval=\"auto\"\n            step=\"1\"\n            min=\"0\"\n            max=\"100\"\n            aria-label=\"Maximum moisture threshold\"><input matSliderThumb formControlName=\"maxMoistureThreshold\"/>\n        </mat-slider>\n      </div>\n    </section>\n    <section *ngIf=\"step === 2\" class=\"flex flex-col\">\n      <tb-dashboard-state\n          style=\"height: 600px; width: 100%;\"\n          [ctx]=\"widgetContext\"\n          stateId=\"setup_field_polygon\"\n          [entityId]=\"field.id\">\n      </tb-dashboard-state>\n    </section>\n  </div>\n  <div mat-dialog-actions class=\"flex flex-row items-center justify-end\">\n    <button *ngIf=\"step === 1\" mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button *ngIf=\"step === 1\" mat-button mat-raised-button color=\"primary\"\n            type=\"button\"\n            (click)=\"next()\"\n            [disabled]=\"(isLoading$ | async) || addFieldFormGroup.invalid\">\n      Next\n    </button>\n    <button *ngIf=\"step === 2\" mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"back()\" cdkFocusInitial>\n      Back\n    </button>\n    <button *ngIf=\"step === 2\" mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || addFieldFormGroup.invalid || !hasPolygon\">\n      Create\n    </button>\n  </div>\n</form>\n",
                "customCss": ".sf-field-form {\n    width: 800px;\n}\n\n.sf-field-form .mat-toolbar.mat-primary {\n    background: #fff;\n    color: rgba(0, 0, 0, 0.87);\n}\n\n.sf-field-form .mat-mdc-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-icon-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-outlined-button.mat-primary:not(:disabled) {\n    color: #5553AF;\n}\n\n.sf-field-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    color: #fff;\n}\n\n.sf-field-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-button .mat-mdc-button-persistent-ripple::before, .sf-field-form .mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before, .sf-field-form .mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before, .sf-field-form .mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-form-field .mdc-text-field--focused .mdc-floating-label {\n    color: #5553AF;\n}\n\n.sf-field-form .mdc-text-field--filled .mdc-line-ripple::after {\n    border-bottom-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__handle::after, \n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::after, \n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::before {\n    background-color: #6F74F2 !important;\n}\n\n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch .mdc-switch__track::after {\n    background: rgba(111, 116, 242, 0.54) !important;\n}\n\n.sf-field-form .mat-datetimepicker-calendar-header {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-selected {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-selected {\n    background-color: #8689f4;\n}\n\n.sf-field-form .mat-datetimepicker-clock-center, .sf-field-form .mat-datetimepicker-clock-hand, .sf-field-form .mat-datetimepicker-clock-hand:before {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-today:not(.mat-datetimepicker-calendar-body-selected) {\n    border-color: #6F74F2;\n}\n\n.sf-field-form .mat-icon {\n    color: #868D9C;\n}\n\n.sf-field-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #868D9C;\n    padding-bottom: 8px;\n}\n\n.sf-field-form .mat-button-toggle-group-appearance-standard, .sf-field-form .mat-button-toggle-standalone.mat-button-toggle-appearance-standard {\n    border: none;\n}\n\n.sf-field-form .mat-button-toggle {\n    background: rgba(0, 0, 0, 0.06);\n    height: 32px;\n    align-items: center;\n    display: flex;\n}\n\n.sf-field-form .mat-button-toggle-checked .mat-button-toggle-button {\n    background-color: #fff;\n    border-radius: 4px;\n    margin-left: 2px;\n    margin-right: 2px;\n}\n\n.sf-field-form .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n    line-height: 28px;\n    font-size: 14px;\n}\n\n.sf-field-form .mat-button-toggle-group-appearance-standard .mat-button-toggle+.mat-button-toggle {\n    border-left: none;\n}\n\n.sf-field-form .mat-button-toggle-checked.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay {\n    opacity: .01;\n}\n\n.sf-field-form .mat-mdc-button.weekly-repeat {\n    padding: 0 15px;\n    min-width: 0;\n}\n\n.sf-field-form .mat-mdc-button.weekly-repeat.no-border {\n    border: 1px solid #6F74F2;\n}\n\n.sf-field-form.mat-primary .mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text {\n    color: #5553AF;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob,\n.sf-field-form .mat-mdc-slider .mdc-slider__value-indicator,\n.sf-field-form .mat-mdc-slider .mdc-slider__track--inactive {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__value-indicator::before {\n    border-top-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__value-indicator {\n    opacity: 1;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__track--active_fill,\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob {\n    border-color: #6F74F2;\n}\n\n.sf-field-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #868D9C;\n    padding-bottom: 8px;\n}\n\n.sf-field-form .threshold-value {\n    color: #fff;\n    font-weight: 500;\n    background: #6F74F2;\n    border-radius: 16px;\n    width: 32px;\n    height: 32px;\n    line-height: 32px;\n    text-align: center;\n}\n\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenAddFieldDialog();\n\nfunction openAddFieldDialog() {\n    customDialog.customDialog(htmlTemplate, AddFieldDialogController).subscribe();\n}\n\nfunction AddFieldDialogController(instance) {\n    let vm = instance;\n    \n    vm.cropTypes = ['rice', 'corn', 'wheat', \n    'sugarcane', 'maize (corn)', 'soybean oil', 'palm oil', 'potatoes',\n    'cassava', 'legume pulses', 'sunflower seed oil', 'rape and mustard oil',\n    'other vegetables', 'other fruits', 'sorghum', 'millet', 'groundnuts', 'beans',\n    'sweet potatoes', 'bananas', 'various nuts', 'soybeans', 'cottonseed oil',\n    'groundnut oil', 'yams'];\n    \n    vm.widgetContext = widgetContext;\n    vm.step = 1;\n    vm.field = null;\n    \n    vm.hasPolygon = false;\n    vm.polygonSubscription = null;\n\n\n    vm.addFieldFormGroup = vm.fb.group({\n      name: ['', [vm.validators.required]],\n      label: [null],\n      cropType: ['wheat', [vm.validators.required]],\n      minMoistureThreshold: [25, [vm.validators.required, vm.validators.min(0), vm.validators.max(100)]],\n      maxMoistureThreshold: [75, [vm.validators.required, vm.validators.min(0), vm.validators.max(100)]]\n    });\n\n    vm.cancel = function() {\n        cancelPolygonSubscription();\n        deleteEntityObservable().subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n    vm.next = function() {\n        vm.addFieldFormGroup.markAsPristine();\n        saveEntityObservable().subscribe(\n            function (entity) {\n                vm.field = entity;\n                widgetContext.rxjs.forkJoin([\n                    saveAttributes(entity.id),\n                ]).subscribe(\n                    function () {\n                        createPolygonSubscription().subscribe(\n                            function() {\n                                vm.step = 2;\n                            }\n                        );\n                    }\n                );\n            }\n        );\n    };\n    \n    vm.back = function() {\n        cancelPolygonSubscription();\n        vm.step = 1;\n    }\n    \n    vm.submit = function() {\n        cancelPolygonSubscription();\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n    }\n    \n    vm.formatMoistureThreshold = function(value) {\n        return value + '%';\n    }\n    \n    function createPolygonSubscription() {\n        var subscriptionInfo = {\n            type: 'entity',\n            entityType: vm.field.id.entityType,\n            entityId: vm.field.id.id,\n            attributes: [{ name: 'perimeter' }]\n        };\n        var options = {\n            callbacks: {\n                onDataUpdated: function(subscription) {\n                    checkHasPolygon(subscription.data);\n                }\n            }\n        };\n        return widgetContext.subscriptionApi.createSubscriptionFromInfo(\n                            'latest', [ subscriptionInfo ], options, false, true).pipe(\n            widgetContext.rxjs.tap(function(polygonSubscription) {\n                vm.polygonSubscription = polygonSubscription;\n            })\n        );\n        \n    }\n    \n    function checkHasPolygon(data) {\n        var datasourceData = data[0].data;\n        var keyData = datasourceData[0];\n        var value = keyData[1];\n        if (value && Array.isArray(JSON.parse(value))) {\n            vm.hasPolygon = true;\n        } else {\n            vm.hasPolygon = false;\n        }\n    }\n    \n    function cancelPolygonSubscription() {\n        if (vm.polygonSubscription) {\n            widgetContext.subscriptionApi.removeSubscription(vm.polygonSubscription.id);\n            vm.polygonSubscription = null;\n        }\n    }\n\n    function saveEntityObservable() {\n        return getOrCreateSmartIrrigationAssetGroup().pipe(\n          widgetContext.rxjs.switchMap((smartIrrigation) => {\n            const formValues = vm.addFieldFormGroup.value;\n            let field = {\n                name: formValues.name,\n                type: 'SI Field',\n                label: formValues.label\n            };\n            if (vm.field) {\n                field.id = vm.field.id;\n            }\n            return assetService.saveAsset(field, smartIrrigation.id.id);\n          })\n        );\n    }\n    \n    function deleteEntityObservable() {\n        if (vm.field) {\n            return assetService.deleteAsset(vm.field.id.id);\n        } else {\n            return widgetContext.rxjs.of(null);\n        }\n    }\n\n    function saveAttributes(entityId) {\n        let cropType = vm.addFieldFormGroup.get('cropType').value;\n        let minMoistureThreshold = vm.addFieldFormGroup.get('minMoistureThreshold').value;\n        let maxMoistureThreshold = vm.addFieldFormGroup.get('maxMoistureThreshold').value;\n        let attributesArray = [\n            {key: 'cropType', value: cropType},\n            {key: 'minMoistureThreshold', value: minMoistureThreshold},\n            {key: 'maxMoistureThreshold', value: maxMoistureThreshold}\n        ];\n        return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n    }\n    \n    function getOrCreateSmartIrrigationAssetGroup() {\n      return getEntityGroupByName(\"Smart Irrigation\", \"ASSET\").pipe(\n          widgetContext.rxjs.switchMap((group) => {\n              if (group) {\n                  return widgetContext.rxjs.of(group);\n              } else {\n                  var smartIrrigation = {\n                    type: 'ASSET',\n                    name: 'Smart Irrigation'\n                  };\n                  return entityGroupService.saveEntityGroup(smartIrrigation);\n              }\n          })\n      );\n    }\n    \n    function getEntityGroupByName(groupName, groupType) {\n      var entityGroupsPageLink = widgetContext.pageLink(10, 0, groupName);\n      return entityGroupService.getEntityGroupsByPageLink(entityGroupsPageLink, groupType, {ignoreLoading: true}).pipe(\n          widgetContext.rxjs.map((data) => {\n            if (data.data.length) {\n                return data.data.find((group) => group.name === groupName);\n            } else {\n                return null;\n            }\n          })\n      );\n    }\n\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "5b9d0130-b8ab-4103-0223-90a4530d425f"
              }
            ],
            "actionCellButton": [
              {
                "name": "Edit field",
                "icon": "edit",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form #addFieldForm=\"ngForm\" [formGroup]=\"editFieldFormGroup\"\n      (ngSubmit)=\"save()\" class=\"sf-field-form\">\n  <mat-toolbar class=\"flex flex-row\" color=\"primary\">\n    <h2>Edit field '{{ entityName }}'</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content class=\"flex flex-col\">\n    <section class=\"flex flex-col\">\n      <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n        <mat-form-field class=\"mat-block flex-1\">\n          <mat-label>Field Name</mat-label>\n          <input matInput formControlName=\"name\" required>\n          <mat-error *ngIf=\"editFieldFormGroup.get('name').hasError('required')\">\n            Field name is required.\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"mat-block flex-1\">\n          <mat-label>Label</mat-label>\n          <input matInput formControlName=\"label\">\n        </mat-form-field>\n      </div>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Crop type</mat-label>\n        <mat-select matInput formControlName=\"cropType\" required panelClass=\"sf-field-form\">\n          <mat-option *ngFor=\"let cropType of cropTypes\" [value]=\"cropType\">\n            {{ cropType }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"editFieldFormGroup.get('cropType').hasError('required')\">\n          Crop type is required.\n        </mat-error>\n      </mat-form-field>\n      <span class=\"title-modal\" style=\"padding-left: 8px;\">Moisture thresholds</span>\n      <div class=\"flex flex-col\">\n        <div class=\"flex flex-row items-center justify-between\" style=\"padding: 0 8px;\">\n          <label class=\"tb-small\">Min</label>\n          <label class=\"tb-small threshold-value\">{{ editFieldFormGroup.get('minMoistureThreshold').value }}%</label>\n        </div>\n        <mat-slider\n            color=\"primary\"\n            discrete\n            [displayWith]=\"formatMoistureThreshold\"\n            tickInterval=\"auto\"\n            step=\"1\"\n            min=\"0\"\n            max=\"100\"\n            aria-label=\"Minimum moisture threshold\"><input matSliderThumb formControlName=\"minMoistureThreshold\"/>\n        </mat-slider>\n      </div>\n      <div class=\"flex flex-col\">\n        <div class=\"flex flex-row items-center justify-between\" style=\"padding: 0 8px;\">\n          <label class=\"tb-small\">Max</label>\n          <label class=\"tb-small threshold-value\">{{ editFieldFormGroup.get('maxMoistureThreshold').value }}%</label>\n        </div>\n        <mat-slider\n            color=\"primary\"\n            discrete\n            [displayWith]=\"formatMoistureThreshold\"\n            tickInterval=\"auto\"\n            step=\"1\"\n            min=\"0\"\n            max=\"100\"\n            aria-label=\"Maximum moisture threshold\"><input matSliderThumb formControlName=\"maxMoistureThreshold\"/>\n        </mat-slider>\n      </div>\n    </section>\n    <section class=\"flex flex-col\">\n      <tb-dashboard-state\n          style=\"height: 600px; width: 100%;\"\n          [ctx]=\"widgetContext\"\n          stateId=\"setup_field_polygon\"\n          [entityId]=\"entityId\">\n      </tb-dashboard-state>\n    </section>\n  </div>\n  <div mat-dialog-actions class=\"flex flex-row items-center justify-end\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || editFieldFormGroup.invalid || !(editFieldFormGroup.dirty || polygonChanged) || !hasPolygon\">\n      Save\n    </button>\n  </div>\n</form>\n",
                "customCss": ".sf-field-form {\n    width: 800px;\n}\n\n.sf-field-form .mat-toolbar.mat-primary {\n    background: #fff;\n    color: rgba(0, 0, 0, 0.87);\n}\n\n.sf-field-form .mat-mdc-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-icon-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-outlined-button.mat-primary:not(:disabled) {\n    color: #5553AF;\n}\n\n.sf-field-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    color: #fff;\n}\n\n.sf-field-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-button .mat-mdc-button-persistent-ripple::before, .sf-field-form .mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before, .sf-field-form .mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before, .sf-field-form .mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-form-field .mdc-text-field--focused .mdc-floating-label {\n    color: #5553AF;\n}\n\n.sf-field-form .mdc-text-field--filled .mdc-line-ripple::after {\n    border-bottom-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__handle::after, \n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::after, \n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::before {\n    background-color: #6F74F2 !important;\n}\n\n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch .mdc-switch__track::after {\n    background: rgba(111, 116, 242, 0.54) !important;\n}\n\n.sf-field-form .mat-datetimepicker-calendar-header {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-selected {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-selected {\n    background-color: #8689f4;\n}\n\n.sf-field-form .mat-datetimepicker-clock-center, .sf-field-form .mat-datetimepicker-clock-hand, .sf-field-form .mat-datetimepicker-clock-hand:before {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-today:not(.mat-datetimepicker-calendar-body-selected) {\n    border-color: #6F74F2;\n}\n\n.sf-field-form .mat-icon {\n    color: #868D9C;\n}\n\n.sf-field-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #868D9C;\n    padding-bottom: 8px;\n}\n\n.sf-field-form .mat-button-toggle-group-appearance-standard, .sf-field-form .mat-button-toggle-standalone.mat-button-toggle-appearance-standard {\n    border: none;\n}\n\n.sf-field-form .mat-button-toggle {\n    background: rgba(0, 0, 0, 0.06);\n    height: 32px;\n    align-items: center;\n    display: flex;\n}\n\n.sf-field-form .mat-button-toggle-checked .mat-button-toggle-button {\n    background-color: #fff;\n    border-radius: 4px;\n    margin-left: 2px;\n    margin-right: 2px;\n}\n\n.sf-field-form .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n    line-height: 28px;\n    font-size: 14px;\n}\n\n.sf-field-form .mat-button-toggle-group-appearance-standard .mat-button-toggle+.mat-button-toggle {\n    border-left: none;\n}\n\n.sf-field-form .mat-button-toggle-checked.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay {\n    opacity: .01;\n}\n\n.sf-field-form .mat-mdc-button.weekly-repeat {\n    padding: 0 15px;\n    min-width: 0;\n}\n\n.sf-field-form .mat-mdc-button.weekly-repeat.no-border {\n    border: 1px solid #6F74F2;\n}\n\n.sf-field-form.mat-primary .mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text {\n    color: #5553AF;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob,\n.sf-field-form .mat-mdc-slider .mdc-slider__value-indicator,\n.sf-field-form .mat-mdc-slider .mdc-slider__track--inactive {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__value-indicator::before {\n    border-top-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__value-indicator {\n    opacity: 1;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__track--active_fill,\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob {\n    border-color: #6F74F2;\n}\n\n.sf-field-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #868D9C;\n    padding-bottom: 8px;\n}\n\n.sf-field-form .threshold-value {\n    color: #fff;\n    font-weight: 500;\n    background: #6F74F2;\n    border-radius: 16px;\n    width: 32px;\n    height: 32px;\n    line-height: 32px;\n    text-align: center;\n}\n\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenEditFieldDialog();\n\nfunction openEditFieldDialog() {\n    customDialog.customDialog(htmlTemplate, EditFieldDialogController).subscribe();\n}\n\nfunction EditFieldDialogController(instance) {\n    let vm = instance;\n    \n    vm.entityName = entityName;\n    vm.entityId = entityId;\n    \n    vm.cropTypes = ['rice', 'corn', 'wheat', \n    'sugarcane', 'maize (corn)', 'soybean oil', 'palm oil', 'potatoes',\n    'cassava', 'legume pulses', 'sunflower seed oil', 'rape and mustard oil',\n    'other vegetables', 'other fruits', 'sorghum', 'millet', 'groundnuts', 'beans',\n    'sweet potatoes', 'bananas', 'various nuts', 'soybeans', 'cottonseed oil',\n    'groundnut oil', 'yams'];\n    \n    vm.widgetContext = widgetContext;\n    vm.field = null;\n    \n    vm.perimeter = null;\n    vm.hasPolygon = false;\n    vm.polygonChanged = false;\n    vm.polygonSubscription = null;\n\n\n    vm.editFieldFormGroup = vm.fb.group({\n      name: ['', [vm.validators.required]],\n      label: [null],\n      cropType: [null, [vm.validators.required]],\n      minMoistureThreshold: [null, [vm.validators.required, vm.validators.min(0), vm.validators.max(100)]],\n      maxMoistureThreshold: [null, [vm.validators.required, vm.validators.min(0), vm.validators.max(100)]]\n    });\n\n    vm.cancel = function() {\n        cancelPolygonSubscription();\n        restorePolygon().subscribe(\n            function () {\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n    vm.save = function() {\n        vm.editFieldFormGroup.markAsPristine();\n        widgetContext.rxjs.forkJoin([\n            saveAttributes(entityId),\n            saveField()\n        ]).subscribe(\n            function () {\n                cancelPolygonSubscription();\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n    \n    vm.formatMoistureThreshold = function(value) {\n        return value + '%';\n    }\n    \n    loadField();\n    \n    function createPolygonSubscription() {\n        var subscriptionInfo = {\n            type: 'entity',\n            entityType: vm.field.id.entityType,\n            entityId: vm.field.id.id,\n            attributes: [{ name: 'perimeter' }]\n        };\n        var options = {\n            callbacks: {\n                onDataUpdated: function(subscription) {\n                    checkPolygon(subscription.data);\n                }\n            }\n        };\n        return widgetContext.subscriptionApi.createSubscriptionFromInfo(\n                            'latest', [ subscriptionInfo ], options, false, true).pipe(\n            widgetContext.rxjs.tap(function(polygonSubscription) {\n                vm.polygonSubscription = polygonSubscription;\n            })\n        );\n        \n    }\n    \n    function checkPolygon(data) {\n        var datasourceData = data[0].data;\n        var keyData = datasourceData[0];\n        var value = keyData[1];\n        if (value && Array.isArray(JSON.parse(value))) {\n            vm.hasPolygon = true;\n        } else {\n            vm.hasPolygon = false;\n        }\n        vm.polygonChanged = vm.perimeter !== value;\n    }\n    \n    function cancelPolygonSubscription() {\n        if (vm.polygonSubscription) {\n            widgetContext.subscriptionApi.removeSubscription(vm.polygonSubscription.id);\n            vm.polygonSubscription = null;\n        }\n    }\n\n    function saveField() {\n        const formValues = vm.editFieldFormGroup.value;\n        vm.field.name = formValues.name;\n        vm.field.label = formValues.label;\n        return assetService.saveAsset(vm.field);\n    }\n\n    function saveAttributes(entityId) {\n        let cropType = vm.editFieldFormGroup.get('cropType').value;\n        let minMoistureThreshold = vm.editFieldFormGroup.get('minMoistureThreshold').value;\n        let maxMoistureThreshold = vm.editFieldFormGroup.get('maxMoistureThreshold').value;\n        let attributesArray = [\n            {key: 'cropType', value: cropType},\n            {key: 'minMoistureThreshold', value: minMoistureThreshold},\n            {key: 'maxMoistureThreshold', value: maxMoistureThreshold}\n        ];\n        return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n    }\n    \n    function restorePolygon() {\n        if (vm.polygonChanged) {\n            return attributeService.saveEntityAttributes(vm.field.id, \"SERVER_SCOPE\", [{key: 'perimeter', value: JSON.parse(vm.perimeter)}]);\n        } else {\n            return widgetContext.rxjs.of(null);\n        }\n    }\n    \n    function loadField() {\n        widgetContext.rxjs.forkJoin([\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', ['cropType', 'minMoistureThreshold', 'maxMoistureThreshold', 'perimeter']),\n            assetService.getAsset(entityId.id)\n        ]).subscribe(\n            function (data) {\n                var attributes = data[0];\n                for (var i = 0; i < attributes.length; i ++) {\n                    if (attributes[i].key === 'cropType') {\n                        var cropType = attributes[i].value;\n                        vm.editFieldFormGroup.get('cropType').patchValue(cropType, {emitEvent: false});\n                    } else if (attributes[i].key === 'minMoistureThreshold') {\n                        var minMoistureThreshold = attributes[i].value;\n                        vm.editFieldFormGroup.get('minMoistureThreshold').patchValue(minMoistureThreshold, {emitEvent: false});\n                    } else if (attributes[i].key === 'maxMoistureThreshold') {\n                        var maxMoistureThreshold = attributes[i].value;\n                        vm.editFieldFormGroup.get('maxMoistureThreshold').patchValue(maxMoistureThreshold, {emitEvent: false});\n                    } else if (attributes[i].key === 'perimeter') {\n                        vm.perimeter = JSON.stringify(attributes[i].value);\n                    }\n                }\n                vm.field = data[1];\n                vm.editFieldFormGroup.get('name').patchValue(vm.field.name, {emitEvent: false});\n                vm.editFieldFormGroup.get('label').patchValue(vm.field.label, {emitEvent: false});\n                createPolygonSubscription();\n            }\n        );\n    }\n\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "440ca790-1b01-c774-c4f9-065a2aaa2dce"
              },
              {
                "name": "Delete field",
                "icon": "delete",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "",
                "customCss": ".sf-field-delete-dialog .mat-mdc-button.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-icon-button.mat-primary, .sf-field-delete-dialog .mat-mdc-outlined-button.mat-primary:not(:disabled) {\n    color: #5553AF;\n}\n\n.sf-field-delete-dialog .mat-mdc-fab.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    color: #fff;\n}\n\n.sf-field-delete-dialog .mat-mdc-fab.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    background-color: #6F74F2;\n}\n\n.sf-field-delete-dialog .mat-mdc-button .mat-mdc-button-persistent-ripple::before, .sf-field-delete-dialog .mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before, .sf-field-delete-dialog .mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before, .sf-field-delete-dialog .mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before {\n    background-color: #6F74F2;\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\n\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n    let title = 'Delete field \\'' +\n                 entityName + '\\'';\n    let content = 'Are you sure you want to delete the field \\'' + entityName + '\\'?';\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        function(result) {\n            if (result) {\n                deleteEntity();\n            }\n        }\n    );\n    $('tb-confirm-dialog').addClass('sf-field-delete-dialog');\n}\n\nfunction deleteEntity() {\n    deleteEntityObservable(entityId).subscribe(\n        function success() {\n            widgetContext.updateAliases();\n        },\n        function fail() {\n            showErrorDialog();\n        }\n    );\n}\n\nfunction deleteEntityObservable(entityId) {\n    return assetService.deleteAsset(entityId.id);\n}\n\nfunction showErrorDialog() {\n    let title = 'Error';\n    let content = 'An error occurred while deleting the field. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe(\n        function(result) {}\n    );\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "76de68f0-6177-7d13-0fb7-5af0f56b25dc"
              }
            ]
          },
          "showTitleIcon": false,
          "titleTooltip": "",
          "enableDataExport": false,
          "widgetStyle": {},
          "widgetCss": "mat-row {\n    cursor: pointer;\n}",
          "pageSize": 1024,
          "noDataDisplayMessage": ""
        },
        "row": 0,
        "col": 0,
        "id": "8ce15aad-9ab2-55ce-2628-a663814d27b1",
        "typeFullFqn": "system.cards.entities_table"
      },
      "8fcd3aed-58d0-0cad-cf63-3a08e1be40a9": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 6.5,
        "config": {
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1667907617961,
                "endTimeMs": 1667994017961
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "entitiesTitle": "Sensors",
            "enableSearch": true,
            "enableSelectColumnDisplay": false,
            "enableStickyHeader": true,
            "enableStickyAction": true,
            "reserveSpaceForHiddenAction": "true",
            "displayEntityName": false,
            "displayEntityLabel": false,
            "displayEntityType": false,
            "displayPagination": false,
            "defaultSortOrder": "name",
            "useRowStyleFunction": false
          },
          "title": "New Entities table",
          "dropShadow": false,
          "enableFullscreen": false,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400,
            "padding": "5px 10px 5px 10px"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "aa55618a-278a-0776-832d-fa1fe5769a2a",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "name",
                  "type": "entityField",
                  "label": "Name",
                  "color": "#2196f3",
                  "settings": {
                    "columnWidth": "70px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.964011137179303,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "label",
                  "type": "entityField",
                  "label": "Label",
                  "color": "#9c27b0",
                  "settings": {
                    "columnWidth": "60px",
                    "useCellStyleFunction": true,
                    "cellStyleFunction": "return {\n    fontWeight: 600\n};\n",
                    "useCellContentFunction": true,
                    "cellContentFunction": "return value ? '<span style=\"background: rgba(111, 116, 242, 0.08); border-radius: 16px; padding: 4px 8px; color: #5553AF; white-space: nowrap;\">'+value+'</span>' : '';",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.5996920850265313,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "moisture",
                  "type": "timeseries",
                  "label": "moisture",
                  "color": "#4caf50",
                  "settings": {
                    "columnWidth": "50px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "if (value) {\n    var minMoistureThreshold = entity['minMoistureThreshold'];\n    var maxMoistureThreshold = entity['maxMoistureThreshold'];\n    var background = '111, 116, 242';\n    var textColor = '#5553AF';\n    if (value < minMoistureThreshold || value > maxMoistureThreshold) {\n        background = '209, 39, 48';\n        textColor = '#D12730';\n    }\n    var percent = value + '%';\n    var percentText = value.toFixed(0) + '%';\n    return '<div style=\"width: 100%; max-width: 100px; height: 16px; background: linear-gradient(to right, rgba('+background+', 0.16) '+percent+', rgba('+background+', 0.08) '+percent+'); border-radius: 5.21053px; line-height: normal;\"><span style=\"padding-left: 4px; font-weight: 600; font-size: 13px; color: '+textColor+';\">'+percentText+'</span></div>';\n} else {\n    return 'No data';\n}",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.9864372687388072,
                  "aggregationType": "NONE",
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "active",
                  "type": "attribute",
                  "label": "active",
                  "color": "#f44336",
                  "settings": {
                    "columnWidth": "40px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "var text = value === 'true' ? 'On' : 'Off';\nvar color = value === 'true' ? '#198038' : 'red';\nreturn '<div><span style=\"width: 4px; height: 4px; border-radius: 2px; background: '+color+'; display: inline-block; vertical-align: middle;\"></span><span style=\"padding-left: 8px;\">'+text+'</span></div>';",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.49788361286301885,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "minMoistureThreshold",
                  "type": "attribute",
                  "label": "minMoistureThreshold",
                  "color": "#8bc34a",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "defaultColumnVisibility": "hidden",
                    "columnSelectionToDisplay": "disabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.8242338033703862,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "maxMoistureThreshold",
                  "type": "attribute",
                  "label": "maxMoistureThreshold",
                  "color": "#3f51b5",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "defaultColumnVisibility": "hidden",
                    "columnSelectionToDisplay": "disabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.31385567303616213,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ]
            }
          ],
          "displayTimewindow": true,
          "showTitleIcon": false,
          "titleTooltip": "",
          "enableDataExport": false,
          "widgetStyle": {},
          "widgetCss": ".mat-mdc-header-row {\n    display: none;\n}\n\n.mat-mdc-row, .mat-mdc-cell {\n    border-bottom: none;\n    cursor: pointer;\n}\n\n.mdc-data-table__row:last-child .mdc-data-table__cell {\n    border-bottom: none;\n}\n",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "actions": {
            "headerButton": [
              {
                "name": "Add moisture sensor",
                "icon": "add",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form #addSensorForm=\"ngForm\" [formGroup]=\"addSensorFormGroup\"\n      (ngSubmit)=\"submit()\" class=\"sf-sensor-form\">\n  <mat-toolbar class=\"flex flex-row\" color=\"primary\">\n    <h2>{{ step === 1 ? 'Add moisture sensor' : 'Set sensor location' }}</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content class=\"flex flex-col\">\n    <section *ngIf=\"step === 1\" class=\"flex flex-col\">\n      <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n        <mat-form-field class=\"mat-block flex-1\">\n          <mat-label>Sensor Name</mat-label>\n          <input matInput formControlName=\"name\" required>\n          <mat-error *ngIf=\"addSensorFormGroup.get('name').hasError('required')\">\n            Sensor name is required.\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"mat-block flex-1\">\n          <mat-label>Label</mat-label>\n          <input matInput formControlName=\"label\">\n        </mat-form-field>\n      </div>\n    </section>\n    <section *ngIf=\"step === 2\" class=\"flex flex-col\">\n      <tb-dashboard-state\n          style=\"height: 400px; width: 100%;\"\n          [ctx]=\"widgetContext\"\n          stateId=\"setup_sensor_location\"\n          [entityId]=\"sensor.id\">\n      </tb-dashboard-state>\n    </section>\n  </div>\n  <div mat-dialog-actions class=\"flex flex-row items-center justify-end\">\n    <button *ngIf=\"step === 1\" mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button *ngIf=\"step === 1\" mat-button mat-raised-button color=\"primary\"\n            type=\"button\"\n            (click)=\"next()\"\n            [disabled]=\"(isLoading$ | async) || addSensorFormGroup.invalid\">\n      Next\n    </button>\n    <button *ngIf=\"step === 2\" mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"back()\" cdkFocusInitial>\n      Back\n    </button>\n    <button *ngIf=\"step === 2\" mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || addSensorFormGroup.invalid || !hasLocation\">\n      Create\n    </button>\n  </div>\n</form>\n",
                "customCss": ".sf-sensor-form {\n    width: 600px;\n}\n\n.sf-sensor-form .mat-toolbar.mat-primary {\n    background: #fff;\n    color: rgba(0, 0, 0, 0.87);\n}\n\n.sf-sensor-form .mat-mdc-button.mat-primary:not(:disabled), .sf-sensor-form .mat-mdc-icon-button.mat-primary:not(:disabled), .sf-sensor-form .mat-mdc-outlined-button.mat-primary:not(:disabled) {\n    color: #5553AF;\n}\n\n.sf-sensor-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-sensor-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-sensor-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-sensor-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    color: #fff;\n}\n\n.sf-sensor-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-sensor-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-sensor-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-sensor-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    background-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-mdc-button .mat-mdc-button-persistent-ripple::before, .sf-sensor-form .mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before, .sf-sensor-form .mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before, .sf-sensor-form .mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before {\n    background-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-mdc-form-field .mdc-text-field--focused .mdc-floating-label {\n    color: #5553AF;\n}\n\n.sf-sensor-form .mdc-text-field--filled .mdc-line-ripple::after {\n    border-bottom-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__handle::after, \n.sf-sensor-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::after, \n.sf-sensor-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::before {\n    background-color: #6F74F2 !important;\n}\n\n.sf-sensor-form .mat-mdc-slide-toggle.mat-accent .mdc-switch .mdc-switch__track::after {\n    background: rgba(111, 116, 242, 0.54) !important;\n}\n\n.sf-sensor-form .mat-datetimepicker-calendar-header {\n    background-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-selected {\n    background-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-selected {\n    background-color: #8689f4;\n}\n\n.sf-sensor-form .mat-datetimepicker-clock-center, .sf-sensor-form .mat-datetimepicker-clock-hand, .sf-sensor-form .mat-datetimepicker-clock-hand:before {\n    background-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-today:not(.mat-datetimepicker-calendar-body-selected) {\n    border-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-icon {\n    color: #868D9C;\n}\n\n.sf-sensor-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #868D9C;\n    padding-bottom: 8px;\n}\n\n.sf-sensor-form .mat-button-toggle-group-appearance-standard, .sf-sensor-form .mat-button-toggle-standalone.mat-button-toggle-appearance-standard {\n    border: none;\n}\n\n.sf-sensor-form .mat-button-toggle {\n    background: rgba(0, 0, 0, 0.06);\n    height: 32px;\n    align-items: center;\n    display: flex;\n}\n\n.sf-sensor-form .mat-button-toggle-checked .mat-button-toggle-button {\n    background-color: #fff;\n    border-radius: 4px;\n    margin-left: 2px;\n    margin-right: 2px;\n}\n\n.sf-sensor-form .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n    line-height: 28px;\n    font-size: 14px;\n}\n\n.sf-sensor-form .mat-button-toggle-group-appearance-standard .mat-button-toggle+.mat-button-toggle {\n    border-left: none;\n}\n\n.sf-sensor-form .mat-button-toggle-checked.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay {\n    opacity: .01;\n}\n\n.sf-sensor-form .mat-mdc-button.weekly-repeat {\n    padding: 0 15px;\n    min-width: 0;\n}\n\n.sf-sensor-form .mat-mdc-button.weekly-repeat.no-border {\n    border: 1px solid #6F74F2;\n}\n\n.sf-sensor-form.mat-primary .mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text {\n    color: #5553AF;\n}\n\n.sf-sensor-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.sf-sensor-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob,\n.sf-sensor-form .mat-mdc-slider .mdc-slider__value-indicator,\n.sf-sensor-form .mat-mdc-slider .mdc-slider__track--inactive {\n    background-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-mdc-slider .mdc-slider__value-indicator::before {\n    border-top-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-mdc-slider .mdc-slider__value-indicator {\n    opacity: 1;\n}\n\n.sf-sensor-form .mat-mdc-slider .mdc-slider__track--active_fill,\n.sf-sensor-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.sf-sensor-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob {\n    border-color: #6F74F2;\n}\n\n.sf-sensor-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #868D9C;\n    padding-bottom: 8px;\n}\n\n.sf-sensor-form .threshold-value {\n    color: #fff;\n    font-weight: 500;\n    background: #6F74F2;\n    border-radius: 16px;\n    width: 32px;\n    height: 32px;\n    line-height: 32px;\n    text-align: center;\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\n\nlet fieldId = widgetContext.stateController.getStateParams().entityId;\n\nopenAddSensorDialog();\n\nfunction openAddSensorDialog() {\n    customDialog.customDialog(htmlTemplate, AddSensorDialogController).subscribe();\n}\n\nfunction AddSensorDialogController(instance) {\n    let vm = instance;\n    \n    vm.widgetContext = widgetContext;\n    vm.step = 1;\n    vm.sensor = null;\n    \n    vm.hasLocation = false;\n    vm.locationSubscription = null;\n\n\n    vm.addSensorFormGroup = vm.fb.group({\n      name: ['', [vm.validators.required]],\n      label: [null]\n    });\n\n    vm.cancel = function() {\n        cancelLocationSubscription();\n        deleteEntityObservable().subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n    vm.next = function() {\n        vm.addSensorFormGroup.markAsPristine();\n        saveEntityObservable().subscribe(\n            function (entity) {\n                const tasks = [saveAttributes(entity.id)];\n                if (!vm.sensor) {\n                    tasks.push(saveRelation(entity.id));\n                }\n                vm.sensor = entity;\n                widgetContext.rxjs.forkJoin(tasks).subscribe(\n                    function () {\n                        createLocationSubscription().subscribe(\n                            function() {\n                                vm.step = 2;\n                            }\n                        );\n                    }\n                );\n            }\n        );\n    };\n    \n    vm.back = function() {\n        cancelLocationSubscription();\n        vm.step = 1;\n    }\n    \n    vm.submit = function() {\n        cancelLocationSubscription();\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n    }\n    \n    \n    function createLocationSubscription() {\n        var subscriptionInfo = {\n            type: 'entity',\n            entityType: vm.sensor.id.entityType,\n            entityId: vm.sensor.id.id,\n            attributes: [{ name: 'latitude' }, {name: 'longitude'}]\n        };\n        var options = {\n            callbacks: {\n                onDataUpdated: function(subscription) {\n                    checkHasLocation(subscription.data);\n                }\n            }\n        };\n        return widgetContext.subscriptionApi.createSubscriptionFromInfo(\n                            'latest', [ subscriptionInfo ], options, false, true).pipe(\n            widgetContext.rxjs.tap(function(locationSubscription) {\n                vm.locationSubscription = locationSubscription;\n            })\n        );\n        \n    }\n    \n    function checkHasLocation(data) {\n        var hasLocation = false;\n        if (data.length === 2) {\n            var latitude, longitude;\n            for (var i = 0; i < data.length; i ++) {\n                var datasourceData = data[i];\n                if (datasourceData.dataKey.name === 'latitude') {\n                    latitude = datasourceData.data[0][1];\n                } else if (datasourceData.dataKey.name === 'longitude') {\n                    longitude = datasourceData.data[0][1];\n                }\n            }\n            if (isNumeric(latitude) && isNumeric(longitude)) {\n                hasLocation = true;\n            }\n        }\n        vm.hasLocation = hasLocation;\n    }\n    \n    function isNumeric(val) {\n        if (typeof val === \"number\") {\n            return true;\n        } else if (typeof val === \"string\") {\n            return !isNaN(val) && \n                !isNaN(parseFloat(val));\n        } else {\n            return false;\n        }\n    }\n    \n    function cancelLocationSubscription() {\n        if (vm.locationSubscription) {\n            widgetContext.subscriptionApi.removeSubscription(vm.locationSubscription.id);\n            vm.locationSubscription = null;\n        }\n    }\n\n    function saveEntityObservable() {\n        return getOrCreateSmartIrrigationDeviceGroup().pipe(\n          widgetContext.rxjs.switchMap((smartIrrigation) => {\n            const formValues = vm.addSensorFormGroup.value;\n            let sensor = {\n                name: formValues.name,\n                type: 'SI Soil Moisture Sensor',\n                label: formValues.label\n            };\n            if (vm.sensor) {\n                sensor.id = vm.sensor.id;\n            }\n            return deviceService.saveDevice(sensor, smartIrrigation.id.id);\n          })\n        );\n    }\n    \n    function deleteEntityObservable() {\n        if (vm.sensor) {\n            return deviceService.deleteDevice(vm.sensor.id.id);\n        } else {\n            return widgetContext.rxjs.of(null);\n        }\n    }\n\n    function saveAttributes(entityId) {\n        if (!vm.hasLocation) {\n            return attributeService.getEntityAttributes(fieldId, 'SERVER_SCOPE', ['perimeter']).pipe(\n                widgetContext.rxjs.mergeMap(function (attributes) {\n                    var polygon;\n                    if (attributes.length && attributes[0].key === 'perimeter') {\n                       polygon = attributes[0].value;\n                    }\n                    var latLng = calculatePolygonCenter(polygon);\n                    let attributesArray = [\n                        {key: 'latitude', value: latLng[0]},\n                        {key: 'longitude', value: latLng[1]}\n                    ];\n                    return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n                })\n            );\n        } else {\n            return widgetContext.rxjs.of(null);\n        }\n    }\n    \n    function saveRelation(entityId) {\n        let relation = {\n            type: 'FieldToMoistureSensor',\n            typeGroup: 'COMMON',\n            to: entityId,\n            from: fieldId\n        };\n        return entityRelationService.saveRelation(relation);\n    }\n    \n    function getOrCreateSmartIrrigationDeviceGroup() {\n      return getEntityGroupByName(\"Smart Irrigation\", \"DEVICE\").pipe(\n          widgetContext.rxjs.switchMap((group) => {\n              if (group) {\n                  return widgetContext.rxjs.of(group);\n              } else {\n                  var smartIrrigation = {\n                    type: 'DEVICE',\n                    name: 'Smart Irrigation'\n                  };\n                  return entityGroupService.saveEntityGroup(smartIrrigation);\n              }\n          })\n      );\n    }\n    \n    function getEntityGroupByName(groupName, groupType) {\n      var entityGroupsPageLink = widgetContext.pageLink(10, 0, groupName);\n      return entityGroupService.getEntityGroupsByPageLink(entityGroupsPageLink, groupType, {ignoreLoading: true}).pipe(\n          widgetContext.rxjs.map((data) => {\n            if (data.data.length) {\n                return data.data.find((group) => group.name === groupName);\n            } else {\n                return null;\n            }\n          })\n      );\n    }\n    \n    function calculatePolygonCenter(polygon) {\n        if (polygon && Array.isArray(polygon)) {\n            var length = polygon.length;\n            var latSum = 0;\n            var lngSum = 0;\n            for (var i = 0; i < length; i ++) {\n                var polyLatLng = polygon[i];\n                latSum += polyLatLng[0];\n                lngSum += polyLatLng[1];\n            }\n            return [latSum / length, lngSum / length];\n        } else {\n            return [0,0];\n        }\n    }\n\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "e13b9c03-837f-8ae9-cc0c-7a0e9931b1e8"
              }
            ],
            "actionCellButton": [
              {
                "name": "Edit moisture sensor",
                "icon": "edit",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form #editSensorForm=\"ngForm\" [formGroup]=\"editSensorFormGroup\"\n      (ngSubmit)=\"save()\" class=\"sf-sensor-form\">\n  <mat-toolbar class=\"flex flex-row\" color=\"primary\">\n    <h2>Edit sensor '{{ entityName }}'</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content class=\"flex flex-col\">\n    <section class=\"flex flex-col\">\n      <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n        <mat-form-field class=\"mat-block flex-1\">\n          <mat-label>Sensor Name</mat-label>\n          <input matInput formControlName=\"name\" required>\n          <mat-error *ngIf=\"editSensorFormGroup.get('name').hasError('required')\">\n            Sensor name is required.\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"mat-block flex-1\">\n          <mat-label>Label</mat-label>\n          <input matInput formControlName=\"label\">\n        </mat-form-field>\n      </div>\n    </section>\n    <section class=\"flex flex-col\">\n      <tb-dashboard-state\n          style=\"height: 400px; width: 100%;\"\n          [ctx]=\"widgetContext\"\n          stateId=\"setup_sensor_location\"\n          [entityId]=\"entityId\">\n      </tb-dashboard-state>\n    </section>\n  </div>\n  <div mat-dialog-actions class=\"flex flex-row items-center justify-end\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || editSensorFormGroup.invalid || !(editSensorFormGroup.dirty || locationChanged) || !hasLocation\">\n      Save\n    </button>\n  </div>\n</form>\n",
                "customCss": ".sf-sensor-form {\n    width: 600px;\n}\n\n.sf-sensor-form .mat-toolbar.mat-primary {\n    background: #fff;\n    color: rgba(0, 0, 0, 0.87);\n}\n\n.sf-sensor-form .mat-mdc-button.mat-primary:not(:disabled), .sf-sensor-form .mat-mdc-icon-button.mat-primary:not(:disabled), .sf-sensor-form .mat-mdc-outlined-button.mat-primary:not(:disabled) {\n    color: #5553AF;\n}\n\n.sf-sensor-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-sensor-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-sensor-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-sensor-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    color: #fff;\n}\n\n.sf-sensor-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-sensor-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-sensor-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-sensor-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    background-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-mdc-button .mat-mdc-button-persistent-ripple::before, .sf-sensor-form .mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before, .sf-sensor-form .mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before, .sf-sensor-form .mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before {\n    background-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-mdc-form-field .mdc-text-field--focused .mdc-floating-label {\n    color: #5553AF;\n}\n\n.sf-sensor-form .mdc-text-field--filled .mdc-line-ripple::after {\n    border-bottom-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__handle::after, \n.sf-sensor-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::after, \n.sf-sensor-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::before {\n    background-color: #6F74F2 !important;\n}\n\n.sf-sensor-form .mat-mdc-slide-toggle.mat-accent .mdc-switch .mdc-switch__track::after {\n    background: rgba(111, 116, 242, 0.54) !important;\n}\n\n.sf-sensor-form .mat-datetimepicker-calendar-header {\n    background-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-selected {\n    background-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-selected {\n    background-color: #8689f4;\n}\n\n.sf-sensor-form .mat-datetimepicker-clock-center, .sf-sensor-form .mat-datetimepicker-clock-hand, .sf-sensor-form .mat-datetimepicker-clock-hand:before {\n    background-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-today:not(.mat-datetimepicker-calendar-body-selected) {\n    border-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-icon {\n    color: #868D9C;\n}\n\n.sf-sensor-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #868D9C;\n    padding-bottom: 8px;\n}\n\n.sf-sensor-form .mat-button-toggle-group-appearance-standard, .sf-sensor-form .mat-button-toggle-standalone.mat-button-toggle-appearance-standard {\n    border: none;\n}\n\n.sf-sensor-form .mat-button-toggle {\n    background: rgba(0, 0, 0, 0.06);\n    height: 32px;\n    align-items: center;\n    display: flex;\n}\n\n.sf-sensor-form .mat-button-toggle-checked .mat-button-toggle-button {\n    background-color: #fff;\n    border-radius: 4px;\n    margin-left: 2px;\n    margin-right: 2px;\n}\n\n.sf-sensor-form .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n    line-height: 28px;\n    font-size: 14px;\n}\n\n.sf-sensor-form .mat-button-toggle-group-appearance-standard .mat-button-toggle+.mat-button-toggle {\n    border-left: none;\n}\n\n.sf-sensor-form .mat-button-toggle-checked.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay {\n    opacity: .01;\n}\n\n.sf-sensor-form .mat-mdc-button.weekly-repeat {\n    padding: 0 15px;\n    min-width: 0;\n}\n\n.sf-sensor-form .mat-mdc-button.weekly-repeat.no-border {\n    border: 1px solid #6F74F2;\n}\n\n.sf-sensor-form.mat-primary .mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text {\n    color: #5553AF;\n}\n\n.sf-sensor-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.sf-sensor-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob,\n.sf-sensor-form .mat-mdc-slider .mdc-slider__value-indicator,\n.sf-sensor-form .mat-mdc-slider .mdc-slider__track--inactive {\n    background-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-mdc-slider .mdc-slider__value-indicator::before {\n    border-top-color: #6F74F2;\n}\n\n.sf-sensor-form .mat-mdc-slider .mdc-slider__value-indicator {\n    opacity: 1;\n}\n\n.sf-sensor-form .mat-mdc-slider .mdc-slider__track--active_fill,\n.sf-sensor-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.sf-sensor-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob {\n    border-color: #6F74F2;\n}\n\n.sf-sensor-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #868D9C;\n    padding-bottom: 8px;\n}\n\n.sf-sensor-form .threshold-value {\n    color: #fff;\n    font-weight: 500;\n    background: #6F74F2;\n    border-radius: 16px;\n    width: 32px;\n    height: 32px;\n    line-height: 32px;\n    text-align: center;\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenEditSensorDialog();\n\nfunction openEditSensorDialog() {\n    customDialog.customDialog(htmlTemplate, EditSensorDialogController).subscribe();\n}\n\nfunction EditSensorDialogController(instance) {\n    let vm = instance;\n    \n    vm.entityName = entityName;\n    vm.entityId = entityId;\n\n    vm.widgetContext = widgetContext;\n    vm.sensor = null;\n    \n    vm.location = null;\n    vm.hasLocation = false;\n    vm.locationChanged = false;\n    vm.locationSubscription = null;\n\n\n    vm.editSensorFormGroup = vm.fb.group({\n      name: ['', [vm.validators.required]],\n      label: [null],\n    });\n\n    vm.cancel = function() {\n        cancelLocationSubscription();\n        restoreLocation().subscribe(\n            function () {\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n    vm.save = function() {\n        vm.editSensorFormGroup.markAsPristine();\n        widgetContext.rxjs.forkJoin([\n            saveSensor()\n        ]).subscribe(\n            function () {\n                cancelLocationSubscription();\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n    \n    loadSensor();\n    \n    function createLocationSubscription() {\n        var subscriptionInfo = {\n            type: 'entity',\n            entityType: vm.sensor.id.entityType,\n            entityId: vm.sensor.id.id,\n            attributes: [{ name: 'latitude' }, {name: 'longitude'}]\n        };\n        var options = {\n            callbacks: {\n                onDataUpdated: function(subscription) {\n                    checkLocation(subscription.data);\n                }\n            }\n        };\n        return widgetContext.subscriptionApi.createSubscriptionFromInfo(\n                            'latest', [ subscriptionInfo ], options, false, true).pipe(\n            widgetContext.rxjs.tap(function(locationSubscription) {\n                vm.locationSubscription = locationSubscription;\n            })\n        );\n        \n    }\n    \n    function checkLocation(data) {\n        var hasLocation = false;\n        var latitude, longitude;\n        if (data.length === 2) {\n            for (var i = 0; i < data.length; i ++) {\n                var datasourceData = data[i];\n                if (datasourceData.dataKey.name === 'latitude') {\n                    latitude = datasourceData.data[0][1];\n                } else if (datasourceData.dataKey.name === 'longitude') {\n                    longitude = datasourceData.data[0][1];\n                }\n            }\n            if (isNumeric(latitude) && isNumeric(longitude)) {\n                hasLocation = true;\n            }\n        }\n        var locationChanged = false;\n        if (hasLocation && !vm.location || !hasLocation && vm.location || \n            vm.location[0] !== latitude || vm.location[1] !== longitude) {\n            locationChanged = true;\n        }\n        vm.hasLocation = hasLocation;\n        vm.locationChanged = locationChanged;\n    }\n    \n    function isNumeric(val) {\n        if (typeof val === \"number\") {\n            return true;\n        } else if (typeof val === \"string\") {\n            return !isNaN(val) && \n                !isNaN(parseFloat(val));\n        } else {\n            return false;\n        }\n    }\n    \n    function cancelLocationSubscription() {\n        if (vm.locationSubscription) {\n            widgetContext.subscriptionApi.removeSubscription(vm.locationSubscription.id);\n            vm.locationSubscription = null;\n        }\n    }\n\n    function saveSensor() {\n        const formValues = vm.editSensorFormGroup.value;\n        vm.sensor.name = formValues.name;\n        vm.sensor.label = formValues.label;\n        return deviceService.saveDevice(vm.sensor);\n    }\n\n    function restoreLocation() {\n        if (vm.locationChanged) {\n            var latitude = null;\n            var longitude = null;\n            if (vm.location && vm.location.length === 2) {\n                latitude = vm.location[0];\n                longitude = vm.location[1];\n            }\n            return attributeService.saveEntityAttributes(vm.sensor.id, \"SERVER_SCOPE\",\n                [\n                    { key: 'latitude', value: latitude },\n                    { key: 'longitude', value: longitude }\n                ]\n            );\n        } else {\n            return widgetContext.rxjs.of(null);\n        }\n    }\n    \n    function loadSensor() {\n        widgetContext.rxjs.forkJoin([\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', ['latitude', 'longitude']),\n            deviceService.getDevice(entityId.id)\n        ]).subscribe(\n            function (data) {\n                var attributes = data[0];\n                for (var i = 0; i < attributes.length; i ++) {\n                    if (attributes[i].key === 'latitude' || attributes[i].key === 'longitude') {\n                        if (!vm.location) {\n                            vm.location = [];\n                        }\n                        vm.location[attributes[i].key === 'latitude' ? 0 : 1] = attributes[i].value;\n                    }\n                }\n                vm.sensor = data[1];\n                vm.editSensorFormGroup.get('name').patchValue(vm.sensor.name, {emitEvent: false});\n                vm.editSensorFormGroup.get('label').patchValue(vm.sensor.label, {emitEvent: false});\n                createLocationSubscription();\n            }\n        );\n    }\n\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "461e0294-e878-6008-1be6-8393c691e5c1"
              },
              {
                "name": "Delete moisture sensor",
                "icon": "delete",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "",
                "customCss": ".sf-sensor-delete-dialog .mat-mdc-button.mat-primary:not(:disabled), .sf-sensor-delete-dialog .mat-icon-button.mat-primary, .sf-sensor-delete-dialog .mat-mdc-outlined-button.mat-primary:not(:disabled) {\n    color: #5553AF;\n}\n\n.sf-sensor-delete-dialog .mat-mdc-fab.mat-primary:not(:disabled), .sf-sensor-delete-dialog .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-sensor-delete-dialog .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-sensor-delete-dialog .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    color: #fff;\n}\n\n.sf-sensor-delete-dialog .mat-mdc-fab.mat-primary:not(:disabled), .sf-sensor-delete-dialog .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-sensor-delete-dialog .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-sensor-delete-dialog .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    background-color: #6F74F2;\n}\n\n.sf-sensor-delete-dialog .mat-mdc-button .mat-mdc-button-persistent-ripple::before, .sf-sensor-delete-dialog .mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before, .sf-sensor-delete-dialog .mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before, .sf-sensor-delete-dialog .mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before {\n    background-color: #6F74F2;\n}",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\n\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n    let title = 'Delete sensor \\'' +\n                 entityName + '\\'';\n    let content = 'Are you sure you want to delete the sensor \\'' + entityName + '\\'?';\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        function(result) {\n            if (result) {\n                deleteEntity();\n            }\n        }\n    );\n    $('tb-confirm-dialog').addClass('sf-sensor-delete-dialog');\n}\n\nfunction deleteEntity() {\n    deleteEntityObservable(entityId).subscribe(\n        function success() {\n            widgetContext.updateAliases();\n        },\n        function fail() {\n            showErrorDialog();\n        }\n    );\n}\n\nfunction deleteEntityObservable(entityId) {\n    return deviceService.deleteDevice(entityId.id);\n}\n\nfunction showErrorDialog() {\n    let title = 'Error';\n    let content = 'An error occurred while deleting the sensor. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe(\n        function(result) {}\n    );\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "6f239e8e-0b5d-fa30-a836-c22b83afaffa"
              }
            ],
            "rowClick": [
              {
                "name": "Moisture sensor details",
                "icon": "more_horiz",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "openDashboardState",
                "targetDashboardStateId": "moisture_sensor_details",
                "setEntityId": true,
                "stateEntityParamName": null,
                "openRightLayout": false,
                "popoverPreferredPlacement": "bottom",
                "popoverHideOnClickOutside": true,
                "popoverHideDashboardToolbar": true,
                "popoverWidth": "300px",
                "popoverHeight": "250px",
                "popoverStyle": {},
                "openInSeparateDialog": false,
                "openInPopover": true,
                "id": "548ad8b1-2a95-54f5-ffde-9d555e5a5832"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "8fcd3aed-58d0-0cad-cf63-3a08e1be40a9",
        "typeFullFqn": "system.cards.entities_table"
      },
      "1f66e5cb-041d-1a45-1abf-6f6ae3d91872": {
        "type": "latest",
        "sizeX": 5,
        "sizeY": 3.5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "61ca5437-6539-88f4-4f59-a9508eefdf1e",
              "filterId": null,
              "dataKeys": []
            }
          ],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1668004676539,
                "endTimeMs": 1668091076539
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "useMarkdownTextFunction": false,
            "markdownTextPattern": "<div class=\"main-layout flex flex-col\" style=\"width: 100%;\">\n    <tb-dashboard-state \n        style=\"height: 160px; width: 100%;\"\n        [ctx]=\"ctx\"\n        stateId=\"moisture_sensor_details_brief\"\n        [entityId]=\"{ entityType: 'DEVICE', id: '${entityId}' }\"> \n    </tb-dashboard-state>\n    <mat-expansion-panel id=\"${entityId}\" class=\"tb-settings\" \n         (expandedChange)=\"showDetails = $event; ctx.popoverComponent?.resize($event ? '400px' : '300px', $event ? '570px' : '250px', 200)\">\n        <mat-expansion-panel-header class=\"flex flex-row flex-wrap\">\n            <mat-panel-description class=\"items-center justify-end\">\n                View details\n            </mat-panel-description>\n        </mat-expansion-panel-header>\n        <ng-template matExpansionPanelContent>\n            <div style=\"height: 80px; width: 100%;\">\n                <tb-dashboard-state \n                    *ngIf=\"showDetails\"\n                    style=\"height: 100%; width: 100%;\"\n                    [ctx]=\"ctx\"\n                    stateId=\"moisture_sensor_details_alarms\"\n                    [entityId]=\"{ entityType: 'DEVICE', id: '${entityId}' }\">\n                </tb-dashboard-state>\n            </div>\n            <div style=\"height: 200px; width: 100%;\">\n                <tb-dashboard-state \n                    *ngIf=\"showDetails\"\n                    style=\"height: 100%; width: 100%;\"\n                    [ctx]=\"ctx\"\n                    stateId=\"moisture_sensor_details_moisture\"\n                    [entityId]=\"{ entityType: 'DEVICE', id: '${entityId}' }\">\n                </tb-dashboard-state>\n            </div>\n        </ng-template>\n    </mat-expansion-panel>\n</div>",
            "applyDefaultMarkdownStyle": true,
            "markdownCss": ".tb-markdown-view .tb-progress-cover, .tb-markdown-view .mat-drawer-container {\n    background-color: #fff !important;\n}\n\n.tb-markdown-view {\n    overflow: hidden !important;\n}\n\n.tb-markdown-view > div {\n    padding: 0;\n}\n"
          },
          "title": "New Markdown/HTML Card",
          "showTitleIcon": false,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "showLegend": false,
          "useDashboardTimewindow": true,
          "enableDataExport": false,
          "widgetCss": ".tb-widget-container > .tb-widget {\n    border-radius: 0px;\n    box-shadow: none;\n}\n\n.tb-markdown-view .tb-progress-cover, .tb-markdown-view .mat-drawer-container {\n    background-color: #fff !important;\n}\n\n.mat-expansion-panel.tb-settings {\n    box-shadow: none;\n}\n\n.mat-expansion-panel.tb-settings .mat-content {\n    overflow: visible;\n}\n\n.mat-expansion-panel.tb-settings .mat-expansion-panel-header {\n    padding: 0;\n}\n\n.mat-expansion-panel.tb-settings .mat-expansion-panel-header:hover {\n    background: none;\n}\n\n.mat-expansion-panel.tb-settings .mat-expansion-panel-header .mat-expansion-indicator {\n    padding: 2px;\n}\n\n.mat-expansion-panel.tb-settings .mat-expansion-panel-header-description {\n    align-items: center;\n    font-weight: 600;\n    font-size: 13px;\n    margin-right: 8px;\n}\n\n.mat-expansion-panel.tb-settings .mat-expansion-panel-header .mat-expansion-indicator:after, .mat-expansion-panel.tb-settings .mat-expansion-panel-header-description {\n    color: #5553AF;\n}\n\n.mat-expansion-panel.tb-settings .mat-expansion-panel-header .mat-expansion-indicator {\n    padding: 0 2px;\n    font-size: 13px;\n}\n\n.mat-expansion-panel.tb-settings .mat-expansion-panel-header .mat-expansion-indicator:after {\n    vertical-align: baseline;\n}\n\n.mat-expansion-panel.tb-settings > .mat-expansion-panel-content > .mat-expansion-panel-body {\n    padding: 0;\n}\n\n.mat-expansion-panel .mat-expansion-panel-content { \n    font: inherit;\n}\n\ndiv.tb-widget .tb-timewindow.no-padding {\n    padding: 0 8px;\n    border: 1px solid rgba(0, 0, 0, 0.08);\n    border-radius: 8px;\n    color: #868D9C;\n    font-weight: 400;\n    font-size: 12px;\n}\n\n.tb-timewindow .mat-icon-button {\n    width: 18px;\n    line-height: 18px;\n    height: 18px;\n    margin-right: 4px;\n}\n\n.tb-timewindow .mat-icon-button .mat-icon {\n    width: 15px;\n    font-size: 15px;\n    line-height: 15px;\n    height: 15px;\n}",
          "pageSize": 1024,
          "noDataDisplayMessage": ""
        },
        "row": 0,
        "col": 0,
        "id": "1f66e5cb-041d-1a45-1abf-6f6ae3d91872",
        "typeFullFqn": "system.cards.markdown_card"
      },
      "b5c71687-c799-9b94-00f1-958cf76f006c": {
        "type": "latest",
        "sizeX": 5,
        "sizeY": 3.5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "61ca5437-6539-88f4-4f59-a9508eefdf1e",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "label",
                  "type": "entityField",
                  "label": "label",
                  "color": "#f44336",
                  "settings": {},
                  "_hash": 0.9633249686422383,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "moisture",
                  "type": "timeseries",
                  "label": "moisture",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.3069038474738244
                },
                {
                  "name": "active",
                  "type": "attribute",
                  "label": "active",
                  "color": "#4caf50",
                  "settings": {},
                  "_hash": 0.21255896609213454,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": true,
                  "postFuncBody": "return value === 'true' ? 'Active' : 'Offline';"
                }
              ]
            }
          ],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1668004676539,
                "endTimeMs": 1668091076539
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "useMarkdownTextFunction": true,
            "markdownTextFunction": "var statusClass = data[0]['active'] === \"Active\" ? \"active\" : \"inactive\";\nvar moistureTs = data[0]['moisture|ts'];\nvar label = data[0]['label'];\nvar moistureElapsedTsHtml;\nif (moistureTs) {\n    var moistureElapsedTs = new Date().getTime() - moistureTs;\n    var MINUTE = 60 * 1000;\n    var HOUR = 60 * MINUTE;\n    var DAY = 24 * HOUR;\n    if (moistureElapsedTs > DAY) {\n        moistureElapsedTs = Math.floor(moistureElapsedTs / DAY) * DAY;\n    } else if (moistureElapsedTs > HOUR) {\n        moistureElapsedTs = Math.floor(moistureElapsedTs / HOUR) * HOUR;\n    } else if (moistureElapsedTs > MINUTE) {\n        moistureElapsedTs = Math.floor(moistureElapsedTs / MINUTE) * MINUTE;\n    }\n    moistureElapsedTsHtml = '{{ ' + moistureElapsedTs + ' | milliSecondsToTimeString }} ago';\n} else {\n    moistureElapsedTsHtml = 'N/A';\n}\n\nreturn '<div class=\"sensor-details\">' +\n    '<div class=\"header\">' + \n        '<h3 class=\"title\">${entityName}</h3>' + \n        (label ? '<span class=\"sensor-label\">' + label + '</span>' : '') + \n    '</div>' +\n    '<div style=\"padding-bottom: 25px;\"></div>' +\n    '<table>' +\n        '<tr>' +\n            '<td class=\"label\">Last value</td>' +\n            '<td class=\"value\">${moisture:1}%</td>' +\n        '</tr>' +\n        '<tr>' +\n            '<td class=\"label\">Status</td>' +\n            '<td class=\"value\"><span class=\"status '+ statusClass +'\"></span><span style=\"padding-left: 8px;\">${active}</span></td>' +\n        '</tr>' +\n        '<tr>' +\n            '<td class=\"label\">Last update</td>' +\n            '<td class=\"value\">' + moistureElapsedTsHtml + '</td>' +\n        '</tr>' +\n    '</table>' +\n'</div>';\n",
            "applyDefaultMarkdownStyle": true,
            "markdownCss": ".tb-markdown-view > div {\n    padding: 0;\n}\n\n.sensor-details .header {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n.sensor-details .title {\n    font-weight: 500;\n    font-size: 16px;\n    padding-right: 8px;\n}\n\n.sensor-details .sensor-label {\n    font-weight: 600;\n    font-size: 13px;\n    line-height: 16px;\n    background: rgba(111, 116, 242, 0.08);\n    border-radius: 16px;\n    padding: 4px 8px;\n    color: #5553AF;   \n}\n\n.sensor-details .label {\n    font-weight: 400;\n    font-size: 12px;\n    color: #868D9C;\n    width: 145px;\n    padding-right: 24px;\n}\n\n.sensor-details .value {\n    font-weight: 600;\n    font-size: 13px;\n    color: rgba(0, 0, 0, 0.76);\n}\n\n.sensor-details .value .status {\n    display: inline-block;\n    vertical-align: middle;\n    width: 4px;\n    height: 4px;\n    border-radius: 2px;\n}\n\n.sensor-details .value .status.active {\n    background: #198038;\n}\n\n.sensor-details .value .status.inactive {\n    background: red;\n}"
          },
          "title": "New Markdown/HTML Card",
          "showTitleIcon": false,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "showLegend": false,
          "useDashboardTimewindow": true,
          "enableDataExport": false,
          "widgetCss": ".tb-widget-container > .tb-widget {\n    border-radius: 0px;\n    box-shadow: none;\n}",
          "pageSize": 1024,
          "noDataDisplayMessage": ""
        },
        "row": 0,
        "col": 0,
        "id": "b5c71687-c799-9b94-00f1-958cf76f006c",
        "typeFullFqn": "system.cards.markdown_card"
      },
      "fd1083dd-fad3-90c3-8eba-8a8fe0f1d93e": {
        "type": "latest",
        "sizeX": 5,
        "sizeY": 3.5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "39927380-423a-872a-0843-de34f99264ad",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "criticalAlarmsCount",
                  "type": "attribute",
                  "label": "criticalAlarmsCount",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.9443086420596323
                },
                {
                  "name": "majorAlarmsCount",
                  "type": "attribute",
                  "label": "majorAlarmsCount",
                  "color": "#4caf50",
                  "settings": {},
                  "_hash": 0.3039588670801061
                }
              ]
            }
          ],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1668004676539,
                "endTimeMs": 1668091076539
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": true,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "8px",
          "settings": {
            "useMarkdownTextFunction": true,
            "markdownTextFunction": "var criticalAlarmsCount = data[0]['criticalAlarmsCount'];\nvar majorAlarmsCount = data[0]['majorAlarmsCount'];\nif (criticalAlarmsCount) {\n    var text = \"Critical Alarm\";\n    if (criticalAlarmsCount > 1) {\n        text += \"s\";\n    }\n    return '<div class=\"alarms critical\"><div id=\"alarms\" class=\"alarm-card\"><mat-icon>error</mat-icon><span class=\"alarm-text\">' + criticalAlarmsCount + ' ' + text + '</span></div></div>';\n} else if (majorAlarmsCount) {\n    var text = \"Major Alarm\";\n    if (majorAlarmsCount > 1) {\n        text += \"s\";\n    }\n    return '<div class=\"alarms major\"><div id=\"alarms\" class=\"alarm-card\"><mat-icon>warning</mat-icon><span class=\"alarm-text\">' + majorAlarmsCount + ' ' + text + '</span></div></div>';\n} else {\n    return '<div class=\"alarms no-alarms\"><div id=\"alarms\" class=\"alarm-card\"><mat-icon>check_circle_outline</mat-icon><span class=\"alarm-text\">No alarms</span></div></div>';\n}\n",
            "markdownCss": ".alarms {\n    width: 100%;\n    height: 100%;\n    padding: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n}\n\n.alarms .alarm-card {\n    padding: 18px;\n    border-radius: 8px;\n}\n\n.alarms .alarm-text {\n    font-weight: 400;\n    font-size: 20px;\n    padding-left: 8px;\n    vertical-align: middle;\n}\n\n.alarms .mat-icon {\n    width: 36px;\n    height: 36px;\n    line-height: 36px;\n    font-size: 36px;\n    vertical-align: middle;\n}\n\n@media only screen and (min-width: 960px) and (max-width: 1200px) {\n    .alarms .alarm-card {\n         padding: 12px;\n    }\n    \n    .alarms .alarm-text {\n        font-size: 16px;\n        padding-left: 6px;\n    }\n    \n    .alarms .mat-icon {\n        width: 24px;\n        height: 24px;\n        line-height: 24px;\n        font-size: 24px;\n    }\n}\n\n.alarms.no-alarms .mat-icon {\n    color: #198038;\n}\n\n.alarms.no-alarms .alarm-text {\n    color: #868D9C;\n}\n\n.alarms.critical .alarm-card {\n    background: #D12730;\n}\n\n.alarms.critical .mat-icon, .alarms.critical .alarm-text {\n    color: #ffffff;\n}\n\n.alarms.critical .alarm-text, .alarms.major .alarm-text {\n    font-weight: 500;\n}\n\n.alarms.major .alarm-card {\n    background: #e78202\n}\n\n.alarms.major .mat-icon, .alarms.major .alarm-text {\n    color: #ffffff;\n}\n\n"
          },
          "title": "Alarms",
          "showTitleIcon": false,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "showLegend": false,
          "useDashboardTimewindow": true,
          "enableDataExport": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "actions": {
            "elementClick": [
              {
                "name": "alarms",
                "icon": "more_horiz",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "openDashboardState",
                "targetDashboardStateId": "field_alarms",
                "setEntityId": true,
                "stateEntityParamName": null,
                "openRightLayout": false,
                "popoverPreferredPlacement": "left",
                "popoverHideOnClickOutside": true,
                "popoverHideDashboardToolbar": true,
                "popoverWidth": "800px",
                "popoverHeight": "50vh",
                "popoverStyle": {},
                "openInSeparateDialog": false,
                "openInPopover": true,
                "id": "699a826e-1f2a-9033-551d-a4853ce8c671"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "fd1083dd-fad3-90c3-8eba-8a8fe0f1d93e",
        "typeFullFqn": "system.cards.markdown_card"
      },
      "2dcc4fce-85e4-e67d-4467-7bd38e579c5c": {
        "type": "alarm",
        "sizeX": 10.5,
        "sizeY": 6.5,
        "config": {
          "timewindow": {
            "realtime": {
              "interval": 1000,
              "timewindowMs": 86400000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "enableSelection": true,
            "enableSearch": true,
            "enableSelectColumnDisplay": true,
            "enableFilter": false,
            "enableStickyHeader": true,
            "enableStickyAction": false,
            "reserveSpaceForHiddenAction": "true",
            "displayDetails": true,
            "allowAcknowledgment": true,
            "allowClear": true,
            "displayPagination": true,
            "defaultPageSize": 10,
            "defaultSortOrder": "-createdTime",
            "useRowStyleFunction": false
          },
          "title": "New Alarms table",
          "dropShadow": false,
          "enableFullscreen": false,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400,
            "padding": "5px 10px 5px 0px"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "alarmSource": {
            "type": "entity",
            "name": null,
            "entityAliasId": "39927380-423a-872a-0843-de34f99264ad",
            "filterId": null,
            "dataKeys": [
              {
                "name": "createdTime",
                "type": "alarm",
                "label": "Created time",
                "color": "#2196f3",
                "settings": {
                  "useCellStyleFunction": false,
                  "cellStyleFunction": "",
                  "useCellContentFunction": false,
                  "cellContentFunction": ""
                },
                "_hash": 0.021092237451093787
              },
              {
                "name": "originator",
                "type": "alarm",
                "label": "Sensor",
                "color": "#4caf50",
                "settings": {
                  "useCellStyleFunction": false,
                  "cellStyleFunction": "",
                  "useCellContentFunction": false,
                  "cellContentFunction": ""
                },
                "_hash": 0.2780007688856758,
                "aggregationType": null,
                "units": null,
                "decimals": null,
                "funcBody": null,
                "usePostProcessing": null,
                "postFuncBody": null
              },
              {
                "name": "type",
                "type": "alarm",
                "label": "Type",
                "color": "#f44336",
                "settings": {
                  "useCellStyleFunction": false,
                  "cellStyleFunction": "",
                  "useCellContentFunction": false,
                  "cellContentFunction": ""
                },
                "_hash": 0.7323586880398418
              },
              {
                "name": "severity",
                "type": "alarm",
                "label": "Severity",
                "color": "#ffc107",
                "settings": {
                  "columnWidth": "0px",
                  "useCellStyleFunction": false,
                  "useCellContentFunction": true,
                  "cellContentFunction": "var severity = value;\nvar color = 'black';\nswitch (severity) {\n  case 'CRITICAL':\n    color = 'red';\n    break;\n  case 'MAJOR':\n    color = 'orange';\n    break;\n  case 'MINOR':\n    color = '#ffca3d';\n    break;\n  case 'WARNING':\n    color = '#abab00';\n    break;\n  case 'INDETERMINATE':\n    color = 'green';\n    break;\n}\n\nseverity = severity.toLowerCase();\nseverity = severity.charAt(0).toUpperCase() + severity.slice(1);\n\nreturn '<span style=\"font-weight: bold; color: ' + color +' !important;\">' + severity + '<span>';\n",
                  "defaultColumnVisibility": "visible",
                  "columnSelectionToDisplay": "enabled",
                  "columnExportOption": "onlyVisible"
                },
                "_hash": 0.09927019860088193,
                "aggregationType": null,
                "units": null,
                "decimals": null,
                "funcBody": null,
                "usePostProcessing": null,
                "postFuncBody": null
              },
              {
                "name": "status",
                "type": "alarm",
                "label": "Status",
                "color": "#607d8b",
                "settings": {
                  "useCellStyleFunction": false,
                  "cellStyleFunction": "",
                  "useCellContentFunction": false,
                  "cellContentFunction": ""
                },
                "_hash": 0.6588418951443418
              }
            ]
          },
          "alarmsPollingInterval": 5,
          "showTitleIcon": false,
          "titleIcon": "more_horiz",
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "widgetStyle": {},
          "displayTimewindow": true,
          "actions": {},
          "datasources": [],
          "enableDataExport": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "alarmFilterConfig": {
            "statusList": [
              "ACTIVE",
              "CLEARED"
            ],
            "severityList": [],
            "typeList": [],
            "searchPropagatedAlarms": true
          }
        },
        "row": 0,
        "col": 0,
        "id": "2dcc4fce-85e4-e67d-4467-7bd38e579c5c",
        "typeFullFqn": "system.alarm_widgets.alarms_table"
      },
      "aac826ba-ba9f-7e72-752f-3a0a6b9cddb5": {
        "type": "latest",
        "sizeX": 5,
        "sizeY": 3.5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "61ca5437-6539-88f4-4f59-a9508eefdf1e",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "criticalAlarmsCount",
                  "type": "attribute",
                  "label": "criticalAlarmsCount",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.09047361437069745
                },
                {
                  "name": "majorAlarmsCount",
                  "type": "attribute",
                  "label": "majorAlarmsCount",
                  "color": "#4caf50",
                  "settings": {},
                  "_hash": 0.27501871866952143
                }
              ]
            }
          ],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1668004676539,
                "endTimeMs": 1668091076539
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "useMarkdownTextFunction": true,
            "markdownTextFunction": "var criticalAlarmsCount = data[0]['criticalAlarmsCount'];\nvar majorAlarmsCount = data[0]['majorAlarmsCount'];\nvar crtiticalAlarmsText = 'N/A';\nvar majorAlarmsText = 'N/A';\nvar criticalAlarmsClass = 'alarms';\nvar criticalAlarmsId = '';\nvar majorAlarmsClass = 'alarms';\nvar majorAlarmsId = '';\nif (typeof criticalAlarmsCount === 'number') {\n    if (criticalAlarmsCount == 0) {\n        crtiticalAlarmsText = 'No alarms';\n    } else {\n        crtiticalAlarmsText = criticalAlarmsCount + ' alarm';\n        if (criticalAlarmsCount > 1) {\n            crtiticalAlarmsText += 's';\n        }\n        criticalAlarmsClass += ' critical';\n        criticalAlarmsId = ' id=\"sensor-alarms\" '\n    }\n}\nif (typeof majorAlarmsCount === 'number') {\n    if (majorAlarmsCount === 0) {\n        majorAlarmsText = 'No alarms';\n    } else {\n        majorAlarmsText = majorAlarmsCount + ' alarm';\n        if (majorAlarmsCount > 1) {\n            majorAlarmsText += 's';\n        }\n        majorAlarmsClass += ' major';\n        majorAlarmsId = ' id=\"sensor-alarms\" '\n    }\n}\nreturn '<div class=\"sensor-details\">' +\n    '<table>' +\n        '<tr>' +\n            '<td class=\"label\">Critical alarms</td>' +\n            '<td class=\"value\"><span ' + criticalAlarmsId + ' class=\"' + criticalAlarmsClass + '\">' + crtiticalAlarmsText + '</span></td>' +\n        '</tr>' +\n        '<tr>' +\n            '<td class=\"label\">Major alarms</td>' +\n            '<td class=\"value\"><span ' + majorAlarmsId + ' class=\"' + majorAlarmsClass + '\">' + majorAlarmsText + '</span></td>' +\n        '</tr>' +\n    '</table>' +\n'</div>';\n",
            "applyDefaultMarkdownStyle": true,
            "markdownCss": ".tb-markdown-view > div {\n    padding: 0;\n}\n\n.sensor-details .label {\n    font-weight: 400;\n    font-size: 12px;\n    color: #868D9C;\n    width: 145px;\n    padding-right: 24px;\n}\n\n.sensor-details .value {\n    font-weight: 600;\n    font-size: 13px;\n    color: rgba(0, 0, 0, 0.76);\n}\n\n.sensor-details .value .alarms {\n    border-radius: 16px;\n}\n\n.sensor-details .value .alarms.critical {\n    padding: 4px 8px;\n    background: #D12730;\n    color: #fff;\n    cursor: pointer;\n}\n\n.sensor-details .value .alarms.major {\n    padding: 4px 8px;\n    border: solid 2px #e78202;\n    color: #e78202;\n    cursor: pointer;\n}\n"
          },
          "title": "New Markdown/HTML Card",
          "showTitleIcon": false,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "showLegend": false,
          "useDashboardTimewindow": true,
          "enableDataExport": false,
          "widgetCss": ".tb-widget-container > .tb-widget {\n    border-radius: 0px;\n    box-shadow: none;\n}",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "actions": {
            "elementClick": [
              {
                "name": "sensor-alarms",
                "icon": "more_horiz",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "openDashboardState",
                "targetDashboardStateId": "sensor_alarms",
                "setEntityId": true,
                "stateEntityParamName": null,
                "openRightLayout": false,
                "popoverPreferredPlacement": "top",
                "popoverHideOnClickOutside": true,
                "popoverHideDashboardToolbar": true,
                "popoverWidth": "750px",
                "popoverHeight": "40vh",
                "popoverStyle": {},
                "openInSeparateDialog": false,
                "openInPopover": true,
                "id": "86f8f07a-ebef-5c54-bdde-dacb5f505061"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "aac826ba-ba9f-7e72-752f-3a0a6b9cddb5",
        "typeFullFqn": "system.cards.markdown_card"
      },
      "8923d335-d974-2aaa-8c40-3eafec174a58": {
        "type": "alarm",
        "sizeX": 10.5,
        "sizeY": 6.5,
        "config": {
          "timewindow": {
            "realtime": {
              "interval": 1000,
              "timewindowMs": 86400000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "enableSelection": true,
            "enableSearch": true,
            "enableSelectColumnDisplay": true,
            "enableFilter": false,
            "enableStickyHeader": true,
            "enableStickyAction": false,
            "reserveSpaceForHiddenAction": "true",
            "displayDetails": true,
            "allowAcknowledgment": true,
            "allowClear": true,
            "displayPagination": true,
            "defaultPageSize": 10,
            "defaultSortOrder": "-createdTime",
            "useRowStyleFunction": false
          },
          "title": "New Alarms table",
          "dropShadow": false,
          "enableFullscreen": false,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400,
            "padding": "5px 10px 5px 0px"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "alarmSource": {
            "type": "entity",
            "name": null,
            "entityAliasId": "61ca5437-6539-88f4-4f59-a9508eefdf1e",
            "filterId": null,
            "dataKeys": [
              {
                "name": "createdTime",
                "type": "alarm",
                "label": "Created time",
                "color": "#2196f3",
                "settings": {
                  "useCellStyleFunction": false,
                  "cellStyleFunction": "",
                  "useCellContentFunction": false,
                  "cellContentFunction": ""
                },
                "_hash": 0.021092237451093787
              },
              {
                "name": "type",
                "type": "alarm",
                "label": "Type",
                "color": "#f44336",
                "settings": {
                  "useCellStyleFunction": false,
                  "cellStyleFunction": "",
                  "useCellContentFunction": false,
                  "cellContentFunction": ""
                },
                "_hash": 0.7323586880398418
              },
              {
                "name": "severity",
                "type": "alarm",
                "label": "Severity",
                "color": "#ffc107",
                "settings": {
                  "columnWidth": "0px",
                  "useCellStyleFunction": false,
                  "useCellContentFunction": true,
                  "cellContentFunction": "var severity = value;\nvar color = 'black';\nswitch (severity) {\n  case 'CRITICAL':\n    color = 'red';\n    break;\n  case 'MAJOR':\n    color = 'orange';\n    break;\n  case 'MINOR':\n    color = '#ffca3d';\n    break;\n  case 'WARNING':\n    color = '#abab00';\n    break;\n  case 'INDETERMINATE':\n    color = 'green';\n    break;\n}\n\nseverity = severity.toLowerCase();\nseverity = severity.charAt(0).toUpperCase() + severity.slice(1);\n\nreturn '<span style=\"font-weight: bold; color: ' + color +' !important;\">' + severity + '<span>';\n",
                  "defaultColumnVisibility": "visible",
                  "columnSelectionToDisplay": "enabled",
                  "columnExportOption": "onlyVisible"
                },
                "_hash": 0.09927019860088193,
                "aggregationType": null,
                "units": null,
                "decimals": null,
                "funcBody": null,
                "usePostProcessing": null,
                "postFuncBody": null
              },
              {
                "name": "status",
                "type": "alarm",
                "label": "Status",
                "color": "#607d8b",
                "settings": {
                  "useCellStyleFunction": false,
                  "cellStyleFunction": "",
                  "useCellContentFunction": false,
                  "cellContentFunction": ""
                },
                "_hash": 0.6588418951443418
              }
            ]
          },
          "alarmsPollingInterval": 5,
          "showTitleIcon": false,
          "titleIcon": "more_horiz",
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "widgetStyle": {},
          "displayTimewindow": true,
          "actions": {},
          "datasources": [],
          "enableDataExport": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "alarmFilterConfig": {
            "statusList": [
              "ACTIVE"
            ],
            "severityList": [],
            "typeList": [],
            "searchPropagatedAlarms": true
          }
        },
        "row": 0,
        "col": 0,
        "id": "8923d335-d974-2aaa-8c40-3eafec174a58",
        "typeFullFqn": "system.alarm_widgets.alarms_table"
      },
      "e18122c8-7973-5206-792a-cfa7f924a7b0": {
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 6.5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "39927380-423a-872a-0843-de34f99264ad",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "irrigationTask",
                  "type": "timeseries",
                  "label": "Start day",
                  "color": "#4caf50",
                  "settings": {
                    "useCellStyleFunction": true,
                    "cellStyleFunction": "return {\n    minWidth: '60px',\n    width: '60px',\n    maxWidth: '60px'\n}",
                    "useCellContentFunction": true,
                    "cellContentFunction": "var data;\nif (value) {\n    try {\n        data = JSON.parse(value);\n    } catch (e){}\n}\nif (data) {\n    var dateFormat;\n    if (new Date().getYear() === new Date(data.startTs).getYear()) {\n        dateFormat = 'd MMM';\n    } else {\n        dateFormat = 'd MMM yyyy';\n    }\n    return ctx.date.transform(data.startTs, dateFormat);\n} else {\n    return '';\n}"
                  },
                  "_hash": 0.7275755335760952,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "irrigationTask",
                  "type": "timeseries",
                  "label": "Start time",
                  "color": "#9c27b0",
                  "settings": {
                    "useCellStyleFunction": true,
                    "cellStyleFunction": "return {\n    minWidth: '60px',\n    width: '60px',\n    maxWidth: '60px'\n}",
                    "useCellContentFunction": true,
                    "cellContentFunction": "var data;\nif (value) {\n    try {\n        data = JSON.parse(value);\n    } catch (e){}\n}\nif (data) {\n    var time = ctx.date.transform(data.startTs, 'HH:mm');\n    return '<span style=\"font-weight: 600; background: rgba(111, 116, 242, 0.08); border-radius: 16px; padding: 4px 8px; color: #5553AF;\">'+time+'</span>';\n} else {\n    return '';\n}\n"
                  },
                  "_hash": 0.914222992801236,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "irrigationTask",
                  "type": "timeseries",
                  "label": "End rule",
                  "color": "#2196f3",
                  "settings": {
                    "useCellStyleFunction": false,
                    "cellStyleFunction": "",
                    "useCellContentFunction": true,
                    "useCellContentFunctionOnExport": true,
                    "cellContentFunction": "  const unit = {\n    from: 'L',\n    METRIC:  'L',\n    IMPERIAL:'gal',\n    HYBRID:  'L'\n  };\n\nvar data;\nif (value) {\n    try {\n        data = JSON.parse(value);\n    } catch (e){}\n}\nif (data) {\n    var durationThreshold = data.durationThreshold;\n    var consumptionThreshold = data.consumptionThreshold;\n    var text = 'N/A';\n    if (durationThreshold) {\n        text = (durationThreshold / 60000).toFixed(0) + ' min';\n    } else if (consumptionThreshold) {\n        const converted = ctx.unitService.convertUnitValue(consumptionThreshold, unit);\n        const usrUnit   = ctx.unitService.getTargetUnitSymbol(unit);\n        text = converted.toFixed(0) + ' ' + usrUnit;\n    }\n    return '<span style=\"font-weight: 600; background: rgba(111, 116, 242, 0.08); border-radius: 16px; padding: 4px 8px;  color: #5553AF;\">'+ text +'</span>';\n} else {\n    return '';\n}\n",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible",
                    "disableSorting": false
                  },
                  "_hash": 0.40035296849915825,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "irrigationTask",
                  "type": "timeseries",
                  "label": "Duration",
                  "color": "#f44336",
                  "settings": {
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "var data;\nif (value) {\n    try {\n        data = JSON.parse(value);\n    } catch (e){}\n}\nif (data) {\n    var duration = data.duration;\n    if (typeof duration === 'number') {\n        return '~' + (duration / 60000).toFixed(0) + ' min';\n    } else {\n        return 'N/A'\n    }\n} else {\n    return 'N/A';\n}\n"
                  },
                  "_hash": 0.16840508210390004,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "irrigationTask",
                  "type": "timeseries",
                  "label": "Volume",
                  "color": "#ffc107",
                  "settings": {
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "var data;\nif (value) {\n    try {\n        data = JSON.parse(value);\n    } catch (e){}\n}\nif (data) {\n    var consumption = data.consumption;\n    if (typeof consumption === 'number') {\n        return consumption.toFixed(0) + ' l';\n    } else {\n        return 'N/A'\n    }\n} else {\n    return 'N/A';\n}\n"
                  },
                  "_hash": 0.9378980877980216,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "irrigationTask",
                  "type": "timeseries",
                  "label": "Progress",
                  "color": "#607d8b",
                  "settings": {
                    "useCellStyleFunction": true,
                    "cellStyleFunction": "return {\n    width: '30%'\n}",
                    "useCellContentFunction": true,
                    "cellContentFunction": "var data;\nif (value) {\n    try {\n        data = JSON.parse(value);\n    } catch (e){}\n}\nif (data) {\n    var durationThreshold = data.durationThreshold;\n    var consumptionThreshold = data.consumptionThreshold;\n    var progress = 0;\n    if (durationThreshold) {\n        progress = data.duration ? (data.duration / durationThreshold * 100) : 0;\n    } else if (consumptionThreshold) {\n        progress = data.consumption ? (data.consumption / consumptionThreshold * 100) : 0;\n    }\n    var percent = progress + '%';\n    var percentText = progress.toFixed(0) + '%';\n    var background = '111, 116, 242';\n    var textColor = '#5553AF';\n    return '<div style=\"width: 100%; height: 16px; background: linear-gradient(to right, rgba('+background+', 0.16) '+percent+', rgba('+background+', 0.08) '+percent+'); border-radius: 5.21053px; line-height: normal;\"><span style=\"padding-left: 4px; font-weight: 600; font-size: 13px; color: '+textColor+';\">'+percentText+'</span></div>';\n} else {\n    return '';\n}\n"
                  },
                  "_hash": 0.5459599068099552,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ],
              "alarmFilterConfig": {
                "statusList": [
                  "ACTIVE"
                ]
              },
              "latestDataKeys": []
            }
          ],
          "timewindow": {
            "hideAggregation": true,
            "hideAggInterval": true,
            "hideTimezone": true,
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 0,
              "timewindowMs": 604800000,
              "quickInterval": "CURRENT_DAY",
              "interval": 1000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 1000
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "enableSearch": false,
            "enableStickyHeader": true,
            "enableStickyAction": true,
            "reserveSpaceForHiddenAction": "true",
            "showTimestamp": false,
            "showMilliseconds": false,
            "displayPagination": true,
            "useEntityLabel": false,
            "defaultPageSize": 10,
            "hideEmptyLines": false,
            "disableStickyHeader": false,
            "useRowStyleFunction": false
          },
          "title": "Irrigation Tasks",
          "dropShadow": false,
          "enableFullscreen": false,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400,
            "padding": "5px 10px 5px 2px"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "widgetStyle": {},
          "actions": {},
          "showTitleIcon": false,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "displayTimewindow": true,
          "titleTooltip": "",
          "enableDataExport": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": ""
        },
        "row": 0,
        "col": 0,
        "id": "e18122c8-7973-5206-792a-cfa7f924a7b0",
        "typeFullFqn": "system.cards.timeseries_table"
      },
      "aaccdb0d-72ff-9f2c-e4ae-55077480a3e6": {
        "type": "latest",
        "sizeX": 5,
        "sizeY": 3.5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "39927380-423a-872a-0843-de34f99264ad",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "irrigationState",
                  "type": "timeseries",
                  "label": "irrigationState",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.11651339023616836
                }
              ]
            }
          ],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1668004676539,
                "endTimeMs": 1668091076539
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "useMarkdownTextFunction": true,
            "markdownTextFunction": "var fieldData = data[0];\nvar irrigationEnabled = data[0]['irrigationState'] === 'ON';\nvar indicatorClass = irrigationEnabled ? 'status-on' : 'status-off';\nvar irrigationStatusText = irrigationEnabled ? 'ON' : 'OFF';\n\nreturn '<div class=\"irrigation-status-container flex flex-row items-center justify-between\">' +\n'<div class=\"irrigation-status-label\">Irrigation status</div>' +\n'<div class=\"irrigation-status\">'+\n  '<span class=\"indicator '+ indicatorClass +'\"></span>'+\n  '<span class=\"irrigation-status-text\">'+irrigationStatusText+'</span>'+\n'</div>' +\n'</div>';\n",
            "markdownCss": ".irrigation-status-container {\n    height: 100%; padding-left: 13px;\n}\n\n.irrigation-status-label {\n    font-size: 16px;\n    font-weight: 400;\n    color: #868D9C;\n}\n\n.indicator {\n    width: 24px; \n    height: 24px; \n    border-radius: 12px;\n    display: inline-block; \n    vertical-align: middle;\n    margin-right: 8px;\n}\n\n.indicator.status-on {\n    background: #198038;\n}\n\n.indicator.status-off {\n    background: #aaa;\n}\n\n.irrigation-status-text {\n    display: inline-block; \n    vertical-align: middle;\n    font-size: 24px;\n    font-weight: 700;\n    color: #000;\n}\n\n@media only screen and (min-width: 960px) and (max-width: 1200px) {\n    .irrigation-status-container {\n        padding-right: 13px;\n    }\n    \n    .indicator {\n        width: 16px; \n        height: 16px; \n        border-radius: 8px;\n        margin-right: 4px;\n    }\n    \n    .irrigation-status-text {\n        font-size: 16px;\n    }\n}"
          },
          "title": "New Markdown/HTML Card",
          "showTitleIcon": false,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "showLegend": false,
          "useDashboardTimewindow": true,
          "enableDataExport": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": ""
        },
        "row": 0,
        "col": 0,
        "id": "aaccdb0d-72ff-9f2c-e4ae-55077480a3e6",
        "typeFullFqn": "system.cards.markdown_card"
      },
      "55f1e5e9-a36c-313f-bd89-131670979b38": {
        "type": "latest",
        "sizeX": 7,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "39927380-423a-872a-0843-de34f99264ad",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "avgMoisture",
                  "type": "timeseries",
                  "label": "Avg moisture",
                  "color": "#5d5aec",
                  "settings": {},
                  "_hash": 0.19606872780730478,
                  "aggregationType": "NONE",
                  "units": null,
                  "decimals": 0,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ]
            }
          ],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1668004676539,
                "endTimeMs": 1668091076539
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": true,
          "backgroundColor": "#ffffff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "8px",
          "settings": {
            "minValue": 0,
            "maxValue": 100,
            "gaugeType": "donut",
            "donutStartAngle": 90,
            "gaugeWidthScale": 0.5,
            "neonGlowBrightness": 0,
            "dashThickness": 0,
            "roundedLineCap": true,
            "gaugeColor": "#eeeeee",
            "useFixedLevelColor": true,
            "fixedLevelColors": [
              {
                "from": {
                  "valueSource": "predefinedValue",
                  "value": 0
                },
                "to": {
                  "valueSource": "entityAttribute",
                  "entityAlias": "Current field",
                  "attribute": "minMoistureThreshold"
                },
                "color": "#f50b0b"
              },
              {
                "from": {
                  "valueSource": "entityAttribute",
                  "entityAlias": "Current field",
                  "attribute": "minMoistureThreshold"
                },
                "to": {
                  "valueSource": "entityAttribute",
                  "entityAlias": "Current field",
                  "attribute": "maxMoistureThreshold"
                },
                "color": "#5d5aec"
              },
              {
                "from": {
                  "valueSource": "entityAttribute",
                  "entityAlias": "Current field",
                  "attribute": "maxMoistureThreshold"
                },
                "to": {
                  "valueSource": "predefinedValue",
                  "value": 100
                },
                "color": "#f50b0b"
              }
            ],
            "showTitle": false,
            "showUnitTitle": false,
            "showTimestamp": false,
            "showValue": true,
            "valueFont": {
              "family": "Roboto",
              "size": 30,
              "style": "normal",
              "weight": "700",
              "color": "#000000"
            },
            "showMinMax": true,
            "minMaxFont": {
              "family": "Roboto",
              "size": 10,
              "style": "normal",
              "weight": "400",
              "color": "#868d9c"
            },
            "showTicks": false,
            "animation": true,
            "animationDuration": 500,
            "animationRule": "linear",
            "barColor": {
              "type": "range",
              "color": "#5d5aec",
              "colorFunction": "var temperature = value;\nif (typeof temperature !== undefined) {\n  var percent = (temperature + 60)/120 * 100;\n  return tinycolor.mix('blue', 'red', percent).toHexString();\n}\nreturn 'blue';",
              "rangeList": {
                "advancedMode": true,
                "range": null,
                "rangeAdvanced": [
                  {
                    "from": {
                      "type": "constant",
                      "value": null,
                      "entityAlias": "",
                      "entityKey": "",
                      "entityKeyType": "attribute"
                    },
                    "to": {
                      "type": "entity",
                      "value": 25,
                      "entityAlias": "Current field",
                      "entityKey": "minMoistureThreshold",
                      "entityKeyType": "attribute"
                    },
                    "color": "#f50b0b"
                  },
                  {
                    "from": {
                      "type": "entity",
                      "value": 25,
                      "entityAlias": "Current field",
                      "entityKey": "minMoistureThreshold",
                      "entityKeyType": "attribute"
                    },
                    "to": {
                      "type": "entity",
                      "value": 75,
                      "entityAlias": "Current field",
                      "entityKey": "maxMoistureThreshold",
                      "entityKeyType": "attribute"
                    },
                    "color": "#5d5aec"
                  },
                  {
                    "from": {
                      "type": "entity",
                      "value": 75,
                      "entityAlias": "Current field",
                      "entityKey": "maxMoistureThreshold",
                      "entityKeyType": "attribute"
                    },
                    "to": {
                      "type": "constant",
                      "value": 100,
                      "entityAlias": "",
                      "entityKey": "",
                      "entityKeyType": "attribute"
                    },
                    "color": "#f50b0b"
                  }
                ]
              },
              "gradient": {
                "advancedMode": false,
                "gradient": [
                  "rgba(0, 255, 0, 1)",
                  "rgba(255, 0, 0, 1)"
                ],
                "gradientAdvanced": [
                  {
                    "source": {
                      "type": "constant"
                    },
                    "color": "rgba(0, 255, 0, 1)"
                  },
                  {
                    "source": {
                      "type": "constant"
                    },
                    "color": "rgba(255, 0, 0, 1)"
                  }
                ],
                "minValue": 0,
                "maxValue": 100
              }
            }
          },
          "title": "Avg moisture",
          "dropShadow": false,
          "enableFullscreen": false,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "useDashboardTimewindow": true,
          "enableDataExport": false,
          "widgetStyle": {},
          "widgetCss": "",
          "pageSize": 1024,
          "units": "%",
          "noDataDisplayMessage": "",
          "showLegend": false,
          "showTitleIcon": false,
          "titleTooltip": ""
        },
        "row": 0,
        "col": 0,
        "id": "55f1e5e9-a36c-313f-bd89-131670979b38",
        "typeFullFqn": "system.digital_gauges.horizontal_bar_justgage"
      },
      "2dc3be15-d850-c363-6c49-e511d3778510": {
        "type": "latest",
        "sizeX": 5,
        "sizeY": 3.5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "39927380-423a-872a-0843-de34f99264ad",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "waterConsumption",
                  "type": "timeseries",
                  "label": "DailyWaterConsumption",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.4383129905545107,
                  "aggregationType": "SUM",
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null,
                  "comparisonEnabled": null
                }
              ]
            }
          ],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1668004676539,
                "endTimeMs": 1668091076539
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": true,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "8px",
          "settings": {
            "useMarkdownTextFunction": true,
            "markdownTextPattern": "<div class=\"daily-water-consumption flex flex-col items-center justify-center\"><div class=\"text\">${DailyWaterConsumption:0} l</div></div>",
            "markdownTextFunction": "// return '# Some title\\\\n - Entity name: ' + data[0]['entityName'];\n\nconst unit = {\n  from: 'L',\n  METRIC: 'L',\n  IMPERIAL: 'gal',\n  HYBRID: 'L'\n}\n\nvar usrUnit = ctx.unitService.getTargetUnitSymbol(unit);\n\nvar unitValue = ctx.unitService.convertUnitValue(data[0]['DailyWaterConsumption'], unit).toFixed(1);\n\nreturn '<div class=\"daily-water-consumption flex flex-col items-center justify-center\"><div class=\"text\">' + unitValue + ' ' + usrUnit +'</div></div>';",
            "applyDefaultMarkdownStyle": true,
            "markdownCss": ".daily-water-consumption {\n    width: 100%;\n    height: 100%;\n    padding: 0;\n}\n\n.daily-water-consumption .text {\n    font-weight: 700;\n    font-size: 36px;\n    color: #000;\n}\n\n@media only screen and (min-width: 960px) and (max-width: 1200px) {\n    .daily-water-consumption .text {\n        font-size: 24px;\n    }\n}"
          },
          "title": "Daily water consumption",
          "showTitleIcon": false,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "showLegend": false,
          "useDashboardTimewindow": false,
          "displayTimewindow": false,
          "enableDataExport": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": ""
        },
        "row": 0,
        "col": 0,
        "id": "2dc3be15-d850-c363-6c49-e511d3778510",
        "typeFullFqn": "system.cards.markdown_card"
      },
      "84801b7f-bcd4-9658-65bc-b753bee0df9c": {
        "typeFullFqn": "system.time_series_chart",
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": "",
              "entityAliasId": "cd737d26-3068-aae0-d370-c93f8e7e1a00",
              "dataKeys": [
                {
                  "name": "avgMoisture",
                  "type": "timeseries",
                  "label": "${entityName}",
                  "color": "#6F74F2",
                  "settings": {
                    "yAxisId": "default",
                    "showInLegend": true,
                    "dataHiddenByDefault": false,
                    "type": "line",
                    "lineSettings": {
                      "showLine": true,
                      "step": false,
                      "stepType": "start",
                      "smooth": true,
                      "lineType": "solid",
                      "lineWidth": 2,
                      "showPoints": false,
                      "showPointLabel": false,
                      "pointLabelPosition": "top",
                      "pointLabelFont": {
                        "family": "Roboto",
                        "size": 11,
                        "sizeUnit": "px",
                        "style": "normal",
                        "weight": "400",
                        "lineHeight": "1"
                      },
                      "pointLabelColor": "rgba(0, 0, 0, 0.76)",
                      "enablePointLabelBackground": false,
                      "pointLabelBackground": "rgba(255,255,255,0.56)",
                      "pointShape": "circle",
                      "pointSize": 12,
                      "fillAreaSettings": {
                        "type": "none",
                        "opacity": 0.4,
                        "gradient": {
                          "start": 100,
                          "end": 0
                        }
                      }
                    },
                    "barSettings": {
                      "showBorder": false,
                      "borderWidth": 2,
                      "borderRadius": 0,
                      "showLabel": false,
                      "labelPosition": "top",
                      "labelFont": {
                        "family": "Roboto",
                        "size": 11,
                        "sizeUnit": "px",
                        "style": "normal",
                        "weight": "400",
                        "lineHeight": "1"
                      },
                      "labelColor": "rgba(0, 0, 0, 0.76)",
                      "enableLabelBackground": false,
                      "labelBackground": "rgba(255,255,255,0.56)",
                      "backgroundSettings": {
                        "type": "none",
                        "opacity": 0.4,
                        "gradient": {
                          "start": 100,
                          "end": 0
                        }
                      }
                    },
                    "tooltipValueFormatter": null,
                    "comparisonSettings": {
                      "showValuesForComparison": false,
                      "comparisonValuesLabel": "",
                      "color": ""
                    }
                  },
                  "_hash": 0.7552082927145491,
                  "units": "%",
                  "decimals": null,
                  "aggregationType": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ],
              "alarmFilterConfig": {
                "statusList": [
                  "ACTIVE"
                ]
              },
              "latestDataKeys": []
            }
          ],
          "timewindow": {
            "hideAggregation": false,
            "hideAggInterval": false,
            "hideTimezone": false,
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 0,
              "timewindowMs": 604800000,
              "quickInterval": "CURRENT_DAY",
              "interval": 86400000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 50000
            },
            "timezone": null
          },
          "showTitle": true,
          "backgroundColor": "rgba(0, 0, 0, 0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "showLegend": true,
            "legendConfig": {
              "direction": "column",
              "position": "top",
              "sortDataKeys": false,
              "showMin": false,
              "showMax": false,
              "showAvg": false,
              "showTotal": false,
              "showLatest": false
            },
            "thresholds": [],
            "dataZoom": true,
            "stack": false,
            "yAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "left",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "rgba(0, 0, 0, 0.54)",
              "showTicks": true,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": true,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": true,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)"
            },
            "xAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "bottom",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 10,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "rgba(0, 0, 0, 0.54)",
              "ticksFormat": {},
              "showTicks": false,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": false,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": false,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)"
            },
            "legendLabelFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "400",
              "lineHeight": "16px"
            },
            "legendLabelColor": "#868D9C",
            "showTooltip": true,
            "tooltipTrigger": "axis",
            "tooltipValueFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "500",
              "lineHeight": "16px"
            },
            "tooltipValueColor": "rgba(0, 0, 0, 0.76)",
            "tooltipShowDate": true,
            "tooltipDateFormat": {
              "format": null,
              "lastUpdateAgo": false,
              "custom": false,
              "auto": true,
              "autoDateFormatSettings": {}
            },
            "tooltipDateFont": {
              "family": "Roboto",
              "size": 11,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "400",
              "lineHeight": "16px"
            },
            "tooltipDateColor": "rgba(0, 0, 0, 0.76)",
            "tooltipDateInterval": true,
            "tooltipBackgroundColor": "rgba(255, 255, 255, 0.76)",
            "tooltipBackgroundBlur": 4,
            "background": {
              "type": "color",
              "color": "#fff",
              "overlay": {
                "enabled": false,
                "color": "rgba(255,255,255,0.72)",
                "blur": 3
              }
            },
            "yAxes": {
              "default": {
                "units": "%",
                "decimals": null,
                "show": true,
                "label": "",
                "labelFont": {
                  "family": "Roboto",
                  "size": 12,
                  "sizeUnit": "px",
                  "style": "normal",
                  "weight": "600",
                  "lineHeight": "1"
                },
                "labelColor": "rgba(0, 0, 0, 0.54)",
                "position": "left",
                "showTickLabels": true,
                "tickLabelFont": {
                  "family": "Roboto",
                  "size": 12,
                  "sizeUnit": "px",
                  "style": "normal",
                  "weight": "400",
                  "lineHeight": "1"
                },
                "tickLabelColor": "rgba(0, 0, 0, 0.54)",
                "ticksFormatter": null,
                "showTicks": false,
                "ticksColor": "rgba(0, 0, 0, 0.54)",
                "showLine": false,
                "lineColor": "rgba(0, 0, 0, 0.54)",
                "showSplitLines": true,
                "splitLinesColor": "rgba(0, 0, 0, 0.12)",
                "id": "default",
                "order": 0,
                "min": null,
                "max": null,
                "ticksGenerator": null,
                "interval": null,
                "splitNumber": null
              }
            },
            "noAggregationBarWidthSettings": {
              "strategy": "group",
              "groupWidth": {
                "relative": true,
                "relativeWidth": 2,
                "absoluteWidth": 1000
              },
              "barWidth": {
                "relative": true,
                "relativeWidth": 2,
                "absoluteWidth": 1000
              }
            },
            "animation": {
              "animation": true,
              "animationThreshold": 2000,
              "animationDuration": 500,
              "animationEasing": "cubicOut",
              "animationDelay": 0,
              "animationDurationUpdate": 300,
              "animationEasingUpdate": "cubicOut",
              "animationDelayUpdate": 0
            },
            "padding": "12px",
            "comparisonEnabled": false,
            "timeForComparison": "previousInterval",
            "comparisonCustomIntervalValue": 7200000,
            "comparisonXAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "top",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 10,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "rgba(0, 0, 0, 0.54)",
              "ticksFormat": {},
              "showTicks": true,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": true,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": true,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)"
            },
            "grid": {
              "show": false,
              "backgroundColor": null,
              "borderWidth": 1,
              "borderColor": "#ccc"
            }
          },
          "title": "Moisture history",
          "dropShadow": false,
          "enableFullscreen": false,
          "titleStyle": null,
          "mobileHeight": 4,
          "configMode": "basic",
          "actions": {},
          "showTitleIcon": false,
          "titleIcon": "thermostat",
          "iconColor": "#1F6BDD",
          "useDashboardTimewindow": false,
          "displayTimewindow": true,
          "titleFont": {
            "size": 16,
            "sizeUnit": "px",
            "family": "Roboto",
            "weight": "400",
            "style": "normal",
            "lineHeight": "24px"
          },
          "titleColor": null,
          "titleTooltip": "",
          "widgetStyle": {},
          "widgetCss": "",
          "pageSize": 1024,
          "units": "",
          "decimals": null,
          "noDataDisplayMessage": "",
          "timewindowStyle": {
            "showIcon": false,
            "iconSize": "24px",
            "icon": null,
            "iconPosition": "left",
            "font": {
              "size": 12,
              "sizeUnit": "px",
              "family": "Roboto",
              "weight": "400",
              "style": "normal",
              "lineHeight": "16px"
            },
            "color": "rgba(0, 0, 0, 0.38)",
            "displayTypePrefix": true
          },
          "margin": "0px",
          "borderRadius": "",
          "iconSize": "0px",
          "enableDataExport": false,
          "mobileOrder": 0
        },
        "row": 0,
        "col": 0,
        "id": "84801b7f-bcd4-9658-65bc-b753bee0df9c"
      },
      "7dadc15d-b85b-8ef0-5de1-6c23d0acea73": {
        "typeFullFqn": "system.time_series_chart",
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": "",
              "entityAliasId": "39927380-423a-872a-0843-de34f99264ad",
              "dataKeys": [
                {
                  "name": "avgMoisture",
                  "type": "timeseries",
                  "label": "Moisture",
                  "color": "#6F74F2",
                  "settings": {
                    "yAxisId": "default",
                    "showInLegend": true,
                    "dataHiddenByDefault": false,
                    "type": "line",
                    "lineSettings": {
                      "showLine": true,
                      "step": false,
                      "stepType": "start",
                      "smooth": true,
                      "lineType": "solid",
                      "lineWidth": 2,
                      "showPoints": false,
                      "showPointLabel": false,
                      "pointLabelPosition": "top",
                      "pointLabelFont": {
                        "family": "Roboto",
                        "size": 11,
                        "sizeUnit": "px",
                        "style": "normal",
                        "weight": "400",
                        "lineHeight": "1"
                      },
                      "pointLabelColor": "rgba(0, 0, 0, 0.76)",
                      "enablePointLabelBackground": false,
                      "pointLabelBackground": "rgba(255,255,255,0.56)",
                      "pointShape": "circle",
                      "pointSize": 12,
                      "fillAreaSettings": {
                        "type": "none",
                        "opacity": 0.4,
                        "gradient": {
                          "start": 100,
                          "end": 0
                        }
                      }
                    },
                    "barSettings": {
                      "showBorder": false,
                      "borderWidth": 2,
                      "borderRadius": 0,
                      "showLabel": false,
                      "labelPosition": "top",
                      "labelFont": {
                        "family": "Roboto",
                        "size": 11,
                        "sizeUnit": "px",
                        "style": "normal",
                        "weight": "400",
                        "lineHeight": "1"
                      },
                      "labelColor": "rgba(0, 0, 0, 0.76)",
                      "enableLabelBackground": false,
                      "labelBackground": "rgba(255,255,255,0.56)",
                      "backgroundSettings": {
                        "type": "none",
                        "opacity": 0.4,
                        "gradient": {
                          "start": 100,
                          "end": 0
                        }
                      }
                    },
                    "tooltipValueFormatter": null,
                    "comparisonSettings": {
                      "showValuesForComparison": false,
                      "comparisonValuesLabel": "",
                      "color": ""
                    }
                  },
                  "_hash": 0.7552082927145491,
                  "units": "%",
                  "decimals": null,
                  "aggregationType": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "waterConsumption",
                  "type": "timeseries",
                  "label": "Consumption",
                  "color": "#4caf50",
                  "settings": {
                    "yAxisId": "axis1",
                    "showInLegend": true,
                    "dataHiddenByDefault": false,
                    "type": "line",
                    "lineSettings": {
                      "showLine": true,
                      "step": false,
                      "stepType": "start",
                      "smooth": true,
                      "lineType": "solid",
                      "lineWidth": 2,
                      "showPoints": false,
                      "showPointLabel": false,
                      "pointLabelPosition": "top",
                      "pointLabelFont": {
                        "family": "Roboto",
                        "size": 11,
                        "sizeUnit": "px",
                        "style": "normal",
                        "weight": "400",
                        "lineHeight": "1"
                      },
                      "pointLabelColor": "rgba(0, 0, 0, 0.76)",
                      "enablePointLabelBackground": false,
                      "pointLabelBackground": "rgba(255,255,255,0.56)",
                      "pointShape": "circle",
                      "pointSize": 12,
                      "fillAreaSettings": {
                        "type": "none",
                        "opacity": 0.4,
                        "gradient": {
                          "start": 100,
                          "end": 0
                        }
                      }
                    },
                    "barSettings": {
                      "showBorder": false,
                      "borderWidth": 2,
                      "borderRadius": 0,
                      "showLabel": false,
                      "labelPosition": "top",
                      "labelFont": {
                        "family": "Roboto",
                        "size": 11,
                        "sizeUnit": "px",
                        "style": "normal",
                        "weight": "400",
                        "lineHeight": "1"
                      },
                      "labelColor": "rgba(0, 0, 0, 0.76)",
                      "enableLabelBackground": false,
                      "labelBackground": "rgba(255,255,255,0.56)",
                      "backgroundSettings": {
                        "type": "none",
                        "opacity": 0.4,
                        "gradient": {
                          "start": 100,
                          "end": 0
                        }
                      }
                    },
                    "tooltipValueFormatter": null,
                    "comparisonSettings": {
                      "showValuesForComparison": false,
                      "comparisonValuesLabel": "",
                      "color": ""
                    }
                  },
                  "_hash": 0.191123640361619,
                  "units": {
                    "from": "L",
                    "METRIC": "L",
                    "IMPERIAL": "gal",
                    "HYBRID": "L"
                  },
                  "decimals": null,
                  "aggregationType": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ],
              "alarmFilterConfig": {
                "statusList": [
                  "ACTIVE"
                ]
              },
              "latestDataKeys": [
                {
                  "name": "minMoistureThreshold",
                  "type": "attribute",
                  "label": "minMoistureThreshold",
                  "color": "#f44336",
                  "settings": {
                    "__thresholdKey": true
                  },
                  "_hash": 0.30616283218066975
                },
                {
                  "name": "maxMoistureThreshold",
                  "type": "attribute",
                  "label": "maxMoistureThreshold",
                  "color": "#ffc107",
                  "settings": {
                    "__thresholdKey": true
                  },
                  "_hash": 0.6910259517980766
                }
              ]
            }
          ],
          "timewindow": {
            "hideAggregation": false,
            "hideAggInterval": false,
            "hideTimezone": false,
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 0,
              "timewindowMs": 604800000,
              "quickInterval": "CURRENT_DAY",
              "interval": 1800000
            },
            "aggregation": {
              "type": "AVG",
              "limit": 50000
            },
            "timezone": null
          },
          "showTitle": true,
          "backgroundColor": "rgba(0, 0, 0, 0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "comparisonEnabled": false,
            "timeForComparison": "previousInterval",
            "comparisonCustomIntervalValue": 7200000,
            "comparisonXAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "top",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 10,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "rgba(0, 0, 0, 0.54)",
              "ticksFormat": {},
              "showTicks": true,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": true,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": true,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)"
            },
            "yAxes": {
              "default": {
                "units": "%",
                "decimals": null,
                "show": true,
                "label": "",
                "labelFont": {
                  "family": "Roboto",
                  "size": 12,
                  "sizeUnit": "px",
                  "style": "normal",
                  "weight": "600",
                  "lineHeight": "1"
                },
                "labelColor": "rgba(0, 0, 0, 0.54)",
                "position": "left",
                "showTickLabels": true,
                "tickLabelFont": {
                  "family": "Roboto",
                  "size": 12,
                  "sizeUnit": "px",
                  "style": "normal",
                  "weight": "400",
                  "lineHeight": "1"
                },
                "tickLabelColor": "rgba(0, 0, 0, 0.54)",
                "ticksFormatter": null,
                "showTicks": false,
                "ticksColor": "rgba(0, 0, 0, 0.54)",
                "showLine": false,
                "lineColor": "rgba(0, 0, 0, 0.54)",
                "showSplitLines": true,
                "splitLinesColor": "rgba(0, 0, 0, 0.12)",
                "id": "default",
                "order": 0,
                "min": null,
                "max": null,
                "ticksGenerator": null,
                "interval": null,
                "splitNumber": null
              },
              "axis1": {
                "units": {
                  "from": "L",
                  "METRIC": "L",
                  "IMPERIAL": "gal",
                  "HYBRID": "L"
                },
                "decimals": null,
                "show": true,
                "label": "",
                "labelFont": {
                  "family": "Roboto",
                  "size": 12,
                  "sizeUnit": "px",
                  "style": "normal",
                  "weight": "600",
                  "lineHeight": "1"
                },
                "labelColor": "rgba(0, 0, 0, 0.54)",
                "position": "left",
                "showTickLabels": true,
                "tickLabelFont": {
                  "family": "Roboto",
                  "size": 12,
                  "sizeUnit": "px",
                  "style": "normal",
                  "weight": "400",
                  "lineHeight": "1"
                },
                "tickLabelColor": "rgba(0, 0, 0, 0.54)",
                "ticksFormatter": null,
                "showTicks": true,
                "ticksColor": "rgba(0, 0, 0, 0.54)",
                "showLine": true,
                "lineColor": "rgba(0, 0, 0, 0.54)",
                "showSplitLines": true,
                "splitLinesColor": "rgba(0, 0, 0, 0.12)",
                "id": "axis1",
                "order": 1
              }
            },
            "thresholds": [
              {
                "type": "latestKey",
                "yAxisId": "default",
                "units": "%",
                "decimals": null,
                "lineColor": "#FF6707",
                "lineType": "solid",
                "lineWidth": 2,
                "startSymbol": "none",
                "startSymbolSize": 5,
                "endSymbol": "arrow",
                "endSymbolSize": 5,
                "showLabel": true,
                "labelPosition": "insideEndTop",
                "labelFont": {
                  "size": 12,
                  "family": "Roboto",
                  "weight": "500",
                  "style": "normal"
                },
                "labelColor": "rgb(255, 255, 255)",
                "enableLabelBackground": true,
                "labelBackground": "#FF6707",
                "latestKey": "minMoistureThreshold",
                "latestKeyType": "attribute"
              },
              {
                "type": "latestKey",
                "yAxisId": "default",
                "units": "%",
                "decimals": null,
                "lineColor": "#FF6707",
                "lineType": "solid",
                "lineWidth": 2,
                "startSymbol": "none",
                "startSymbolSize": 5,
                "endSymbol": "arrow",
                "endSymbolSize": 5,
                "showLabel": true,
                "labelPosition": "insideEndTop",
                "labelFont": {
                  "size": 12,
                  "family": "Roboto",
                  "weight": "500",
                  "style": "normal"
                },
                "labelColor": "rgb(255, 255, 255)",
                "enableLabelBackground": true,
                "labelBackground": "#FF6707",
                "latestKey": "maxMoistureThreshold",
                "latestKeyType": "attribute"
              }
            ],
            "dataZoom": true,
            "stack": false,
            "grid": {
              "show": false,
              "backgroundColor": null,
              "borderWidth": 1,
              "borderColor": "#ccc"
            },
            "xAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "bottom",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 10,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "rgba(0, 0, 0, 0.54)",
              "ticksFormat": {},
              "showTicks": false,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": false,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": false,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)"
            },
            "noAggregationBarWidthSettings": {
              "strategy": "group",
              "groupWidth": {
                "relative": true,
                "relativeWidth": 2,
                "absoluteWidth": 1000
              },
              "barWidth": {
                "relative": true,
                "relativeWidth": 2,
                "absoluteWidth": 1000
              }
            },
            "showLegend": true,
            "legendLabelFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "400",
              "lineHeight": "16px"
            },
            "legendLabelColor": "#868D9C",
            "legendConfig": {
              "direction": "column",
              "position": "top",
              "sortDataKeys": false,
              "showMin": false,
              "showMax": false,
              "showAvg": false,
              "showTotal": false,
              "showLatest": false,
              "valueFormat": null
            },
            "showTooltip": true,
            "tooltipTrigger": "axis",
            "tooltipValueFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "500",
              "lineHeight": "16px"
            },
            "tooltipValueColor": "rgba(0, 0, 0, 0.76)",
            "tooltipValueFormatter": null,
            "tooltipShowDate": true,
            "tooltipDateFormat": {
              "format": null,
              "lastUpdateAgo": false,
              "custom": false,
              "auto": true,
              "autoDateFormatSettings": {
                "millisecond": "MMM dd yyyy HH:mm:ss"
              }
            },
            "tooltipDateFont": {
              "family": "Roboto",
              "size": 11,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "400",
              "lineHeight": "16px"
            },
            "tooltipDateColor": "rgba(0, 0, 0, 0.76)",
            "tooltipDateInterval": false,
            "tooltipBackgroundColor": "rgba(255, 255, 255, 0.76)",
            "tooltipBackgroundBlur": 4,
            "animation": {
              "animation": true,
              "animationThreshold": 2000,
              "animationDuration": 500,
              "animationEasing": "cubicOut",
              "animationDelay": 0,
              "animationDurationUpdate": 300,
              "animationEasingUpdate": "cubicOut",
              "animationDelayUpdate": 0
            },
            "background": {
              "type": "color",
              "color": "#fff",
              "overlay": {
                "enabled": false,
                "color": "rgba(255,255,255,0.72)",
                "blur": 3
              }
            },
            "padding": "12px",
            "legendColumnTitleFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "400",
              "lineHeight": "16px"
            },
            "legendColumnTitleColor": "rgba(0, 0, 0, 0.38)",
            "legendValueFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "500",
              "lineHeight": "16px"
            },
            "legendValueColor": "rgba(0, 0, 0, 0.87)",
            "tooltipLabelFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "400",
              "lineHeight": "16px"
            },
            "tooltipLabelColor": "rgba(0, 0, 0, 0.76)",
            "tooltipHideZeroValues": null
          },
          "title": "Statistics",
          "dropShadow": false,
          "enableFullscreen": false,
          "titleStyle": null,
          "mobileHeight": 4,
          "configMode": "basic",
          "actions": {},
          "showTitleIcon": false,
          "titleIcon": "thermostat",
          "iconColor": "#1F6BDD",
          "useDashboardTimewindow": false,
          "displayTimewindow": true,
          "titleFont": {
            "size": 16,
            "sizeUnit": "px",
            "family": "Roboto",
            "weight": "400",
            "style": "normal",
            "lineHeight": "24px"
          },
          "titleColor": null,
          "titleTooltip": "",
          "widgetStyle": {},
          "widgetCss": "",
          "pageSize": 1024,
          "units": "",
          "decimals": null,
          "noDataDisplayMessage": "",
          "timewindowStyle": {
            "showIcon": false,
            "iconSize": "24px",
            "icon": null,
            "iconPosition": "left",
            "font": {
              "size": 12,
              "sizeUnit": "px",
              "family": "Roboto",
              "weight": "400",
              "style": "normal",
              "lineHeight": "16px"
            },
            "color": "rgba(0, 0, 0, 0.38)",
            "displayTypePrefix": true
          },
          "margin": "0px",
          "borderRadius": "",
          "iconSize": "0px",
          "enableDataExport": false,
          "mobileOrder": 0
        },
        "row": 0,
        "col": 0,
        "id": "7dadc15d-b85b-8ef0-5de1-6c23d0acea73"
      },
      "f99ce7c5-d0b0-0292-d803-78aba8ba3b31": {
        "typeFullFqn": "system.time_series_chart",
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": "",
              "entityAliasId": "61ca5437-6539-88f4-4f59-a9508eefdf1e",
              "dataKeys": [
                {
                  "name": "moisture",
                  "type": "timeseries",
                  "label": "Moisture",
                  "color": "#6F74F2",
                  "settings": {
                    "yAxisId": "default",
                    "showInLegend": true,
                    "dataHiddenByDefault": false,
                    "type": "line",
                    "lineSettings": {
                      "showLine": true,
                      "step": false,
                      "stepType": "start",
                      "smooth": true,
                      "lineType": "solid",
                      "lineWidth": 2,
                      "showPoints": false,
                      "showPointLabel": false,
                      "pointLabelPosition": "top",
                      "pointLabelFont": {
                        "family": "Roboto",
                        "size": 11,
                        "sizeUnit": "px",
                        "style": "normal",
                        "weight": "400",
                        "lineHeight": "1"
                      },
                      "pointLabelColor": "rgba(0, 0, 0, 0.76)",
                      "enablePointLabelBackground": false,
                      "pointLabelBackground": "rgba(255,255,255,0.56)",
                      "pointShape": "circle",
                      "pointSize": 12,
                      "fillAreaSettings": {
                        "type": "none",
                        "opacity": 0.4,
                        "gradient": {
                          "start": 100,
                          "end": 0
                        }
                      }
                    },
                    "barSettings": {
                      "showBorder": false,
                      "borderWidth": 2,
                      "borderRadius": 0,
                      "showLabel": false,
                      "labelPosition": "top",
                      "labelFont": {
                        "family": "Roboto",
                        "size": 11,
                        "sizeUnit": "px",
                        "style": "normal",
                        "weight": "400",
                        "lineHeight": "1"
                      },
                      "labelColor": "rgba(0, 0, 0, 0.76)",
                      "enableLabelBackground": false,
                      "labelBackground": "rgba(255,255,255,0.56)",
                      "backgroundSettings": {
                        "type": "none",
                        "opacity": 0.4,
                        "gradient": {
                          "start": 100,
                          "end": 0
                        }
                      }
                    },
                    "tooltipValueFormatter": null,
                    "comparisonSettings": {
                      "showValuesForComparison": false,
                      "comparisonValuesLabel": "",
                      "color": ""
                    }
                  },
                  "_hash": 0.7552082927145491,
                  "units": "%",
                  "decimals": null,
                  "aggregationType": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ],
              "alarmFilterConfig": {
                "statusList": [
                  "ACTIVE"
                ]
              },
              "latestDataKeys": [
                {
                  "name": "minMoistureThreshold",
                  "type": "attribute",
                  "label": "minMoistureThreshold",
                  "color": "#f44336",
                  "settings": {
                    "__thresholdKey": true
                  },
                  "_hash": 0.30616283218066975
                },
                {
                  "name": "maxMoistureThreshold",
                  "type": "attribute",
                  "label": "maxMoistureThreshold",
                  "color": "#ffc107",
                  "settings": {
                    "__thresholdKey": true
                  },
                  "_hash": 0.6910259517980766
                }
              ]
            }
          ],
          "timewindow": {
            "hideInterval": false,
            "hideLastInterval": false,
            "hideQuickInterval": false,
            "hideAggregation": false,
            "hideAggInterval": false,
            "hideTimezone": false,
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 0,
              "timewindowMs": 604800000,
              "quickInterval": "CURRENT_DAY",
              "interval": 1800000
            },
            "aggregation": {
              "type": "AVG",
              "limit": 50000
            },
            "timezone": null
          },
          "showTitle": false,
          "backgroundColor": "rgba(0, 0, 0, 0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "comparisonEnabled": false,
            "timeForComparison": "previousInterval",
            "comparisonCustomIntervalValue": 7200000,
            "comparisonXAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "top",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 10,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "rgba(0, 0, 0, 0.54)",
              "ticksFormat": {},
              "showTicks": true,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": true,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": true,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)"
            },
            "yAxes": {
              "default": {
                "units": "%",
                "decimals": null,
                "show": true,
                "label": "",
                "labelFont": {
                  "family": "Roboto",
                  "size": 12,
                  "sizeUnit": "px",
                  "style": "normal",
                  "weight": "600",
                  "lineHeight": "1"
                },
                "labelColor": "rgba(0, 0, 0, 0.54)",
                "position": "right",
                "showTickLabels": true,
                "tickLabelFont": {
                  "family": "Roboto",
                  "size": 12,
                  "sizeUnit": "px",
                  "style": "normal",
                  "weight": "400",
                  "lineHeight": "1"
                },
                "tickLabelColor": "#868D9C",
                "ticksFormatter": null,
                "showTicks": false,
                "ticksColor": "rgba(0, 0, 0, 0.54)",
                "showLine": false,
                "lineColor": "rgba(0, 0, 0, 0.54)",
                "showSplitLines": true,
                "splitLinesColor": "rgba(0, 0, 0, 0.12)",
                "id": "default",
                "order": 0,
                "min": null,
                "max": null,
                "ticksGenerator": null,
                "interval": null,
                "splitNumber": null
              }
            },
            "thresholds": [
              {
                "type": "latestKey",
                "yAxisId": "default",
                "units": "%",
                "decimals": null,
                "lineColor": "#FF6707",
                "lineType": "solid",
                "lineWidth": 2,
                "startSymbol": "none",
                "startSymbolSize": 5,
                "endSymbol": "arrow",
                "endSymbolSize": 5,
                "showLabel": true,
                "labelPosition": "insideEndTop",
                "labelFont": {
                  "size": 12,
                  "family": "Roboto",
                  "weight": "500",
                  "style": "normal"
                },
                "labelColor": "rgb(255, 255, 255)",
                "enableLabelBackground": true,
                "labelBackground": "#FF6707",
                "latestKey": "minMoistureThreshold",
                "latestKeyType": "attribute"
              },
              {
                "type": "latestKey",
                "yAxisId": "default",
                "units": "%",
                "decimals": null,
                "lineColor": "#FF6707",
                "lineType": "solid",
                "lineWidth": 2,
                "startSymbol": "none",
                "startSymbolSize": 5,
                "endSymbol": "arrow",
                "endSymbolSize": 5,
                "showLabel": true,
                "labelPosition": "insideEndTop",
                "labelFont": {
                  "size": 12,
                  "family": "Roboto",
                  "weight": "500",
                  "style": "normal"
                },
                "labelColor": "rgb(255, 255, 255)",
                "enableLabelBackground": true,
                "labelBackground": "#FF6707",
                "latestKey": "maxMoistureThreshold",
                "latestKeyType": "attribute"
              }
            ],
            "dataZoom": false,
            "stack": false,
            "grid": {
              "show": false,
              "backgroundColor": null,
              "borderWidth": 1,
              "borderColor": "#ccc"
            },
            "xAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "bottom",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 10,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "#868D9C",
              "ticksFormat": {},
              "showTicks": false,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": false,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": false,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)"
            },
            "noAggregationBarWidthSettings": {
              "strategy": "group",
              "groupWidth": {
                "relative": true,
                "relativeWidth": 2,
                "absoluteWidth": 1000
              },
              "barWidth": {
                "relative": true,
                "relativeWidth": 2,
                "absoluteWidth": 1000
              }
            },
            "showLegend": false,
            "legendLabelFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "400",
              "lineHeight": "16px"
            },
            "legendLabelColor": "#868D9C",
            "legendConfig": {
              "direction": "column",
              "position": "top",
              "sortDataKeys": false,
              "showMin": false,
              "showMax": false,
              "showAvg": false,
              "showTotal": false,
              "showLatest": false
            },
            "showTooltip": true,
            "tooltipTrigger": "axis",
            "tooltipValueFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "500",
              "lineHeight": "16px"
            },
            "tooltipValueColor": "rgba(0, 0, 0, 0.76)",
            "tooltipValueFormatter": null,
            "tooltipShowDate": true,
            "tooltipDateFormat": {
              "format": null,
              "lastUpdateAgo": false,
              "custom": false,
              "auto": true,
              "autoDateFormatSettings": {
                "millisecond": "MMM dd yyyy HH:mm:ss"
              }
            },
            "tooltipDateFont": {
              "family": "Roboto",
              "size": 11,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "400",
              "lineHeight": "16px"
            },
            "tooltipDateColor": "rgba(0, 0, 0, 0.76)",
            "tooltipDateInterval": false,
            "tooltipBackgroundColor": "rgba(255, 255, 255, 0.76)",
            "tooltipBackgroundBlur": 4,
            "animation": {
              "animation": true,
              "animationThreshold": 2000,
              "animationDuration": 500,
              "animationEasing": "cubicOut",
              "animationDelay": 0,
              "animationDurationUpdate": 300,
              "animationEasingUpdate": "cubicOut",
              "animationDelayUpdate": 0
            },
            "background": {
              "type": "color",
              "color": "#fff",
              "overlay": {
                "enabled": false,
                "color": "rgba(255,255,255,0.72)",
                "blur": 3
              }
            },
            "padding": "0"
          },
          "title": "Statistics",
          "dropShadow": false,
          "enableFullscreen": false,
          "titleStyle": null,
          "mobileHeight": 4,
          "configMode": "basic",
          "actions": {},
          "showTitleIcon": false,
          "titleIcon": "thermostat",
          "iconColor": "#1F6BDD",
          "useDashboardTimewindow": false,
          "displayTimewindow": true,
          "titleFont": {
            "size": 16,
            "sizeUnit": "px",
            "family": "Roboto",
            "weight": "400",
            "style": "normal",
            "lineHeight": "24px"
          },
          "titleColor": null,
          "titleTooltip": "",
          "widgetStyle": {},
          "widgetCss": "",
          "pageSize": 1024,
          "units": "",
          "decimals": null,
          "noDataDisplayMessage": "",
          "timewindowStyle": {
            "showIcon": true,
            "iconSize": "24px",
            "icon": "query_builder",
            "iconPosition": "left",
            "font": {
              "size": 12,
              "sizeUnit": "px",
              "family": "Roboto",
              "weight": "400",
              "style": "normal",
              "lineHeight": "16px"
            },
            "color": "rgba(0, 0, 0, 0.38)",
            "displayTypePrefix": true
          },
          "margin": "0px",
          "borderRadius": "",
          "iconSize": "0px",
          "enableDataExport": false,
          "mobileOrder": 0
        },
        "row": 0,
        "col": 0,
        "id": "f99ce7c5-d0b0-0292-d803-78aba8ba3b31"
      },
      "ba981af4-bfce-68cd-cc3e-3dd4115614ed": {
        "typeFullFqn": "system.map",
        "type": "latest",
        "sizeX": 8.5,
        "sizeY": 6,
        "config": {
          "datasources": [],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1742901574447,
                "endTimeMs": 1742987974447
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "rgba(0, 0, 0, 0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "mapType": "geoMap",
            "layers": [
              {
                "label": "{i18n:widgets.maps.layer.satellite}",
                "provider": "openstreet",
                "layerType": "Esri.WorldImagery"
              },
              {
                "label": "{i18n:widgets.maps.layer.hybrid}",
                "provider": "openstreet",
                "layerType": "Esri.WorldImagery",
                "referenceLayer": "openstreetmap_hybrid"
              }
            ],
            "imageSource": null,
            "markers": [],
            "polygons": [
              {
                "dsType": "entity",
                "dsLabel": "",
                "dsDeviceId": null,
                "dsEntityAliasId": "cd737d26-3068-aae0-d370-c93f8e7e1a00",
                "dsFilterId": null,
                "additionalDataKeys": [
                  {
                    "name": "name",
                    "type": "entityField",
                    "label": "Name",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.4601760333309539
                  },
                  {
                    "name": "cropType",
                    "type": "attribute",
                    "label": "cropType",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.46628418434543506
                  },
                  {
                    "name": "avgMoisture",
                    "type": "timeseries",
                    "label": "avgMoisture",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.7929434969054727
                  },
                  {
                    "name": "minMoistureThreshold",
                    "type": "attribute",
                    "label": "minMoistureThreshold",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.5298517912865661
                  },
                  {
                    "name": "maxMoistureThreshold",
                    "type": "attribute",
                    "label": "maxMoistureThreshold",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.750932505135
                  }
                ],
                "label": {
                  "show": true,
                  "type": "function",
                  "pattern": "${entityName}",
                  "patternFunction": "var html = '<div>';\nhtml += '<div style=\"color: #FFF; font-weight: 600; text-align: center; padding-bottom: 8px;\">${entityName} (${cropType})</div>';\n\nvar avgMoisture = data['avgMoisture'];\nvar avgMoistureText = avgMoisture !== '' ?  Number(avgMoisture).toFixed(1) + '%' : 'n/a';\nvar minMoistureThreshold = data['minMoistureThreshold'];\nvar maxMoistureThreshold = data['maxMoistureThreshold'];\nvar color = '#FFFFFF';\nvar textColor = '#000000';\nif (avgMoisture < minMoistureThreshold || avgMoisture > maxMoistureThreshold) {\n    color = '#D12730';\n    textColor = '#FFFFFF';\n}\n\nhtml += '<div style=\"text-align: center;\"><span style=\"background: ' + color + '; color: ' + textColor + '; border-radius: 8px; padding: 4px;\">'+avgMoistureText+'</span></div>';\n\nhtml += '<div>';\n\nreturn html;"
                },
                "tooltip": {
                  "show": false,
                  "trigger": "click",
                  "autoclose": true,
                  "type": "pattern",
                  "pattern": "<b>${entityName}</b><br/><br/><b>TimeStamp:</b> ${ts:7}",
                  "offsetX": 0,
                  "offsetY": -1
                },
                "click": {
                  "type": "openDashboardState",
                  "targetDashboardStateId": "field",
                  "setEntityId": true,
                  "stateEntityParamName": null,
                  "openRightLayout": false,
                  "openInSeparateDialog": false,
                  "openInPopover": false
                },
                "groups": null,
                "edit": {
                  "enabledActions": [],
                  "attributeScope": "SERVER_SCOPE",
                  "snappable": false
                },
                "fillColor": {
                  "type": "constant",
                  "color": "rgba(51,136,255,0.2)"
                },
                "strokeColor": {
                  "type": "constant",
                  "color": "#3388ff"
                },
                "strokeWeight": 3,
                "polygonKey": {
                  "name": "perimeter",
                  "label": "perimeter",
                  "type": "attribute",
                  "settings": {},
                  "color": "#2196f3"
                }
              }
            ],
            "circles": [],
            "additionalDataSources": [],
            "controlsPosition": "topleft",
            "zoomActions": [
              "scroll",
              "doubleClick",
              "controlButtons"
            ],
            "scales": [
              "metric"
            ],
            "dragModeButton": false,
            "fitMapBounds": true,
            "useDefaultCenterPosition": false,
            "defaultCenterPosition": "0,0",
            "defaultZoomLevel": null,
            "mapPageSize": 16384,
            "mapActionButtons": [],
            "background": {
              "type": "color",
              "color": "#fff",
              "overlay": {
                "enabled": false,
                "color": "rgba(255,255,255,0.72)",
                "blur": 3
              }
            },
            "padding": "0"
          },
          "title": "Map",
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": true,
          "enableFullscreen": true,
          "widgetStyle": {},
          "widgetCss": "",
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "configMode": "basic",
          "titleFont": null,
          "titleColor": null,
          "margin": "0px",
          "borderRadius": "",
          "iconSize": "24px",
          "titleIcon": "map",
          "iconColor": "#1F6BDD",
          "actions": {},
          "enableDataExport": false
        },
        "row": 0,
        "col": 0,
        "id": "ba981af4-bfce-68cd-cc3e-3dd4115614ed"
      },
      "3ae2cf24-0941-03fb-d93e-f25250bf5350": {
        "typeFullFqn": "system.map",
        "type": "latest",
        "sizeX": 8.5,
        "sizeY": 6,
        "config": {
          "datasources": [],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1742901977434,
                "endTimeMs": 1742988377434
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "rgba(0, 0, 0, 0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "mapType": "geoMap",
            "layers": [
              {
                "label": "{i18n:widgets.maps.layer.satellite}",
                "provider": "openstreet",
                "layerType": "Esri.WorldImagery"
              },
              {
                "label": "{i18n:widgets.maps.layer.hybrid}",
                "provider": "openstreet",
                "layerType": "Esri.WorldImagery",
                "referenceLayer": "openstreetmap_hybrid"
              }
            ],
            "imageSource": null,
            "markers": [
              {
                "dsType": "entity",
                "dsLabel": "",
                "dsDeviceId": null,
                "dsEntityAliasId": "aa55618a-278a-0776-832d-fa1fe5769a2a",
                "dsFilterId": null,
                "additionalDataKeys": [
                  {
                    "name": "type",
                    "type": "entityField",
                    "label": "type",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.4920156422018893,
                    "aggregationType": null,
                    "units": null,
                    "decimals": null,
                    "funcBody": null,
                    "usePostProcessing": null,
                    "postFuncBody": null
                  },
                  {
                    "name": "moisture",
                    "type": "timeseries",
                    "label": "moisture",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.7377089925576237
                  },
                  {
                    "name": "minMoistureThreshold",
                    "type": "attribute",
                    "label": "minMoistureThreshold",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.5240998179015635
                  },
                  {
                    "name": "maxMoistureThreshold",
                    "type": "attribute",
                    "label": "maxMoistureThreshold",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.2745383225592155
                  }
                ],
                "label": {
                  "show": false,
                  "type": "pattern",
                  "pattern": "",
                  "patternFunction": null
                },
                "tooltip": {
                  "show": false,
                  "trigger": "click",
                  "autoclose": true,
                  "type": "pattern",
                  "pattern": "",
                  "offsetX": 0,
                  "offsetY": -1,
                  "patternFunction": null,
                  "tagActions": null
                },
                "click": {
                  "type": "openDashboardState",
                  "targetDashboardStateId": "moisture_sensor_details",
                  "setEntityId": true,
                  "stateEntityParamName": null,
                  "openRightLayout": false,
                  "popoverPreferredPlacement": "top",
                  "popoverHideOnClickOutside": true,
                  "popoverHideDashboardToolbar": true,
                  "popoverWidth": "300px",
                  "popoverHeight": "250px",
                  "popoverStyle": {},
                  "openInSeparateDialog": false,
                  "openInPopover": true
                },
                "groups": null,
                "edit": {
                  "enabledActions": [],
                  "attributeScope": "SERVER_SCOPE",
                  "snappable": false
                },
                "xKey": {
                  "name": "latitude",
                  "label": "latitude",
                  "type": "attribute",
                  "settings": {},
                  "color": "#2196f3"
                },
                "yKey": {
                  "name": "longitude",
                  "label": "longitude",
                  "type": "attribute",
                  "settings": {},
                  "color": "#2196f3"
                },
                "markerType": "image",
                "markerShape": {
                  "shape": "markerShape1",
                  "size": 34,
                  "color": {
                    "type": "constant",
                    "color": "#307FE5"
                  }
                },
                "markerIcon": {
                  "iconContainer": "iconContainer1",
                  "icon": "mdi:lightbulb-on",
                  "size": 48,
                  "color": {
                    "type": "constant",
                    "color": "#307FE5"
                  }
                },
                "markerImage": {
                  "type": "function",
                  "image": "/assets/markers/shape1.svg",
                  "imageSize": 34,
                  "imageFunction": "var type = data['type'];\nif (type === 'SI Soil Moisture Sensor') {\n    var text = getSensorText();\n    var defaultMarkerWidth = 20;\n    var width = defaultMarkerWidth + getTextWidth(text);\n    var svgStr = getSensorSvg(width, text);\n    var encodedSvg = encodeURIComponent(svgStr);\n    var svgUrl = 'data:image/svg+xml,' + encodedSvg;\n    return {\n        url: svgUrl,\n        size: width,\n        markerOffset: [defaultMarkerWidth / 2, defaultMarkerWidth / 2],\n        tooltipOffset: [width * 0.5 - defaultMarkerWidth / 2, - (defaultMarkerWidth / 2)]\n    };\n} else {\n    return null;\n}\n\nfunction getSensorSvg(width, text) {\n    var moisture = data['moisture'];\n    var minMoistureThreshold = data['minMoistureThreshold'];\n    var maxMoistureThreshold = data['maxMoistureThreshold'];\n    var color = '#FFFFFF';\n    var textColor = '#000000';\n    if (typeof moisture === 'number' && (moisture < minMoistureThreshold || moisture > maxMoistureThreshold)) {\n        color = '#D12730';\n        textColor = '#FFFFFF';\n    }\n    var background = getSensorBackground(color, width);\n    var svgWidth = width;\n    var svgHeight = 20;\n    var opacity = 1;\n    var sensorSvg = '<svg opacity=\"' + opacity + '\" width=\"' + svgWidth + '\" height=\"' + svgHeight + '\" viewBox=\"0 0 ' + svgWidth + ' ' + svgHeight + '\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">' +\n                    background;\n    if (text !== '') {\n        var transform = '8 0';\n        sensorSvg += '<text transform=\"translate(' + transform + ')\" fill=\"'+textColor+'\" xml:space=\"preserve\" style=\"white-space: pre\" font-family=\"Roboto\" font-size=\"12\" font-weight=\"600\" letter-spacing=\"0em\"><tspan x=\"0.10664\" y=\"14.2637\">' + text + '</tspan></text>';\n    }\n    sensorSvg += '</svg>';\n    return sensorSvg;    \n}\n\nfunction getSensorBackground(color, width) {\n     if (width === 20) {\n         return '<circle cx=\"10\" cy=\"10\" r=\"10\" fill=\"'+ color +'\"/>';\n     } else {\n         return '<circle cx=\"10\" cy=\"10\" r=\"10\" fill=\"'+ color +'\"/>' + \n                '<circle cx=\"' + (width - 35) + '\" cy=\"10\" r=\"10\" fill=\"'+ color +'\"/>' +\n                '<rect x=\"10\" y=\"0\" width=\"' + (width - 45) + '\" height=\"20\" rx=\"1\" fill=\"'+ color +'\"/>';\n     }\n}\n\nfunction getSensorText() {\n    if (data['moisture']) {\n        var moisture = Number(data['moisture']).toFixed(1);\n        return moisture + '%';\n    } else {\n        return '';\n    }\n}\n\nfunction getTextWidth(text) {\n    var width = 0;\n    for (var i = 0; i < text.length; i++) {\n        var charWidth;\n        var character = text.charAt(i);\n        if (character === ' ') {\n            charWidth = 8;\n        } else if (character === '-') {\n            charWidth = 7;\n        } else if (character === '°') {\n            charWidth = 5;\n        } else if (!isNaN(character * 1)){\n            charWidth = 9;\n        } else {\n            // Upper case\n            if (character === character.toUpperCase()) {\n                charWidth = 12;\n            // Lower case    \n            } else {\n                charWidth = 10;\n            }\n        }\n        width += charWidth;\n    }\n    return width;\n}",
                  "images": null
                },
                "markerOffsetX": 0.5,
                "markerOffsetY": 1,
                "markerClustering": {
                  "enable": false,
                  "zoomOnClick": true,
                  "maxZoom": null,
                  "maxClusterRadius": 80,
                  "zoomAnimation": true,
                  "showCoverageOnHover": true,
                  "spiderfyOnMaxZoom": false,
                  "chunkedLoad": false,
                  "lazyLoad": true,
                  "useClusterMarkerColorFunction": false,
                  "clusterMarkerColorFunction": null
                }
              }
            ],
            "polygons": [
              {
                "dsType": "entity",
                "dsLabel": "",
                "dsDeviceId": null,
                "dsEntityAliasId": "39927380-423a-872a-0843-de34f99264ad",
                "dsFilterId": null,
                "additionalDataKeys": [
                  {
                    "name": "name",
                    "type": "entityField",
                    "label": "Name",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.9160588481387533
                  },
                  {
                    "name": "type",
                    "type": "entityField",
                    "label": "type",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.3448235727091016,
                    "aggregationType": null,
                    "units": null,
                    "decimals": null,
                    "funcBody": null,
                    "usePostProcessing": null,
                    "postFuncBody": null
                  }
                ],
                "label": {
                  "show": false,
                  "type": "pattern",
                  "pattern": "${entityName}"
                },
                "tooltip": {
                  "show": false,
                  "trigger": "click",
                  "autoclose": true,
                  "type": "pattern",
                  "pattern": "<b>${entityName}</b><br/><br/><b>TimeStamp:</b> ${ts:7}",
                  "offsetX": 0,
                  "offsetY": -1
                },
                "click": {
                  "type": "doNothing"
                },
                "groups": null,
                "edit": {
                  "enabledActions": [],
                  "attributeScope": "SERVER_SCOPE",
                  "snappable": false
                },
                "fillColor": {
                  "type": "constant",
                  "color": "rgba(51,136,255,0.2)"
                },
                "strokeColor": {
                  "type": "constant",
                  "color": "#3388ff"
                },
                "strokeWeight": 3,
                "polygonKey": {
                  "name": "perimeter",
                  "label": "perimeter",
                  "type": "attribute",
                  "settings": {},
                  "color": "#2196f3"
                }
              }
            ],
            "circles": [],
            "additionalDataSources": [],
            "controlsPosition": "topleft",
            "zoomActions": [
              "scroll",
              "doubleClick",
              "controlButtons"
            ],
            "scales": [
              "metric"
            ],
            "dragModeButton": false,
            "fitMapBounds": false,
            "useDefaultCenterPosition": false,
            "defaultCenterPosition": "0,0",
            "defaultZoomLevel": 15,
            "mapPageSize": 16384,
            "mapActionButtons": [],
            "background": {
              "type": "color",
              "color": "#fff",
              "overlay": {
                "enabled": false,
                "color": "rgba(255,255,255,0.72)",
                "blur": 3
              }
            },
            "padding": "0"
          },
          "title": "Map",
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": true,
          "widgetStyle": {},
          "widgetCss": "",
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "configMode": "basic",
          "titleFont": null,
          "titleColor": null,
          "margin": "0px",
          "borderRadius": "",
          "iconSize": "24px",
          "titleIcon": "map",
          "iconColor": "#1F6BDD",
          "actions": {},
          "enableDataExport": false
        },
        "row": 0,
        "col": 0,
        "id": "3ae2cf24-0941-03fb-d93e-f25250bf5350"
      },
      "f21e048f-cbeb-3a95-2751-e1afe17af804": {
        "typeFullFqn": "system.map",
        "type": "latest",
        "sizeX": 8.5,
        "sizeY": 6,
        "config": {
          "datasources": [],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1742903170580,
                "endTimeMs": 1742989570580
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "rgba(0, 0, 0, 0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "mapType": "geoMap",
            "layers": [
              {
                "label": "{i18n:widgets.maps.layer.roadmap}",
                "provider": "openstreet",
                "layerType": "OpenStreetMap.HOT",
                "referenceLayer": null
              },
              {
                "label": "{i18n:widgets.maps.layer.satellite}",
                "provider": "openstreet",
                "layerType": "Esri.WorldImagery"
              },
              {
                "label": "{i18n:widgets.maps.layer.hybrid}",
                "provider": "openstreet",
                "layerType": "Esri.WorldImagery",
                "referenceLayer": "openstreetmap_hybrid"
              }
            ],
            "imageSource": null,
            "markers": [],
            "polygons": [
              {
                "dsType": "entity",
                "dsLabel": "",
                "dsDeviceId": null,
                "dsEntityAliasId": "39927380-423a-872a-0843-de34f99264ad",
                "dsFilterId": null,
                "additionalDataKeys": [
                  {
                    "name": "name",
                    "type": "entityField",
                    "label": "Name",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.010240480387154305
                  }
                ],
                "label": {
                  "show": false,
                  "type": "pattern",
                  "pattern": "${entityName}"
                },
                "tooltip": {
                  "show": false,
                  "trigger": "click",
                  "autoclose": true,
                  "type": "pattern",
                  "pattern": "<b>${entityName}</b><br/><br/><b>TimeStamp:</b> ${ts:7}",
                  "offsetX": 0,
                  "offsetY": -1
                },
                "click": {
                  "type": "doNothing"
                },
                "groups": null,
                "edit": {
                  "enabledActions": [
                    "add",
                    "edit",
                    "move",
                    "remove"
                  ],
                  "attributeScope": "SERVER_SCOPE",
                  "snappable": false
                },
                "fillColor": {
                  "type": "constant",
                  "color": "rgba(51,136,255,0.2)"
                },
                "strokeColor": {
                  "type": "constant",
                  "color": "#3388ff"
                },
                "strokeWeight": 3,
                "polygonKey": {
                  "name": "perimeter",
                  "label": "perimeter",
                  "type": "attribute",
                  "settings": {},
                  "color": "#2196f3"
                }
              }
            ],
            "circles": [],
            "additionalDataSources": [],
            "controlsPosition": "topleft",
            "zoomActions": [
              "scroll",
              "doubleClick",
              "controlButtons"
            ],
            "scales": [
              "metric"
            ],
            "dragModeButton": false,
            "fitMapBounds": true,
            "useDefaultCenterPosition": false,
            "defaultCenterPosition": "49.348472, 32.108611",
            "defaultZoomLevel": 14,
            "mapPageSize": 16384,
            "mapActionButtons": [],
            "background": {
              "type": "color",
              "color": "#fff",
              "overlay": {
                "enabled": false,
                "color": "rgba(255,255,255,0.72)",
                "blur": 3
              }
            },
            "padding": "0"
          },
          "title": "Map",
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {},
          "widgetCss": "",
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "configMode": "basic",
          "titleFont": null,
          "titleColor": null,
          "margin": "0px",
          "borderRadius": "",
          "iconSize": "24px",
          "titleIcon": "map",
          "iconColor": "#1F6BDD",
          "actions": {},
          "enableDataExport": false
        },
        "row": 0,
        "col": 0,
        "id": "f21e048f-cbeb-3a95-2751-e1afe17af804"
      },
      "59fbbebb-a7dc-8990-547c-8f0dc27738fa": {
        "typeFullFqn": "system.map",
        "type": "latest",
        "sizeX": 8.5,
        "sizeY": 6,
        "config": {
          "datasources": [],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1742909384356,
                "endTimeMs": 1742995784356
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "rgba(0, 0, 0, 0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "mapType": "geoMap",
            "layers": [
              {
                "label": "{i18n:widgets.maps.layer.satellite}",
                "provider": "openstreet",
                "layerType": "Esri.WorldImagery"
              },
              {
                "label": "{i18n:widgets.maps.layer.hybrid}",
                "provider": "openstreet",
                "layerType": "Esri.WorldImagery",
                "referenceLayer": "openstreetmap_hybrid"
              }
            ],
            "imageSource": null,
            "markers": [
              {
                "dsType": "entity",
                "dsLabel": "",
                "dsDeviceId": null,
                "dsEntityAliasId": "61ca5437-6539-88f4-4f59-a9508eefdf1e",
                "dsFilterId": null,
                "additionalDataKeys": [
                  {
                    "name": "type",
                    "type": "entityField",
                    "label": "type",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.5334895778829469,
                    "aggregationType": null,
                    "units": null,
                    "decimals": null,
                    "funcBody": null,
                    "usePostProcessing": null,
                    "postFuncBody": null
                  },
                  {
                    "name": "moisture",
                    "type": "timeseries",
                    "label": "moisture",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.8966400182081038
                  }
                ],
                "label": {
                  "show": false,
                  "type": "pattern",
                  "pattern": "",
                  "patternFunction": null
                },
                "tooltip": {
                  "show": false,
                  "trigger": "click",
                  "autoclose": true,
                  "type": "pattern",
                  "pattern": "",
                  "offsetX": 0,
                  "offsetY": -1,
                  "patternFunction": null,
                  "tagActions": null
                },
                "click": {
                  "type": "doNothing"
                },
                "groups": null,
                "edit": {
                  "enabledActions": [
                    "move"
                  ],
                  "attributeScope": "SERVER_SCOPE",
                  "snappable": false
                },
                "xKey": {
                  "name": "latitude",
                  "label": "latitude",
                  "type": "attribute",
                  "settings": {},
                  "color": "#2196f3"
                },
                "yKey": {
                  "name": "longitude",
                  "label": "longitude",
                  "type": "attribute",
                  "settings": {},
                  "color": "#2196f3"
                },
                "markerType": "image",
                "markerShape": {
                  "shape": "markerShape1",
                  "size": 34,
                  "color": {
                    "type": "constant",
                    "color": "#307FE5"
                  }
                },
                "markerIcon": {
                  "iconContainer": "iconContainer1",
                  "icon": "mdi:lightbulb-on",
                  "size": 48,
                  "color": {
                    "type": "constant",
                    "color": "#307FE5"
                  }
                },
                "markerImage": {
                  "type": "function",
                  "image": "/assets/markers/shape1.svg",
                  "imageSize": 34,
                  "imageFunction": "var type = data['type'];\nif (type === 'SI Soil Moisture Sensor') {\n    var text = getSensorText();\n    var defaultMarkerWidth = 20;\n    var width = defaultMarkerWidth + getTextWidth(text);\n    var svgStr = getSensorSvg(width, text);\n    var encodedSvg = encodeURIComponent(svgStr);\n    var svgUrl = 'data:image/svg+xml,' + encodedSvg;\n    return {\n        url: svgUrl,\n        size: width,\n        markerOffset: [defaultMarkerWidth / 2, defaultMarkerWidth / 2],\n        tooltipOffset: [width * 0.5 - defaultMarkerWidth / 2, - (defaultMarkerWidth / 2)]\n    };\n} else {\n    return null;\n}\n\nfunction getSensorSvg(width, text) {\n    var color = '#FFFFFF';\n    var background = getSensorBackground(color, width);\n    var svgWidth = width;\n    var svgHeight = 20;\n    var opacity = 1;\n    var sensorSvg = '<svg opacity=\"' + opacity + '\" width=\"' + svgWidth + '\" height=\"' + svgHeight + '\" viewBox=\"0 0 ' + svgWidth + ' ' + svgHeight + '\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">' +\n                    background;\n    if (text !== '') {\n        var transform = '8 0';\n        sensorSvg += '<text transform=\"translate(' + transform + ')\" fill=\"black\" xml:space=\"preserve\" style=\"white-space: pre\" font-family=\"Roboto\" font-size=\"12\" font-weight=\"600\" letter-spacing=\"0em\"><tspan x=\"0.10664\" y=\"14.2637\">' + text + '</tspan></text>';\n    }\n    sensorSvg += '</svg>';\n    return sensorSvg;    \n}\n\nfunction getSensorBackground(color, width) {\n     if (width === 20) {\n         return '<circle cx=\"10\" cy=\"10\" r=\"10\" fill=\"'+ color +'\"/>';\n     } else {\n         return '<circle cx=\"10\" cy=\"10\" r=\"10\" fill=\"'+ color +'\"/>' + \n                '<circle cx=\"' + (width - 35) + '\" cy=\"10\" r=\"10\" fill=\"'+ color +'\"/>' +\n                '<rect x=\"10\" y=\"0\" width=\"' + (width - 45) + '\" height=\"20\" rx=\"1\" fill=\"'+ color +'\"/>';\n     }\n}\n\nfunction getSensorText() {\n    if (data['moisture']) {\n        var moisture = Number(data['moisture']);\n        return moisture + '%';\n    } else {\n        return '';\n    }\n}\n\nfunction getTextWidth(text) {\n    var width = 0;\n    for (var i = 0; i < text.length; i++) {\n        var charWidth;\n        var character = text.charAt(i);\n        if (character === ' ') {\n            charWidth = 8;\n        } else if (character === '-') {\n            charWidth = 7;\n        } else if (character === '°') {\n            charWidth = 5;\n        } else if (!isNaN(character * 1)){\n            charWidth = 9;\n        } else {\n            // Upper case\n            if (character === character.toUpperCase()) {\n                charWidth = 12;\n            // Lower case    \n            } else {\n                charWidth = 10;\n            }\n        }\n        width += charWidth;\n    }\n    return width;\n}",
                  "images": null
                },
                "markerOffsetX": 0.5,
                "markerOffsetY": 1,
                "markerClustering": {
                  "enable": false,
                  "zoomOnClick": true,
                  "maxZoom": null,
                  "maxClusterRadius": 80,
                  "zoomAnimation": true,
                  "showCoverageOnHover": true,
                  "spiderfyOnMaxZoom": false,
                  "chunkedLoad": false,
                  "lazyLoad": true,
                  "useClusterMarkerColorFunction": false,
                  "clusterMarkerColorFunction": null
                }
              }
            ],
            "polygons": [
              {
                "dsType": "entity",
                "dsLabel": "",
                "polygonKey": {
                  "name": "perimeter",
                  "label": "perimeter",
                  "type": "attribute",
                  "settings": {},
                  "color": "#2196f3"
                },
                "fillColor": {
                  "type": "constant",
                  "color": "rgba(51,136,255,0.2)"
                },
                "strokeColor": {
                  "type": "constant",
                  "color": "#3388ff"
                },
                "strokeWeight": 3,
                "label": {
                  "show": false,
                  "type": "pattern",
                  "pattern": "${entityName}"
                },
                "tooltip": {
                  "show": false,
                  "trigger": "click",
                  "autoclose": true,
                  "type": "pattern",
                  "pattern": "<b>${entityName}</b><br/><br/><b>TimeStamp:</b> ${ts:7}",
                  "offsetX": 0,
                  "offsetY": -1
                },
                "click": {
                  "type": "doNothing"
                },
                "edit": {
                  "enabledActions": [],
                  "attributeScope": "SERVER_SCOPE",
                  "snappable": false
                },
                "dsEntityAliasId": "7473a7a0-136a-63da-f2ca-f249a1336745"
              }
            ],
            "circles": [],
            "additionalDataSources": [],
            "controlsPosition": "topleft",
            "zoomActions": [
              "scroll",
              "doubleClick",
              "controlButtons"
            ],
            "scales": [
              "metric"
            ],
            "dragModeButton": false,
            "fitMapBounds": true,
            "useDefaultCenterPosition": false,
            "defaultCenterPosition": "49.348472, 32.108611",
            "defaultZoomLevel": 15,
            "mapPageSize": 16384,
            "mapActionButtons": [],
            "background": {
              "type": "color",
              "color": "#fff",
              "overlay": {
                "enabled": false,
                "color": "rgba(255,255,255,0.72)",
                "blur": 3
              }
            },
            "padding": "0"
          },
          "title": "Map",
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {},
          "widgetCss": "",
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "configMode": "basic",
          "titleFont": null,
          "titleColor": null,
          "margin": "0px",
          "borderRadius": "",
          "iconSize": "24px",
          "titleIcon": "map",
          "iconColor": "#1F6BDD",
          "actions": {},
          "enableDataExport": false
        },
        "row": 0,
        "col": 0,
        "id": "59fbbebb-a7dc-8990-547c-8f0dc27738fa"
      }
    },
    "states": {
      "default": {
        "name": "Irrigation Management",
        "root": true,
        "layouts": {
          "main": {
            "widgets": {
              "8ce15aad-9ab2-55ce-2628-a663814d27b1": {
                "sizeX": 12,
                "sizeY": 6,
                "row": 0,
                "col": 12,
                "mobileOrder": 1,
                "mobileHeight": 6
              },
              "84801b7f-bcd4-9658-65bc-b753bee0df9c": {
                "sizeX": 12,
                "sizeY": 6,
                "mobileOrder": 0,
                "mobileHeight": 4,
                "row": 6,
                "col": 12
              },
              "ba981af4-bfce-68cd-cc3e-3dd4115614ed": {
                "sizeX": 12,
                "sizeY": 12,
                "mobileOrder": 2,
                "mobileHeight": 6,
                "resizable": true,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#f9fafe",
              "columns": 24,
              "margin": 10,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": false,
              "mobileRowHeight": 70,
              "outerMargin": true,
              "layoutType": "default"
            }
          }
        }
      },
      "field": {
        "name": "${entityName}",
        "root": false,
        "layouts": {
          "main": {
            "widgets": {
              "a6b597ee-cb21-ee9f-dc98-8673f1d976f1": {
                "sizeX": 18,
                "sizeY": 10,
                "row": 0,
                "col": 14,
                "mobileOrder": 5
              },
              "8fcd3aed-58d0-0cad-cf63-3a08e1be40a9": {
                "sizeX": 14,
                "sizeY": 12,
                "row": 10,
                "col": 0,
                "mobileOrder": 7,
                "mobileHeight": 4
              },
              "fd1083dd-fad3-90c3-8eba-8a8fe0f1d93e": {
                "sizeX": 14,
                "sizeY": 4,
                "row": 6,
                "col": 0,
                "mobileOrder": 3
              },
              "e18122c8-7973-5206-792a-cfa7f924a7b0": {
                "sizeX": 16,
                "sizeY": 12,
                "row": 10,
                "col": 32,
                "mobileOrder": 6
              },
              "aaccdb0d-72ff-9f2c-e4ae-55077480a3e6": {
                "sizeX": 14,
                "sizeY": 2,
                "row": 0,
                "col": 0,
                "mobileOrder": 0
              },
              "55f1e5e9-a36c-313f-bd89-131670979b38": {
                "sizeX": 7,
                "sizeY": 4,
                "row": 2,
                "col": 0,
                "mobileOrder": 1
              },
              "2dc3be15-d850-c363-6c49-e511d3778510": {
                "sizeX": 7,
                "sizeY": 4,
                "row": 2,
                "col": 7,
                "mobileOrder": 2
              },
              "7dadc15d-b85b-8ef0-5de1-6c23d0acea73": {
                "sizeX": 16,
                "sizeY": 10,
                "mobileOrder": 4,
                "mobileHeight": null,
                "row": 0,
                "col": 32
              },
              "3ae2cf24-0941-03fb-d93e-f25250bf5350": {
                "sizeX": 18,
                "sizeY": 12,
                "mobileOrder": 8,
                "resizable": true,
                "row": 10,
                "col": 14
              }
            },
            "gridSettings": {
              "backgroundColor": "#f9fafe",
              "columns": 48,
              "margin": 10,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": false,
              "mobileRowHeight": 70,
              "outerMargin": true,
              "layoutType": "default"
            }
          }
        }
      },
      "setup_field_polygon": {
        "name": "Setup field polygon",
        "root": false,
        "layouts": {
          "main": {
            "widgets": {
              "f21e048f-cbeb-3a95-2751-e1afe17af804": {
                "sizeX": 24,
                "sizeY": 10,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#ffffff",
              "columns": 24,
              "margin": 0,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": true,
              "mobileRowHeight": 70,
              "outerMargin": true,
              "layoutType": "default"
            }
          }
        }
      },
      "setup_sensor_location": {
        "name": "Setup Sensor Location",
        "root": false,
        "layouts": {
          "main": {
            "widgets": {
              "59fbbebb-a7dc-8990-547c-8f0dc27738fa": {
                "sizeX": 24,
                "sizeY": 10,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#ffffff",
              "columns": 24,
              "margin": 0,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": true,
              "mobileRowHeight": 70,
              "outerMargin": true,
              "layoutType": "default"
            }
          }
        }
      },
      "moisture_sensor_details": {
        "name": "Moisture sensor details",
        "root": false,
        "layouts": {
          "main": {
            "widgets": {
              "1f66e5cb-041d-1a45-1abf-6f6ae3d91872": {
                "sizeX": 24,
                "sizeY": 11,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#ffffff",
              "columns": 24,
              "margin": 0,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": true,
              "mobileRowHeight": 70,
              "outerMargin": true,
              "layoutType": "default"
            }
          }
        }
      },
      "moisture_sensor_details_brief": {
        "name": "Moisture sensor details brief",
        "root": false,
        "layouts": {
          "main": {
            "widgets": {
              "b5c71687-c799-9b94-00f1-958cf76f006c": {
                "sizeX": 24,
                "sizeY": 9,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#ffffff",
              "columns": 24,
              "margin": 0,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": true,
              "mobileRowHeight": 70,
              "outerMargin": true,
              "layoutType": "default"
            }
          }
        }
      },
      "field_alarms": {
        "name": "Field Alarms",
        "root": false,
        "layouts": {
          "main": {
            "widgets": {
              "2dcc4fce-85e4-e67d-4467-7bd38e579c5c": {
                "sizeX": 24,
                "sizeY": 11,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#ffffff",
              "columns": 24,
              "margin": 0,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": true,
              "mobileRowHeight": 70,
              "outerMargin": true,
              "layoutType": "default"
            }
          }
        }
      },
      "moisture_sensor_details_moisture": {
        "name": "Moisture sensor details moisture",
        "root": false,
        "layouts": {
          "main": {
            "widgets": {
              "f99ce7c5-d0b0-0292-d803-78aba8ba3b31": {
                "sizeX": 24,
                "sizeY": 11,
                "mobileOrder": 0,
                "mobileHeight": 4,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#ffffff",
              "columns": 24,
              "margin": 0,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": true,
              "mobileRowHeight": 70,
              "outerMargin": true,
              "layoutType": "default"
            }
          }
        }
      },
      "moisture_sensor_details_alarms": {
        "name": "Moisture sensor details alarms",
        "root": false,
        "layouts": {
          "main": {
            "widgets": {
              "aac826ba-ba9f-7e72-752f-3a0a6b9cddb5": {
                "sizeX": 24,
                "sizeY": 9,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#ffffff",
              "columns": 24,
              "margin": 0,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": true,
              "mobileRowHeight": 70,
              "outerMargin": true,
              "layoutType": "default"
            }
          }
        }
      },
      "sensor_alarms": {
        "name": "Sensor alarms",
        "root": false,
        "layouts": {
          "main": {
            "widgets": {
              "8923d335-d974-2aaa-8c40-3eafec174a58": {
                "sizeX": 24,
                "sizeY": 11,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#ffffff",
              "columns": 24,
              "margin": 0,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": true,
              "mobileRowHeight": 70,
              "outerMargin": true,
              "layoutType": "default"
            }
          }
        }
      }
    },
    "entityAliases": {
      "cd737d26-3068-aae0-d370-c93f8e7e1a00": {
        "id": "cd737d26-3068-aae0-d370-c93f8e7e1a00",
        "alias": "Fields",
        "filter": {
          "type": "assetType",
          "resolveMultiple": true,
          "assetNameFilter": "",
          "assetTypes": [
            "SI Field"
          ]
        }
      },
      "39927380-423a-872a-0843-de34f99264ad": {
        "id": "39927380-423a-872a-0843-de34f99264ad",
        "alias": "Current field",
        "filter": {
          "type": "stateEntity",
          "resolveMultiple": false,
          "stateEntityParamName": null,
          "defaultStateEntity": null
        }
      },
      "4ed5e77d-3c18-a442-e616-14f73013a686": {
        "id": "4ed5e77d-3c18-a442-e616-14f73013a686",
        "alias": "Irrigation schedule",
        "filter": {
          "type": "schedulerEvent",
          "resolveMultiple": true,
          "originatorStateEntity": true,
          "stateEntityParamName": null,
          "defaultStateEntity": null,
          "originator": null,
          "eventType": "START_IRRIGATION"
        }
      },
      "aa55618a-278a-0776-832d-fa1fe5769a2a": {
        "id": "aa55618a-278a-0776-832d-fa1fe5769a2a",
        "alias": "Moisture Sensors",
        "filter": {
          "type": "deviceSearchQuery",
          "resolveMultiple": true,
          "rootStateEntity": true,
          "stateEntityParamName": null,
          "defaultStateEntity": null,
          "rootEntity": null,
          "direction": "FROM",
          "maxLevel": 1,
          "fetchLastLevelOnly": false,
          "relationType": null,
          "deviceTypes": [
            "SI Soil Moisture Sensor"
          ]
        }
      },
      "7473a7a0-136a-63da-f2ca-f249a1336745": {
        "id": "7473a7a0-136a-63da-f2ca-f249a1336745",
        "alias": "Moisture Sensor Field",
        "filter": {
          "type": "assetSearchQuery",
          "resolveMultiple": true,
          "rootStateEntity": true,
          "stateEntityParamName": null,
          "defaultStateEntity": null,
          "rootEntity": null,
          "direction": "TO",
          "maxLevel": 1,
          "fetchLastLevelOnly": false,
          "relationType": null,
          "assetTypes": [
            "SI Field"
          ]
        }
      },
      "61ca5437-6539-88f4-4f59-a9508eefdf1e": {
        "id": "61ca5437-6539-88f4-4f59-a9508eefdf1e",
        "alias": "Current sensor",
        "filter": {
          "type": "stateEntity",
          "resolveMultiple": false,
          "stateEntityParamName": null,
          "defaultStateEntity": null
        }
      }
    },
    "filters": {},
    "timewindow": {
      "hideAggregation": false,
      "hideAggInterval": false,
      "hideTimezone": false,
      "selectedTab": 0,
      "realtime": {
        "realtimeType": 0,
        "timewindowMs": 604800000,
        "quickInterval": "CURRENT_DAY",
        "interval": 1800000
      },
      "aggregation": {
        "type": "AVG",
        "limit": 25000
      }
    },
    "settings": {
      "stateControllerId": "entity",
      "showTitle": false,
      "showDashboardsSelect": false,
      "showEntitiesSelect": false,
      "showDashboardTimewindow": false,
      "showDashboardExport": true,
      "toolbarAlwaysOpen": true,
      "titleColor": "rgba(0,0,0,0.870588)",
      "showDashboardLogo": false,
      "dashboardLogoUrl": null,
      "hideToolbar": false,
      "showFilters": false,
      "showUpdateDashboardImage": false,
      "dashboardCss": ".tb-widget-container > .tb-widget {\n    border-radius: 8px;\n    box-shadow: 0px 4px 10px rgba(23, 33, 90, 0.08);\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget {\n    color: #868D9C !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-header-cell {\n    color: #868D9C !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-cell {\n    color: #868D9C !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-header-cell .mat-sort-header-arrow {\n    color: #868D9C !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-input-element::placeholder {\n    color: #868D9C !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-input-element::-moz-placeholder {\n    color: #868D9C !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-input-element::-webkit-input-placeholder {\n    color: #868D9C !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-input-element:-ms-input-placeholder {\n    color: #868D9C !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-cell .mdc-checkbox__native-control:not(:indeterminate):not(:checked)~.mdc-checkbox__background, .tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-header-cell .mdc-checkbox__native-control:not(:indeterminate):not(:checked)~.mdc-checkbox__background {\n    border-color : #868D9C !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-cell button.mat-mdc-icon-button mat-icon {\n    color: #868D9C !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-paginator {\n    color: #868D9C !important;\n}\n\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-paginator button.mat-mdc-icon-button {\n    color: #868D9C !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-paginator .mat-mdc-select-value {\n    color: #868D9C !important;\n}\n"
    }
  },
  "name": "Irrigation management",
  "resources": [
    {
      "link": "/api/images/system/smart-irrigation.jpg",
      "title": "\"Smart irrigation\" dashboard image",
      "type": "IMAGE",
      "subType": "IMAGE",
      "fileName": "smart-irrigation.jpg",
      "publicResourceKey": "m2u11qupuwKHbsybQiIc4KjdZP2UpcZv",
      "mediaType": "image/jpeg",
      "data": "",
      "public": true
    }
  ]
}
