{
  "title": "Waste management administration",
  "image": "tb-image;/api/images/system/waste-management-2.jpg",
  "mobileHide": false,
  "mobileOrder": null,
  "configuration": {
    "description": "",
    "widgets": {
      "6743d611-3f49-5caf-4e28-c06eeebbe225": {
        "type": "latest",
        "sizeX": 5,
        "sizeY": 3.5,
        "config": {
          "datasources": [
            {
              "type": "entityCount",
              "name": null,
              "entityAliasId": "6ee2c775-15f1-e7dc-a368-12a263215530",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "count",
                  "type": "count",
                  "label": "count",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.5938525025758234
                }
              ]
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "bbd8598b-83a5-5da8-43d3-4fd989919131",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "displayFullBins",
                  "type": "attribute",
                  "label": "displayFullBins",
                  "color": "#4caf50",
                  "settings": {},
                  "_hash": 0.33612633337924147
                },
                {
                  "name": "displayLowBatteryBins",
                  "type": "attribute",
                  "label": "displayLowBatteryBins",
                  "color": "#f44336",
                  "settings": {},
                  "_hash": 0.1993674121509843
                },
                {
                  "name": "displayOfflineBins",
                  "type": "attribute",
                  "label": "displayOfflineBins",
                  "color": "#ffc107",
                  "settings": {},
                  "_hash": 0.8371334910835757
                }
              ]
            }
          ],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1677748441199,
                "endTimeMs": 1677834841199
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "useMarkdownTextFunction": true,
            "markdownTextFunction": "let value = '-';\nlet isCardSelected = false;\nif (data.length) {\n    value = data[0].count;\n    if (data[1]) {\n        const displayFullBins = data[1].displayFullBins && data[1].displayFullBins !== 'false';\n        const displayLowBatteryBins = data[1].displayLowBatteryBins && data[1].displayLowBatteryBins !== 'false';\n        const displayOfflineBins = data[1].displayOfflineBins && data[1].displayOfflineBins !== 'false';\n        isCardSelected = !displayFullBins && !displayLowBatteryBins && !displayOfflineBins;\n    }\n}\n\nconst icon = 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI0MCIgaGVpZ2h0PSI0MCIgZmlsbD0ibm9uZSI+PHJlY3Qgd2lkdGg9IjQwIiBoZWlnaHQ9IjQwIiBmaWxsPSIjMTk4MDM4IiByeD0iNCIvPjxwYXRoIGZpbGw9IiNmZmYiIGZpbGwtcnVsZT0iZXZlbm9kZCIgZD0ibTEzLjI0OCAxOS42MzggMy44NDMgNC42MzJMMjguMzIgMTAuMzc0Yy44NC0uOTQgMi4xNjIuMDYyIDEuNTAxIDEuMTI2TDE4Ljc3MiAyOS4wOWMtLjg0IDEuMTI3LTEuOTgxIDEuMjUyLTIuOTQyLjEyNWwtNS41ODUtNi45NDhjLTEuMDgtMS42MjggMS42ODItMy45NDQgMy4wMDMtMi42M1oiIGNsaXAtcnVsZT0iZXZlbm9kZCIvPjwvc3ZnPg==';\n\nreturn '<div class=\"bin-card\">' +\n           '<button id=\"total-bins\"' + (isCardSelected ? ' class=\"bin-card-selected\" ' : '') + 'mat-button>' +\n                '<div class=\"bin-card-content flex flex-row\">' +\n                    '<img src=\"data:image/svg+xml;base64,' + icon + '\"/>' +\n                    '<div class=\"bin-card-data flex flex-col\">' +\n                        '<div class=\"bin-card-header\">Total bins</div>' +\n                        '<div class=\"bin-card-value\">' + value + '</div>' +\n                    '</div>' +\n                '</div>' +\n           '</button>' +\n        '</div>';"
          },
          "title": "New Markdown/HTML Card",
          "showTitleIcon": false,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "showLegend": false,
          "enableDataExport": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "useDashboardTimewindow": true,
          "actions": {
            "elementClick": [
              {
                "name": "total-bins",
                "icon": "more_horiz",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "custom",
                "customFunction": "const $injector = widgetContext.$scope.$injector;\nconst attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nconst currentUser = widgetContext.currentUser;\nconst attributesArray = [\n    { key: 'displayFullBins', value: false },\n    { key: 'displayLowBatteryBins', value: false },\n    { key: 'displayOfflineBins', value: false }\n];\nattributeService.saveEntityAttributes({id: currentUser.userId, entityType: 'USER'},\n    'SERVER_SCOPE', attributesArray, {ignoreLoading: true}).subscribe();",
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "9191ed68-b49e-d28d-a2a6-d40253f211ed"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "6743d611-3f49-5caf-4e28-c06eeebbe225",
        "typeFullFqn": "system.cards.markdown_card"
      },
      "81c766cd-ae80-9f5e-fa44-9717cb1ba84f": {
        "type": "latest",
        "sizeX": 5,
        "sizeY": 3.5,
        "config": {
          "datasources": [
            {
              "type": "entityCount",
              "name": null,
              "entityAliasId": "6ee2c775-15f1-e7dc-a368-12a263215530",
              "filterId": "4a477eb5-ba36-f5a8-0723-00d76f5f5687",
              "dataKeys": [
                {
                  "name": "count",
                  "type": "count",
                  "label": "count",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.014129314319205832
                }
              ]
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "bbd8598b-83a5-5da8-43d3-4fd989919131",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "displayFullBins",
                  "type": "attribute",
                  "label": "displayFullBins",
                  "color": "#4caf50",
                  "settings": {},
                  "_hash": 0.25115492510872106
                }
              ]
            }
          ],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1677748441199,
                "endTimeMs": 1677834841199
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "useMarkdownTextFunction": true,
            "markdownTextFunction": "let value = '-';\nlet isCardSelected = false;\nif (data.length) {\n    value = data[0].count;\n    if (data[1]) {\n        isCardSelected = data[1].displayFullBins && data[1].displayFullBins !== 'false';\n    }\n}\n\nconst icon = 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI0MCIgaGVpZ2h0PSI0MCIgZmlsbD0ibm9uZSI+PHJlY3Qgd2lkdGg9IjQwIiBoZWlnaHQ9IjQwIiBmaWxsPSIjRDEyNzMwIiByeD0iNCIvPjxwYXRoIGZpbGw9IiNmZmYiIGZpbGwtcnVsZT0iZXZlbm9kZCIgZD0iTTE3LjI5MyAxMi4yOTNBMSAxIDAgMCAxIDE4IDEyaDRhMSAxIDAgMCAxIDEgMXYxaC02di0xYTEgMSAwIDAgMSAuMjkzLS43MDdaTTE1IDE0di0xYTMgMyAwIDAgMSAzLTNoNGEzIDMgMCAwIDEgMyAzdjFoNC4wNDhjLjUyNiAwIC45NTIuNDQ4Ljk1MiAxcy0uNDI2IDEtLjk1MiAxSDI3djExYTMgMyAwIDAgMS0zIDNoLTdjLS43OTYgMC0yLjU1OS0uMzE2LTMuMTIxLS44NzlBMyAzIDAgMCAxIDEzIDI3VjE2aC0yLjA0OGMtLjUyNiAwLS45NTItLjQ0OC0uOTUyLTFzLjQyNi0xIC45NTItMUgxNVptMCAydjEyaDEwVjE2SDE1WiIgY2xpcC1ydWxlPSJldmVub2RkIi8+PHBhdGggZmlsbD0iI2ZmZiIgZD0iTTE2IDE5aDh2OGgtOHYtOFoiLz48L3N2Zz4=';\n\nreturn '<div class=\"bin-card\">' +\n           '<button id=\"full-bins\"' + (isCardSelected ? ' class=\"bin-card-selected\" ' : '') + 'mat-button>' +\n                '<div class=\"bin-card-content flex flex-row\">' +\n                    '<img src=\"data:image/svg+xml;base64,' + icon + '\"/>' +\n                    '<div class=\"bin-card-data flex flex-col\">' +\n                        '<div class=\"bin-card-header\">Fullness</div>' +\n                        '<div class=\"bin-card-value\">' + value + '</div>' +\n                    '</div>' +\n                '</div>' +\n           '</button>' +\n        '</div>';"
          },
          "title": "New Markdown/HTML Card",
          "showTitleIcon": false,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "showLegend": false,
          "enableDataExport": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "useDashboardTimewindow": true,
          "actions": {
            "elementClick": [
              {
                "name": "full-bins",
                "icon": "more_horiz",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "custom",
                "customFunction": "const $injector = widgetContext.$scope.$injector;\nconst attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nconst currentUser = widgetContext.currentUser;\nconst attributesArray = [\n    { key: 'displayFullBins', value: true },\n    { key: 'displayLowBatteryBins', value: false },\n    { key: 'displayOfflineBins', value: false }\n];\nattributeService.saveEntityAttributes({id: currentUser.userId, entityType: 'USER'},\n    'SERVER_SCOPE', attributesArray, {ignoreLoading: true}).subscribe();",
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "e71119c0-064c-1078-5419-4f7b9bfcf6c5"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "81c766cd-ae80-9f5e-fa44-9717cb1ba84f",
        "typeFullFqn": "system.cards.markdown_card"
      },
      "fdcc234a-0d39-30b8-318a-9fad15085bb0": {
        "type": "latest",
        "sizeX": 5,
        "sizeY": 3.5,
        "config": {
          "datasources": [
            {
              "type": "entityCount",
              "name": null,
              "entityAliasId": "6ee2c775-15f1-e7dc-a368-12a263215530",
              "filterId": "b01ebf89-e19a-7627-14f7-a4f8c597b2fb",
              "dataKeys": [
                {
                  "name": "count",
                  "type": "count",
                  "label": "count",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.8714572145476891
                }
              ]
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "bbd8598b-83a5-5da8-43d3-4fd989919131",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "displayLowBatteryBins",
                  "type": "attribute",
                  "label": "displayLowBatteryBins",
                  "color": "#4caf50",
                  "settings": {},
                  "_hash": 0.9752503565296855
                }
              ]
            }
          ],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1677748441199,
                "endTimeMs": 1677834841199
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "useMarkdownTextFunction": true,
            "markdownTextFunction": "let value = '-';\nlet isCardSelected = false;\nif (data.length) {\n    value = data[0].count;\n    if (data[1]) {\n        isCardSelected = data[1].displayLowBatteryBins && data[1].displayLowBatteryBins !== 'false';\n    }\n}\n\nconst icon = 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI0MCIgaGVpZ2h0PSI0MCIgZmlsbD0ibm9uZSI+PHJlY3Qgd2lkdGg9IjQwIiBoZWlnaHQ9IjQwIiBmaWxsPSIjRkY4QTAwIiByeD0iNCIvPjxwYXRoIGZpbGw9IiNmZmYiIGQ9Ik0xOS41MjQgMjhoLTcuNjJWMTRoNy42Mm0uNjM4LTJoLTEuNTl2LTJoLTUuNzE1djJoLTEuNTlDMTAuNTcgMTIgMTAgMTIuNiAxMCAxMy4zM3YxNS4zNGMwIC43My41NzEgMS4zMyAxLjI2NyAxLjMzaDguODk1Yy43MDUgMCAxLjI2Ny0uNTkgMS4yNjctMS4zM1YxMy4zM2MwLS43My0uNTcyLTEuMzMtMS4yNjctMS4zM1ptLTEuNTkgMTJoLTUuNzE1djNoNS43MTR2LTNaTTMwIDE4aC0yLjg1N3YtN0wyMi4zOCAyMWgyLjg1N3Y4Ii8+PC9zdmc+';\n\nreturn '<div class=\"bin-card\">' +\n           '<button id=\"low-battery-bins\"' + (isCardSelected ? ' class=\"bin-card-selected\" ' : '') + 'mat-button>' +\n                '<div class=\"bin-card-content flex flex-row\">' +\n                    '<img src=\"data:image/svg+xml;base64,' + icon + '\"/>' +\n                    '<div class=\"bin-card-data flex flex-col\">' +\n                        '<div class=\"bin-card-header\">Low battery</div>' +\n                        '<div class=\"bin-card-value\">' + value + '</div>' +\n                    '</div>' +\n                '</div>' +\n           '</button>' +\n        '</div>';"
          },
          "title": "New Markdown/HTML Card",
          "showTitleIcon": false,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "showLegend": false,
          "enableDataExport": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "useDashboardTimewindow": true,
          "actions": {
            "elementClick": [
              {
                "name": "low-battery-bins",
                "icon": "more_horiz",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "custom",
                "customFunction": "const $injector = widgetContext.$scope.$injector;\nconst attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nconst currentUser = widgetContext.currentUser;\nconst attributesArray = [\n    { key: 'displayFullBins', value: false },\n    { key: 'displayLowBatteryBins', value: true },\n    { key: 'displayOfflineBins', value: false }\n];\nattributeService.saveEntityAttributes({id: currentUser.userId, entityType: 'USER'},\n    'SERVER_SCOPE', attributesArray, {ignoreLoading: true}).subscribe();",
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "da4a1c1f-861e-759b-bad9-e5ba46bdc163"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "fdcc234a-0d39-30b8-318a-9fad15085bb0",
        "typeFullFqn": "system.cards.markdown_card"
      },
      "369fcee9-5f64-e56d-d723-64f46ec383d1": {
        "type": "latest",
        "sizeX": 5,
        "sizeY": 3.5,
        "config": {
          "datasources": [
            {
              "type": "entityCount",
              "name": null,
              "entityAliasId": "6ee2c775-15f1-e7dc-a368-12a263215530",
              "filterId": "cfdc11b4-28e0-0332-de61-fa20e4c17e56",
              "dataKeys": [
                {
                  "name": "count",
                  "type": "count",
                  "label": "count",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.2630114195793014
                }
              ]
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "bbd8598b-83a5-5da8-43d3-4fd989919131",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "displayOfflineBins",
                  "type": "attribute",
                  "label": "displayOfflineBins",
                  "color": "#4caf50",
                  "settings": {},
                  "_hash": 0.18972330547681393
                }
              ]
            }
          ],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1677748441199,
                "endTimeMs": 1677834841199
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "useMarkdownTextFunction": true,
            "markdownTextFunction": "let value = '-';\nlet isCardSelected = false;\nif (data.length) {\n    value = data[0].count;\n    if (data[1]) {\n        isCardSelected = data[1].displayOfflineBins && data[1].displayOfflineBins !== 'false';\n    }\n}\n\nconst icon = 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI0MCIgaGVpZ2h0PSI0MCIgZmlsbD0ibm9uZSI+PHJlY3Qgd2lkdGg9IjQwIiBoZWlnaHQ9IjQwIiBmaWxsPSIjNzU3NTc1IiByeD0iNCIvPjxwYXRoIGZpbGw9IiNmZmYiIGQ9Ik0xNi4zMjIgMTIuNzA3YTQuMDI5IDQuMDI5IDAgMCAxIC4zMDMtMi4wNSAxNi4yNSAxNi4yNSAwIDAgMC04LjI4NCA0LjY1MmMtLjQ1NS40NzMtLjQ1NSAxLjE4MiAwIDEuNjMuMjAyLjIzNi40OC4zNDEuNzgzLjM0MS4zMDMgMCAuNTgtLjEwNS43ODMtLjM0MmExMy45MjggMTMuOTI4IDAgMCAxIDYuNDY1LTMuODM3bC0uMDUtLjM5NFpNMzEuNjc4IDE1LjMzNWExNi4yNSAxNi4yNSAwIDAgMC04LjI4NC00LjY1MWMuMjc4LjYzLjM3OSAxLjM0LjMwMyAyLjA1bC0uMDUuMzk0YTE0LjM4MSAxNC4zODEgMCAwIDEgNi40NjUgMy44MzdjLjQzLjQ0NiAxLjEzNi40NDYgMS41NjYgMCAuNDMtLjQ3My40My0xLjE4MyAwLTEuNjNaTTE2LjcgMTUuODg3Yy0xLjgxOC41NTItMy40ODUgMS41NzctNC44OTkgMy4wNDgtLjQ1NC40NzMtLjQ1NCAxLjE4MyAwIDEuNjMuMjAyLjIzNi40OC4zNDEuNzgzLjM0MS4yNzggMCAuNTgtLjEwNS43ODMtLjM0MSAxLjA2LTEuMDc4IDIuMjk4LTEuODkzIDMuNjM3LTIuMzRsLS4zMDMtMi4zMzhaTTIzLjMxOCAxNS44ODdsLS4yNzggMi4zMzlhOS4wMTYgOS4wMTYgMCAwIDEgMy42MTIgMi4zMzljLjQ1NC40NDcgMS4xMzYuNDQ3IDEuNTY2IDAgLjQ1NC0uNDczLjQ1NC0xLjE4MyAwLTEuNjMtMS40MTQtMS40NzEtMy4wODEtMi40OTYtNC45LTMuMDQ4Wk0xNS4yNjEgMjIuNTM2YTEuMTkyIDEuMTkyIDAgMCAwIDAgMS42M2MuMjI4LjIzNi41MDUuMzQxLjc4My4zNDFzLjU4MS0uMTA1Ljc4My0uMzQxYy4yNTMtLjI2My41My0uNDczLjgwOC0uNjU3bC0uMzAzLTIuNDQ1Yy0uNzgzLjM0Mi0xLjQ2NS44NDEtMi4wNyAxLjQ3MlpNMjIuNjg3IDIxLjA2NGwtLjMwMyAyLjQ0NWMuMjc3LjE4My41NTUuNDIuNzgyLjY1Ny40NTUuNDQ2IDEuMTM3LjQ0NiAxLjU2NiAwIC40NTUtLjQ3NC40NTUtMS4xODMgMC0xLjYzYTYuMDcgNi4wNyAwIDAgMC0yLjA0NS0xLjQ3MlpNMTkuMjc3IDI0LjAwOGMuMjI3LS4wOC40OC0uMDguNzA3LS4wOC4yNTMgMCAuNTA1LjAyNy43NTguMDhsMS4zNjQtMTEuNTExYy4wMjUtLjEwNS4wMjUtLjE4NC4wMjUtLjI5IDAtMS4xODItLjkzNS0yLjIwNy0yLjEyMi0yLjIwNy0xLjI2MiAwLTIuMjQ3IDEuMTgzLTIuMTIxIDIuNDdsMS4zODkgMTEuNTM3Wk0yMC4wMSAyNS41NTljLTEuMTYyIDAtMi4xMjIuOTk4LTIuMTIyIDIuMjA3IDAgMS4yMzUuOTYgMi4yMzQgMi4xMjIgMi4yMzQgMS4xODcgMCAyLjE0Ny0uOTk5IDIuMTQ3LTIuMjM0IDAtMS4yMDktLjk2LTIuMjA3LTIuMTQ3LTIuMjA3WiIvPjwvc3ZnPg==';\n\nreturn '<div class=\"bin-card\">' +\n           '<button id=\"offline-bins\"' + (isCardSelected ? ' class=\"bin-card-selected\" ' : '') + 'mat-button>' +\n                '<div class=\"bin-card-content flex flex-row\">' +\n                    '<img src=\"data:image/svg+xml;base64,' + icon + '\"/>' +\n                    '<div class=\"bin-card-data flex flex-col\">' +\n                        '<div class=\"bin-card-header\">Offline</div>' +\n                        '<div class=\"bin-card-value\">' + value + '</div>' +\n                    '</div>' +\n                '</div>' +\n           '</button>' +\n        '</div>';"
          },
          "title": "New Markdown/HTML Card",
          "showTitleIcon": false,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "showLegend": false,
          "enableDataExport": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "useDashboardTimewindow": true,
          "actions": {
            "elementClick": [
              {
                "name": "offline-bins",
                "icon": "more_horiz",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "custom",
                "customFunction": "const $injector = widgetContext.$scope.$injector;\nconst attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nconst currentUser = widgetContext.currentUser;\nconst attributesArray = [\n    { key: 'displayFullBins', value: false },\n    { key: 'displayLowBatteryBins', value: false },\n    { key: 'displayOfflineBins', value: true }\n];\nattributeService.saveEntityAttributes({id: currentUser.userId, entityType: 'USER'},\n    'SERVER_SCOPE', attributesArray, {ignoreLoading: true}).subscribe();",
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "4b4a2c35-e86a-01f9-d941-ab77ddf8bbc3"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "369fcee9-5f64-e56d-d723-64f46ec383d1",
        "typeFullFqn": "system.cards.markdown_card"
      },
      "14b9092d-f098-0ce9-e214-3e19032d450a": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 6.5,
        "config": {
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1677748441199,
                "endTimeMs": 1677834841199
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0",
          "settings": {
            "entitiesTitle": "Bins",
            "enableSearch": true,
            "enableSelectColumnDisplay": false,
            "enableStickyHeader": true,
            "enableStickyAction": true,
            "reserveSpaceForHiddenAction": "true",
            "displayEntityName": true,
            "entityNameColumnTitle": "Serial Number",
            "displayEntityLabel": false,
            "displayEntityType": false,
            "displayPagination": false,
            "defaultSortOrder": "entityName",
            "useRowStyleFunction": false
          },
          "title": "",
          "dropShadow": false,
          "enableFullscreen": true,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 500,
            "padding": "5px 10px 5px 5px",
            "color": "#29313C",
            "letterSpacing": "0.25px"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "6ee2c775-15f1-e7dc-a368-12a263215530",
              "filterId": "b57ed975-3305-c009-023a-bbb9d8fd36ee",
              "dataKeys": [
                {
                  "name": "address",
                  "type": "attribute",
                  "label": "Address",
                  "color": "#2196f3",
                  "settings": {
                    "columnWidth": "25%",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.3603616959179663,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "active",
                  "type": "attribute",
                  "label": "Connection",
                  "color": "#4caf50",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "const isActive = value === 'true';\nconst status = isActive ? 'Online' : 'Offline';\nconst color = isActive ? '#3AA94D' : '#C42F37';\nconst bgColor = isActive ? 'rgba(58, 169, 77, 0.08)' : 'rgba(196, 47, 55, 0.08)';\nreturn '<div style=\"width:fit-content;padding:4px 8px;border-radius:8px;line-height:20px;font-size:14px;font-weight:500;letter-spacing:0.25px;color:'+ color +';background-color:'+ bgColor +'\">' +\n            status + '</div>';",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.5880994339970431,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "fullLevel",
                  "type": "timeseries",
                  "label": "Fullness",
                  "color": "#f44336",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": true,
                    "cellStyleFunction": "return {\n  \"color\": entity['isFull'] === 'true' ? \"#D12730\" : \"#4B535B\"  \n};",
                    "useCellContentFunction": true,
                    "cellContentFunction": "return value ? (parseFloat(value).toFixed(0) + '%') : '-';",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.13077782640135394,
                  "aggregationType": "NONE",
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "batteryLevel",
                  "type": "timeseries",
                  "label": "Battery Level",
                  "color": "#ffc107",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": true,
                    "cellStyleFunction": "return {\n  \"color\": entity['isLowBattery'] === 'true' ? \"#D12730\" : \"#4B535B\"  \n};",
                    "useCellContentFunction": true,
                    "cellContentFunction": "return value ? (parseFloat(value).toFixed(0) + '%') : '-';",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.5810257360740916,
                  "aggregationType": "NONE",
                  "units": null,
                  "decimals": 0,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "isFull",
                  "type": "attribute",
                  "label": "isFull",
                  "color": "#607d8b",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "defaultColumnVisibility": "hidden",
                    "columnSelectionToDisplay": "disabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.8920880537911846,
                  "aggregationType": null,
                  "units": null,
                  "decimals": 0,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "isLowBattery",
                  "type": "attribute",
                  "label": "isLowBattery",
                  "color": "#9c27b0",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "defaultColumnVisibility": "hidden",
                    "columnSelectionToDisplay": "disabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.010592382897542718,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ]
            }
          ],
          "displayTimewindow": true,
          "showTitleIcon": false,
          "titleTooltip": "",
          "enableDataExport": false,
          "widgetStyle": {},
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "No bins found",
          "actions": {
            "headerButton": [
              {
                "name": "Add bins",
                "icon": "add",
                "useShowWidgetActionFunction": false,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form [formGroup]=\"addEntityFormGroup\" (ngSubmit)=\"import()\" style=\"width:640px\">\n  <mat-toolbar color=\"primary\">\n    <h2>Register sensors</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content class=\"flex flex-col\" style=\"position:relative\">\n    <fieldset [disabled]=\"isLoading$ | async\" tb-toast toastTarget=\"importSensorsTarget\">\n      <tb-file-input formControlName=\"importData\"\n                     required\n                     label=\"Sensors file\"\n                     [allowedExtensions]=\"'csv,txt'\"\n                     [accept]=\"'.csv,application/csv,text/csv,.txt,text/plain'\"\n                     dropLabel=\"{{'import.drop-file-csv-or' | translate}}\">\n      </tb-file-input>\n      <mat-form-field class=\"mat-block\" style=\"margin-top:12px\">\n        <mat-label translate>import.csv-delimiter</mat-label>\n        <mat-select required formControlName=\"delim\">\n          <mat-option *ngFor=\"let delimiter of delimiters\" [value]=\"delimiter.key\">\n            {{ delimiter.value }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </fieldset>\n    <div class=\"import-info-section\">\n      <div class=\"import-info-header\">CSV file must content columns:</div>\n      <div class=\"import-info-text\">\n        <div>1. Serial number</div>\n        <div>2. Address</div>\n        <div>3. Latitude</div>\n        <div>4. Longitude</div>\n      </div>\n      <div class=\"import-info-header\" style=\"margin-top:12px;margin-bottom:6px\">Example:</div>\n      <div [innerHTML]=\"exampleContent\" class=\"example-content\"></div>\n    </div>\n  </div>\n  <div mat-dialog-actions class=\"flex items-center justify-end\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || addEntityFormGroup.invalid || !addEntityFormGroup.dirty\">\n      Import\n    </button>\n  </div>\n</form>",
                "customCss": ".import-info-section {\n    display: flex;\n    flex-direction: column;\n    padding: 12px 16px;\n    background-color: rgba(0, 0, 0, 0.04);\n    border-radius: 4px;\n}\n\n.import-info-header,\n.import-info-text {\n    font-size: 14px;\n    line-height: 20px;\n    letter-spacing: 0.2px;\n    color: rgba(0, 0, 0, 0.54);\n}\n\n.import-info-header {\n    font-weight: 700;\n}\n\n.delim-value {\n    color: rgba(0, 0, 0, 0.87);\n    font-weight: 700;\n}\n\n.example-content {\n    padding: 12px;\n    border: 1px solid rgba(0, 0, 0, 0.12);\n    border-radius: 6px;\n    background-color: rgba(255, 255, 255, 0.08);\n}\n\n.example-content .import-info-text {\n    color: rgba(0, 0, 0, 0.38);\n}",
                "customFunction": "const $injector = widgetContext.$scope.$injector;\nconst customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nconst entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nconst importExportService = $injector.get(widgetContext.servicesMap.get('importExport'));\nconst rxjs = widgetContext.rxjs;\n\nopenAddEntityDialog();\n\nfunction openAddEntityDialog() {\n    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n}\n\nfunction AddEntityDialogController(instance) {\n    const vm = instance;\n    \n    vm.delimiters = [{\n        key: ',',\n        value: ','\n    }, {\n        key: ';',\n        value: ';'\n    }, {\n        key: '|',\n        value: '|'\n    }];\n    \n    vm.exampleData = [\n        ['389021001233', '12th St 1400', '33.888169', '-118.389693'],\n        ['389021001322', 'Manzanita Ln 1501', '33.889536', '-118.381968']\n    ];\n    \n    vm.columns = [\n        { type: 'NAME' },\n        { type: 'SERVER_ATTRIBUTE', key: 'address' },\n        { type: 'SERVER_ATTRIBUTE', key: 'latitude' },\n        { type: 'SERVER_ATTRIBUTE', key: 'longitude' },\n        { type: 'SERVER_ATTRIBUTE', key: 'isFull' },\n        { type: 'SERVER_ATTRIBUTE', key: 'isLowBattery' },\n        { type: 'TYPE' }\n    ];\n    \n    vm.addEntityFormGroup = vm.fb.group({\n        importData: [null, [vm.validators.required]],\n        delim: [';', [vm.validators.required]]\n    });\n    \n    vm.exampleContent = buildExampleContent(vm.addEntityFormGroup.get('delim').value);\n    \n    vm.addEntityFormGroup.get('delim').valueChanges.subscribe(value => {\n        vm.exampleContent = buildExampleContent(value);\n    });\n\n    vm.import = () => {\n        const origFile = vm.addEntityFormGroup.get('importData').value;\n        const delim = vm.addEntityFormGroup.get('delim').value;\n        const parseData = parseCSV(origFile);\n        if (parseData === -1) {\n            vm.addEntityFormGroup.get('importData').setValue(null);\n        } else {\n            getEntityGroupByName('Waste Sensors', 'DEVICE').subscribe(group => {\n                if (group) {\n                    const csvRows = origFile.split(/[\\r\\n]+/);\n                    csvRows.forEach((row, i) => {\n                        if (row) {\n                            csvRows[i] += (delim + 'false' + delim + 'false' + delim + 'Waste Sensor');\n                        }\n                    });\n                    const updatedFile = csvRows.join(\"\\r\\n\");\n                    const entitiesData = {\n                        file: updatedFile,\n                        entityGroupId: group.id.id,\n                        mapping: {\n                            columns: vm.columns,\n                            delimiter: delim,\n                            header: false,\n                            update: true\n                        }\n                    };\n                    importExportService.bulkImportEntities(entitiesData, 'DEVICE', {ignoreErrors: true}).subscribe(result => {\n                        setTimeout(() => {\n                            widgetContext.updateAliases();\n                            widgetContext.showSuccessToast(result.created + (result.created === 1 ? ' bin was' : ' bins were') + ' successfully added! ', 2000, 'top', 'left');\n                        }, 1000);\n                        vm.dialogRef.close(null);\n                    });\n                } else {\n                    widgetContext.showErrorToast(\"Target sensors-group doesn't exist!\", 'top', 'left', 'importSensorsTarget');\n                }\n            });\n        }\n    };\n    \n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    function getEntityGroupByName(groupName, groupType) {\n        const entityGroupsPageLink = widgetContext.pageLink(10, 0, groupName);\n        return entityGroupService.getEntityGroupsByPageLink(entityGroupsPageLink, groupType).pipe(\n            rxjs.map((data) => {\n                if (data.data.length) {\n                    return data.data.find((group) => group.name === groupName);\n                } else {\n                    return null;\n                }\n            })\n        );\n    }\n    \n    function buildExampleContent(delim) {\n        let content = '';\n        vm.exampleData.forEach(dataArray => {\n            let result = '<div class=\"import-info-text\">';\n            dataArray.forEach((value, index) => {\n                result += value;\n                if (index !== dataArray.length - 1) {\n                    result += ('<span class=\"delim-value\">' + delim + '</span>');\n                }\n            });\n            result += '</div>';\n            content += result;\n        });\n        return content;\n    }\n    \n    function parseCSV(importData) {\n        const config = {\n            delim: vm.addEntityFormGroup.get('delim').value,\n            header: false\n        };\n        return convertCSVToJson(importData, config, (messageId, params) => {\n            widgetContext.showErrorToast(widgetContext.translate.instant(messageId, params), 'top', 'left', 'importSensorsTarget');\n        });\n    }\n    \n    function convertCSVToJson(csvdata, config, onError) {\n        config = config || {};\n        const delim = config.delim || ',';\n        const header = config.header || false;\n        const result = {};\n        const csvlines = csvdata.split(/[\\r\\n]+/);\n        const csvheaders = splitCSV(csvlines[0], delim);\n        if (csvheaders.length < 2) {\n            onError('import.import-csv-number-columns-error');\n            return -1;\n        }\n        const csvrows = header ? csvlines.slice(1, csvlines.length) : csvlines;\n        result.headers = csvheaders;\n        result.rows = [];\n        for (const row of csvrows) {\n            if (row.length === 0) {\n                break;\n            }\n            const rowitems = splitCSV(row, delim);\n            if (rowitems.length !== result.headers.length) {\n                onError('import.import-csv-invalid-format-error', {line: (header ? result.rows.length + 2 : result.rows.length + 1)});\n                return -1;\n            }\n            for (let i = 0; i < rowitems.length; i++) {\n                rowitems[i] = convertStringToJSType(rowitems[i]);\n            }\n            result.rows.push(rowitems);\n        }\n        return result;\n    }\n    \n    function splitCSV(str, sep) {\n        let foo, x, tl;\n        for (foo = str.split(sep = sep || ','), x = foo.length - 1, tl; x >= 0; x--) {\n            if (foo[x].replace(/\"\\s+$/, '\"').charAt(foo[x].length - 1) === '\"') {\n                if ((tl = foo[x].replace(/^\\s+\"/, '\"')).length > 1 && tl.charAt(0) === '\"') {\n                    foo[x] = foo[x].replace(/^\\s*\"|\"\\s*$/g, '').replace(/\"\"/g, '\"');\n                } else if (x) {\n                    foo.splice(x - 1, 2, [foo[x - 1], foo[x]].join(sep));\n                } else {\n                    foo = foo.shift().split(sep).concat(foo);\n                }\n            } else {\n                foo[x].replace(/\"\"/g, '\"');\n            }\n        }\n        return foo;\n    }\n    \n    function convertStringToJSType(str) {\n        if (isNumeric(str.replace(',', '.'))) {\n            return parseFloat(str.replace(',', '.'));\n        }\n        if (str.search(/^(true|false)$/im) === 0) {\n            return str.toLowerCase() === 'true';\n        }\n        if (str === '') {\n            return null;\n        }\n        return str;\n    }\n    \n    function isNumeric(str) {\n        str = str.replace(',', '.');\n        return (str - parseFloat(str) + 1) >= 0 && Number(str).toString() === str;\n    }\n}",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "781dc3c9-67d4-4393-684b-8f3380db1724"
              }
            ],
            "rowClick": [
              {
                "name": "bin-details",
                "icon": "more_horiz",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "openDashboardState",
                "targetDashboardStateId": "selected_bin",
                "setEntityId": true,
                "stateEntityParamName": null,
                "openRightLayout": false,
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "9b08f3aa-7fbe-257d-b15e-ff5ce4c9c0e8"
              }
            ],
            "actionCellButton": [
              {
                "name": "Edit",
                "icon": "edit",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form [formGroup]=\"editEntityFormGroup\" (ngSubmit)=\"save()\" style=\"width:360px\">\n  <mat-toolbar color=\"primary\">\n    <h2>Edit sensor {{entityName}}</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content class=\"flex flex-col\">\n    <mat-form-field class=\"mat-block flex-1\">\n      <mat-label>Serial number</mat-label>\n      <input matInput formControlName=\"entityName\" required>\n      <mat-error *ngIf=\"editEntityFormGroup.get('entityName').hasError('required')\">\n        Serial number is required.\n      </mat-error>\n    </mat-form-field>\n    <div formGroupName=\"attributes\" class=\"flex flex-col\">\n      <mat-form-field class=\"mat-block flex-1\">\n        <mat-label>Address</mat-label>\n        <input matInput formControlName=\"address\" required>\n        <mat-error *ngIf=\"editEntityFormGroup.get('attributes.address').hasError('required')\">\n          Address is required.\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"mat-block flex-1\">\n        <mat-label>Latitude</mat-label>\n        <input type=\"number\" step=\"0.1\" matInput\n               formControlName=\"latitude\">\n      </mat-form-field>\n      <mat-form-field class=\"mat-block flex-1\">\n        <mat-label>Longitude</mat-label>\n        <input type=\"number\" step=\"0.1\" matInput\n               formControlName=\"longitude\">\n      </mat-form-field>\n    </div>\n  </div>\n  <div mat-dialog-actions class=\"flex items-center justify-end\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || editEntityFormGroup.invalid || !editEntityFormGroup.dirty\">\n      Save\n    </button>\n  </div>\n</form>",
                "customCss": "",
                "customFunction": "const $injector = widgetContext.$scope.$injector;\nconst customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nconst deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nconst attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nconst rxjs = widgetContext.rxjs;\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    const vm = instance;\n    \n    vm.entityId = entityId;\n    vm.entityName = entityName;\n    vm.sensor = null;\n    vm.attributes = {};\n    \n    vm.editEntityFormGroup = vm.fb.group({\n        entityName: ['', [vm.validators.required]],\n        attributes: vm.fb.group({\n            address: ['', [vm.validators.required]],\n            latitude: [null],\n            longitude: [null]\n        })\n    });\n    \n    getEntityInfo();\n    \n    vm.save = () => {\n        vm.editEntityFormGroup.markAsPristine();\n        const formValues = vm.editEntityFormGroup.value;\n        vm.sensor.name = formValues.entityName;\n        vm.sensor.label = formValues.entityLabel;\n        deviceService.saveDevice(vm.sensor).pipe(\n            rxjs.concatMap(() => {\n                return saveAttributes();\n            })\n        ).subscribe(() => {\n            widgetContext.updateAliases();\n            vm.dialogRef.close(null);\n        });\n    };\n    \n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    function getEntityAttributes(attributes) {\n        for (let i = 0; i < attributes.length; i++) {\n            vm.attributes[attributes[i].key] = attributes[i].value;\n        }\n    }\n    \n    function getEntityInfo() {\n        rxjs.forkJoin([\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', ['latitude', 'longitude', 'address']),\n            deviceService.getDevice(entityId.id)\n        ]).subscribe(\n            (data) => {\n                const attrs = data[0];\n                vm.sensor = data[1];\n                getEntityAttributes(attrs);\n                vm.editEntityFormGroup.patchValue({\n                    entityName: vm.entityName,\n                    attributes: vm.attributes\n                });\n            }\n        );\n    }\n    \n    function saveAttributes() {\n        const attributes = vm.editEntityFormGroup.get('attributes').value;\n        const attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key] !== vm.attributes[key]) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(vm.entityId, \"SERVER_SCOPE\", attributesArray);\n        } else {\n            return widgetContext.rxjs.of([]);\n        }\n    }\n}",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "f3f85e88-6d4a-4b39-d07f-8f631bff0d21"
              },
              {
                "name": "Delete",
                "icon": "delete_forever",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "custom",
                "customFunction": "const $injector = widgetContext.$scope.$injector;\nconst dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nconst deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n    const title = 'Delete sensor \"' +  entityName + '\"';\n    const content = 'Are you sure you want to delete the sensor \"' +\n        entityName + '\"?';\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        (result) => {\n            if (result) {\n                deleteEntity();\n            }\n        }\n    );\n}\n\nfunction deleteEntity() {\n    deviceService.deleteDevice(entityId.id).subscribe(\n        () => {\n            widgetContext.updateAliases();\n        },\n        () => {\n            showErrorDialog();\n        }\n    );\n}\n\nfunction showErrorDialog() {\n    const title = 'Error';\n    const content = 'An error occurred while deleting the sensor. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe();\n}",
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "acbab6c2-c447-505c-6b8d-e5d3268c97ca"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "14b9092d-f098-0ce9-e214-3e19032d450a",
        "typeFullFqn": "system.cards.entities_table"
      },
      "bd47533e-1ef8-bea5-e982-728322a17536": {
        "type": "alarm",
        "sizeX": 10.5,
        "sizeY": 6.5,
        "config": {
          "timewindow": {
            "hideAggregation": false,
            "hideAggInterval": false,
            "hideTimezone": false,
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 0,
              "timewindowMs": 604800000,
              "quickInterval": "CURRENT_DAY",
              "interval": 1000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0",
          "settings": {
            "enableSelection": false,
            "enableSearch": true,
            "enableSelectColumnDisplay": false,
            "enableFilter": true,
            "enableStickyHeader": true,
            "enableStickyAction": false,
            "reserveSpaceForHiddenAction": "true",
            "displayDetails": false,
            "allowAcknowledgment": false,
            "allowClear": false,
            "displayPagination": false,
            "defaultSortOrder": "-createdTime",
            "useRowStyleFunction": false
          },
          "title": "New Alarms table",
          "dropShadow": false,
          "enableFullscreen": true,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 500,
            "padding": "5px 10px 5px 2px",
            "color": "#29313C",
            "letterSpacing": "0.25px"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "alarmSource": {
            "type": "entity",
            "name": null,
            "entityAliasId": "6ee2c775-15f1-e7dc-a368-12a263215530",
            "filterId": "b57ed975-3305-c009-023a-bbb9d8fd36ee",
            "dataKeys": [
              {
                "name": "originator",
                "type": "alarm",
                "label": "Originator",
                "color": "#4caf50",
                "settings": {
                  "useCellStyleFunction": false,
                  "cellStyleFunction": "",
                  "useCellContentFunction": false,
                  "cellContentFunction": ""
                },
                "_hash": 0.2780007688856758
              },
              {
                "name": "createdTime",
                "type": "alarm",
                "label": "Created time",
                "color": "#2196f3",
                "settings": {
                  "useCellStyleFunction": false,
                  "cellStyleFunction": "",
                  "useCellContentFunction": false,
                  "cellContentFunction": ""
                },
                "_hash": 0.021092237451093787
              },
              {
                "name": "type",
                "type": "alarm",
                "label": "Type",
                "color": "#f44336",
                "settings": {
                  "columnWidth": "25%",
                  "useCellStyleFunction": false,
                  "useCellContentFunction": false,
                  "defaultColumnVisibility": "visible",
                  "columnSelectionToDisplay": "enabled",
                  "columnExportOption": "onlyVisible"
                },
                "_hash": 0.7323586880398418,
                "aggregationType": null,
                "units": null,
                "decimals": null,
                "funcBody": null,
                "usePostProcessing": null,
                "postFuncBody": null
              },
              {
                "name": "severity",
                "type": "alarm",
                "label": "Details",
                "color": "#ffc107",
                "settings": {
                  "columnWidth": "0px",
                  "useCellStyleFunction": true,
                  "cellStyleFunction": "return {\n    \"color\": \"#D12730\"\n}",
                  "useCellContentFunction": true,
                  "cellContentFunction": "return alarm.details.data ? parseFloat(alarm.details.data).toFixed(0) + '%' : '-';",
                  "defaultColumnVisibility": "visible",
                  "columnSelectionToDisplay": "enabled",
                  "columnExportOption": "onlyVisible"
                },
                "_hash": 0.06240450485076421,
                "aggregationType": null,
                "units": null,
                "decimals": null,
                "funcBody": null,
                "usePostProcessing": null,
                "postFuncBody": null
              }
            ]
          },
          "alarmsPollingInterval": 5,
          "showTitleIcon": false,
          "titleIcon": "more_horiz",
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "widgetStyle": {},
          "displayTimewindow": true,
          "actions": {
            "headerButton": [
              {
                "name": "Alarm rules",
                "icon": "settings",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form [formGroup]=\"alarmRulesFormGroup\" (ngSubmit)=\"save()\" style=\"width:360px\">\n  <mat-toolbar color=\"primary\">\n    <h2>Alarm rules</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content class=\"flex flex-col\">\n    <div class=\"rule-row flex flex-row\">\n      <div class=\"rule-label\">Battery level less than</div>\n      <div class=\"flex flex-row\" style=\"align-items:baseline\">\n        <mat-form-field class=\"mat-block rule-input\" appearance=\"outline\">\n          <input matInput type=\"number\" step=\"1\" formControlName=\"binsBatteryLevelThreshold\" required>\n          <mat-error *ngIf=\"alarmRulesFormGroup.get('binsBatteryLevelThreshold').hasError('required')\">\n            Required!\n          </mat-error>\n        </mat-form-field>\n        <div class=\"rule-units\">%</div>\n      </div>\n    </div>\n    <div class=\"rule-row flex flex-row\">\n      <div class=\"rule-label\">Fullness greater than</div>\n      <div class=\"flex flex-row\" style=\"align-items:baseline\">\n        <mat-form-field class=\"mat-block rule-input\" appearance=\"outline\">\n          <input matInput type=\"number\" step=\"1\" formControlName=\"binsFullLevelThreshold\" required>\n          <mat-error *ngIf=\"alarmRulesFormGroup.get('binsFullLevelThreshold').hasError('required')\">\n            Required!\n          </mat-error>\n        </mat-form-field>\n        <div class=\"rule-units\">%</div>\n      </div>\n    </div>\n    <div class=\"hint-content\">\n      Changes will be applied when the device sends new data\n    </div>\n  </div>\n  <div mat-dialog-actions class=\"flex items-center justify-end\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || alarmRulesFormGroup.invalid || !alarmRulesFormGroup.dirty\">\n      Save\n    </button>\n  </div>\n</form>",
                "customCss": ".rule-row {\n    align-items: baseline;\n    justify-content: space-between;\n}\n\n.rule-input {\n    margin-right: 8px;\n    width: 80px;\n}\n\n.rule-label {\n    width: 180px;\n    letter-spacing: 0.2px;\n    color: rgba(0, 0, 0, 0.76);\n}\n\n.rule-input .mat-mdc-form-field-infix {\n    min-height: 40px;\n}\n\n.rule-input .mat-mdc-form-field-error-wrapper {\n    padding: 0;\n}\n\n.rule-input .mat-mdc-text-field-wrapper.mdc-text-field--outlined .mat-mdc-form-field-infix {\n    padding-top: 8px;\n    padding-bottom: 8px;\n}\n\n.hint-content {\n    padding: 8px 12px;\n    border-radius: 4px;\n    background: rgba(0, 0, 0, 0.04);\n    font-size: 13px;\n    line-height: 18px;\n    letter-spacing: 0.25px;\n    color: rgba(0, 0, 0, 0.54);\n}",
                "customFunction": "const $injector = widgetContext.$scope.$injector;\nconst customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nconst attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenAlarmRulesDialog();\n\nfunction openAlarmRulesDialog() {\n    customDialog.customDialog(htmlTemplate, AlarmRulesDialogController).subscribe();\n}\n\nfunction AlarmRulesDialogController(instance) {\n    const vm = instance;\n    const tenantId = {\n        id: widgetContext.currentUser.tenantId,\n        entityType: 'TENANT'\n    };\n    \n    vm.attributes = {};\n    \n    vm.alarmRulesFormGroup = vm.fb.group({\n        binsBatteryLevelThreshold: ['', [vm.validators.required]],\n        binsFullLevelThreshold: ['', [vm.validators.required]]\n    });\n    \n    getEntityInfo();\n    \n    vm.save = () => {\n        saveAttributes().subscribe(() => {\n            widgetContext.updateAliases();\n            vm.dialogRef.close(null);\n        });\n    };\n    \n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    function getEntityInfo() {\n        attributeService.getEntityAttributes(tenantId, 'SERVER_SCOPE', ['binsFullLevelThreshold', 'binsBatteryLevelThreshold']).subscribe(\n            (attrs) => {\n                getEntityAttributes(attrs);\n                vm.alarmRulesFormGroup.patchValue({\n                    binsBatteryLevelThreshold: vm.attributes.binsBatteryLevelThreshold ? vm.attributes.binsBatteryLevelThreshold : 30,\n                    binsFullLevelThreshold: vm.attributes.binsFullLevelThreshold ? vm.attributes.binsFullLevelThreshold : 90\n                });\n        });\n    }\n    \n    function getEntityAttributes(attributes) {\n        for (let i = 0; i < attributes.length; i++) {\n            vm.attributes[attributes[i].key] = attributes[i].value;\n        }\n    }\n    \n    function saveAttributes() {\n        const attributes = vm.alarmRulesFormGroup.value;\n        const attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key] !== vm.attributes[key]) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(tenantId, \"SERVER_SCOPE\", attributesArray);\n        } else {\n            return widgetContext.rxjs.of([]);\n        }\n    }\n}",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "3e84d938-b2ee-9fd2-d18e-7555703ad781"
              }
            ],
            "actionCellButton": [
              {
                "name": "Clear",
                "icon": "close",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "custom",
                "customFunction": "const $injector = widgetContext.$scope.$injector;\nconst dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nconst alarmService = $injector.get(widgetContext.servicesMap.get('alarmService'));\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n    const alarmType = additionalParams.alarm.type ? additionalParams.alarm.type : '';\n    const title = 'Clear ' + alarmType + ' Alarm';\n    const content = 'Are you sure you want to clear Alarm?';\n    dialogs.confirm(title, content, 'No', 'Yes').subscribe(\n        (result) => {\n            if (result) {\n                clearAlarm();\n            }\n        }\n    );\n}\n\nfunction clearAlarm() {\n    alarmService.clearAlarm(additionalParams.alarm.id.id).subscribe(\n        () => {\n            setTimeout(() => {\n                widgetContext.updateAliases();\n            }, 500);\n        },\n        () => {\n            showErrorDialog();\n        }\n    );\n}\n\nfunction showErrorDialog() {\n    const title = 'Error';\n    const content = 'An error occurred while clearing the alarm. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe();\n}",
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "2c0d3d51-a177-b473-2309-95caa4f4d7f4"
              }
            ]
          },
          "datasources": [],
          "enableDataExport": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "alarmFilterConfig": {
            "statusList": [
              "ACTIVE"
            ],
            "severityList": [],
            "typeList": [],
            "searchPropagatedAlarms": false
          }
        },
        "row": 0,
        "col": 0,
        "id": "bd47533e-1ef8-bea5-e982-728322a17536",
        "typeFullFqn": "system.alarm_widgets.alarms_table"
      },
      "b89177ac-8f67-3ae5-dfc8-945d995ced41": {
        "type": "latest",
        "sizeX": 5,
        "sizeY": 3.5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "89427837-ec63-72e5-7388-d55276d731d8",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "name",
                  "type": "entityField",
                  "label": "Name",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.15249290163595064
                },
                {
                  "name": "latitude",
                  "type": "attribute",
                  "label": "latitude",
                  "color": "#f44336",
                  "settings": {},
                  "_hash": 0.09680113822958303
                },
                {
                  "name": "longitude",
                  "type": "attribute",
                  "label": "longitude",
                  "color": "#ffc107",
                  "settings": {},
                  "_hash": 0.9815644106031969
                },
                {
                  "name": "address",
                  "type": "attribute",
                  "label": "address",
                  "color": "#ffc107",
                  "settings": {},
                  "_hash": 0.738474233909995
                },
                {
                  "name": "fullLevel",
                  "type": "timeseries",
                  "label": "fullLevel",
                  "color": "#9c27b0",
                  "settings": {},
                  "_hash": 0.8731572828063345
                },
                {
                  "name": "batteryLevel",
                  "type": "timeseries",
                  "label": "batteryLevel",
                  "color": "#8bc34a",
                  "settings": {},
                  "_hash": 0.8277424891113301
                },
                {
                  "name": "isFull",
                  "type": "attribute",
                  "label": "isFull",
                  "color": "#3f51b5",
                  "settings": {},
                  "_hash": 0.5982249478194173
                },
                {
                  "name": "isLowBattery",
                  "type": "attribute",
                  "label": "isLowBattery",
                  "color": "#e91e63",
                  "settings": {},
                  "_hash": 0.20095222894829634
                },
                {
                  "name": "active",
                  "type": "attribute",
                  "label": "active",
                  "color": "#607d8b",
                  "settings": {},
                  "_hash": 0.2831810174397753
                }
              ]
            }
          ],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1677748441199,
                "endTimeMs": 1677834841199
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "useMarkdownTextFunction": true,
            "markdownTextFunction": "let entity, entityName, address, latitude, longitude, lastUpdate, fullLevel, batteryLevel, isFull, fullColor, isLowBattery, lowBatteryColor, isActive, sensorStatus, statusColor, statusBgColor;\nif (data.length) {\n  entity = data[0];\n  entityName = entity.entityName;\n  address = entity.address ? entity.address : '-';\n  latitude = isNumber(entity.latitude) ? entity.latitude : '-';\n  longitude = isNumber(entity.longitude) ? entity.longitude : '-';\n  fullLevel = processValue(entity.fullLevel, 0) + '%';\n  batteryLevel = processValue(entity.batteryLevel, 0) + '%';\n  isFull = entity.isFull && entity.isFull !== 'false';\n  fullColor = isFull ? '#D12730' : '#29313C';\n  isLowBattery = entity.isLowBattery && entity.isLowBattery !== 'false';\n  lowBatteryColor = isLowBattery ? '#D12730' : '#29313C';\n  isActive = entity.active === 'true';\n  sensorStatus = isActive ? 'Online' : 'Offline';\n  statusColor = isActive ? '#3AA94D' : '#C42F37';\n  statusBgColor = isActive ? 'rgba(58, 169, 77, 0.08)' : 'rgba(196, 47, 55, 0.08)';\n  lastUpdate = (entity['batteryLevel|ts'] || entity['fullLevel|ts']) ? moment(Math.max(entity['batteryLevel|ts'], entity['fullLevel|ts'])).format('D MMM YYYY HH:mm') : '-';\n} else {\n  entityName = '-';\n  address = '-';\n  latitude = '-';\n  longitude = '-';\n  lastUpdate = '-';\n  fullLevel = '-';\n  batteryLevel = '-';\n  isFull = false;\n  fullColor = '#29313C';\n  isLowBattery = false;\n  lowBatteryColor = '#29313C';\n  isActive = false;\n  sensorStatus = 'Offline';\n  statusColor = '#C42F37';\n  statusBgColor = 'rgba(196, 47, 55, 0.08)';\n}\n\nreturn '<div class=\"sensor-details-container flex flex-col\">' +\n  '<div class=\"sensor-details-header\">Sensor ' + entityName + '</div>' +\n  '<div class=\"sensor-details-row flex flex-col\">' +\n  '<div class=\"label\">Address</div>' +\n  '<div class=\"value\">'+ address +'</div>' +\n  '</div>' +\n  '<div class=\"flex flex-row gap-4\">' +\n  '<div class=\"sensor-details-row flex flex-1 flex-col\">' +\n  '<div class=\"label\">Latitude</div>' +\n  '<div class=\"value\">'+ latitude +'</div>' +\n  '</div>' +\n  '<div class=\"sensor-details-row flex flex-1 flex-col\">' +\n  '<div class=\"label\">Longitude</div>' +\n  '<div class=\"value\">'+ longitude +'</div>' +\n  '</div>' +\n  '</div>' +\n  '<div class=\"flex flex-row gap-4\">' +\n  '<div class=\"sensor-details-row flex flex-1 flex-col\">' +\n  '<div class=\"label\">Fullness level</div>' +\n  '<div class=\"value\" style=\"color:'+ fullColor +'\">'+ fullLevel +'</div>' +\n  '</div>' +\n  '<div class=\"sensor-details-row flex flex-1 flex-col\">' +\n  '<div class=\"label\">Battery level</div>' +\n  '<div class=\"value\" style=\"color:'+ lowBatteryColor +'\">'+ batteryLevel +'</div>' +\n  '</div>' +\n  '</div>' +\n  '<div class=\"flex flex-row gap-4\">' +\n  '<div class=\"sensor-details-row flex flex-1 flex-col\">' +\n  '<div class=\"label\">Connection</div>' +\n  '<div class=\"sensor-details-status\" style=\"color:'+ statusColor +';background-color:'+ statusBgColor +'\">' + sensorStatus + '</div>' +\n  '</div>' +\n  '<div class=\"sensor-details-row flex flex-1 flex-col\">' +\n  '<div class=\"label\">Last update</div>' +\n  '<div class=\"value\" style=\"border-bottom:none;\">'+ lastUpdate +'</div>' +\n  '</div>' +\n  '</div>' +\n  '</div>';\n\n\nfunction isNumber(value) {\n  return (typeof value === 'number' && isFinite(value));\n}\n\nfunction processValue(value, dec) {\n  value = parseFloat(value);\n  if (isNumber(value)) {\n    if (isNumber(dec)) {\n      value = parseFloat(value.toFixed(dec));\n    }\n    return value;\n  } else {\n    return '-';\n  }\n}",
            "markdownCss": ".sensor-details-container {\n    height: 100%;\n    padding: 10px 15px;\n    overflow: auto;\n}\n\n.sensor-details-header {\n    color: #29313C;\n    margin-bottom: 16px;\n    font-weight: 500;\n    line-height: 24px;\n    letter-spacing: 0.25px;\n}\n\n.sensor-details-container .sensor-details-row:not(:last-child) {\n    margin-bottom: 20px;\n}\n\n.sensor-details-container .sensor-details-row .label {\n    font-size: 12px;\n    line-height: 16px;\n    letter-spacing: 0.25px;\n    color: #9FA6B4;\n}\n\n.sensor-details-container .sensor-details-row .value {\n    padding: 5px 0 6px 0;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    font-size: 16px;\n    line-height: 24px;\n    letter-spacing: 0.15px;\n    color: #29313C;\n}\n\n.sensor-details-status {\n    width: fit-content;\n    padding: 4px 8px;\n    margin-top: 6px;\n    font-size: 14px;\n    font-weight: 500;\n    line-height: 20px;\n    letter-spacing: 0.25px;\n    border-radius: 8px;\n}"
          },
          "title": "",
          "showTitleIcon": false,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 500,
            "padding": "5px 10px 5px 10px",
            "color": "#29313C",
            "letterSpacing": "0.25px"
          },
          "showLegend": false,
          "useDashboardTimewindow": true,
          "enableDataExport": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "actions": {
            "headerButton": [
              {
                "name": "Edit sensor",
                "icon": "edit",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form [formGroup]=\"editEntityFormGroup\" (ngSubmit)=\"save()\" style=\"width:360px\">\n  <mat-toolbar color=\"primary\">\n    <h2>Edit sensor {{entityName}}</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content class=\"flex flex-col\">\n    <mat-form-field class=\"mat-block flex-1\">\n      <mat-label>Serial number</mat-label>\n      <input matInput formControlName=\"entityName\" required>\n      <mat-error *ngIf=\"editEntityFormGroup.get('entityName').hasError('required')\">\n        Serial number is required.\n      </mat-error>\n    </mat-form-field>\n    <div formGroupName=\"attributes\" class=\"flex flex-col\">\n      <mat-form-field class=\"mat-block flex-1\">\n        <mat-label>Address</mat-label>\n        <input matInput formControlName=\"address\" required>\n        <mat-error *ngIf=\"editEntityFormGroup.get('attributes.address').hasError('required')\">\n          Address is required.\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"mat-block flex-1\">\n        <mat-label>Latitude</mat-label>\n        <input type=\"number\" step=\"0.1\" matInput\n               formControlName=\"latitude\">\n      </mat-form-field>\n      <mat-form-field class=\"mat-block flex-1\">\n        <mat-label>Longitude</mat-label>\n        <input type=\"number\" step=\"0.1\" matInput\n               formControlName=\"longitude\">\n      </mat-form-field>\n    </div>\n  </div>\n  <div mat-dialog-actions class=\"flex items-center justify-end\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || editEntityFormGroup.invalid || !editEntityFormGroup.dirty\">\n      Save\n    </button>\n  </div>\n</form>",
                "customCss": "",
                "customFunction": "const $injector = widgetContext.$scope.$injector;\nconst customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nconst deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nconst attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nconst rxjs = widgetContext.rxjs;\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    const vm = instance;\n    \n    vm.entityId = entityId;\n    vm.entityName = entityName;\n    vm.sensor = null;\n    vm.attributes = {};\n    \n    vm.editEntityFormGroup = vm.fb.group({\n        entityName: ['', [vm.validators.required]],\n        attributes: vm.fb.group({\n            address: ['', [vm.validators.required]],\n            latitude: [null],\n            longitude: [null]\n        })\n    });\n    \n    getEntityInfo();\n    \n    vm.save = () => {\n        vm.editEntityFormGroup.markAsPristine();\n        const formValues = vm.editEntityFormGroup.value;\n        vm.sensor.name = formValues.entityName;\n        vm.sensor.label = formValues.entityLabel;\n        deviceService.saveDevice(vm.sensor).pipe(\n            rxjs.concatMap(() => {\n                return saveAttributes();\n            })\n        ).subscribe(() => {\n            widgetContext.updateAliases();\n            vm.dialogRef.close(null);\n        });\n    };\n    \n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    function getEntityAttributes(attributes) {\n        for (let i = 0; i < attributes.length; i++) {\n            vm.attributes[attributes[i].key] = attributes[i].value;\n        }\n    }\n    \n    function getEntityInfo() {\n        rxjs.forkJoin([\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', ['latitude', 'longitude', 'address']),\n            deviceService.getDevice(entityId.id)\n        ]).subscribe(\n            (data) => {\n                const attrs = data[0];\n                vm.sensor = data[1];\n                getEntityAttributes(attrs);\n                vm.editEntityFormGroup.patchValue({\n                    entityName: vm.entityName,\n                    attributes: vm.attributes\n                });\n            }\n        );\n    }\n    \n    function saveAttributes() {\n        const attributes = vm.editEntityFormGroup.get('attributes').value;\n        const attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key] !== vm.attributes[key]) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(vm.entityId, \"SERVER_SCOPE\", attributesArray);\n        } else {\n            return widgetContext.rxjs.of([]);\n        }\n    }\n}",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "a10c91e9-4ea7-9d0f-5828-e79becf5436b"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "b89177ac-8f67-3ae5-dfc8-945d995ced41",
        "typeFullFqn": "system.cards.markdown_card"
      },
      "6672413e-b50d-c915-a8da-47f873df2458": {
        "type": "alarm",
        "sizeX": 10.5,
        "sizeY": 6.5,
        "config": {
          "timewindow": {
            "hideAggregation": false,
            "hideAggInterval": false,
            "hideTimezone": false,
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 0,
              "timewindowMs": 604800000,
              "quickInterval": "CURRENT_DAY",
              "interval": 1000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0",
          "settings": {
            "enableSelection": false,
            "enableSearch": true,
            "enableSelectColumnDisplay": false,
            "enableFilter": true,
            "enableStickyHeader": true,
            "enableStickyAction": false,
            "reserveSpaceForHiddenAction": "true",
            "displayDetails": false,
            "allowAcknowledgment": false,
            "allowClear": true,
            "displayPagination": false,
            "defaultSortOrder": "-createdTime",
            "useRowStyleFunction": false
          },
          "title": "New Alarms table",
          "dropShadow": false,
          "enableFullscreen": true,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 500,
            "padding": "5px 10px 5px 2px",
            "color": "#29313C",
            "letterSpacing": "0.25px"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "alarmSource": {
            "type": "entity",
            "name": null,
            "entityAliasId": "89427837-ec63-72e5-7388-d55276d731d8",
            "filterId": null,
            "dataKeys": [
              {
                "name": "originator",
                "type": "alarm",
                "label": "Originator",
                "color": "#4caf50",
                "settings": {
                  "useCellStyleFunction": false,
                  "cellStyleFunction": "",
                  "useCellContentFunction": false,
                  "cellContentFunction": ""
                },
                "_hash": 0.2780007688856758
              },
              {
                "name": "createdTime",
                "type": "alarm",
                "label": "Created time",
                "color": "#2196f3",
                "settings": {
                  "useCellStyleFunction": false,
                  "cellStyleFunction": "",
                  "useCellContentFunction": false,
                  "cellContentFunction": ""
                },
                "_hash": 0.021092237451093787
              },
              {
                "name": "type",
                "type": "alarm",
                "label": "Type",
                "color": "#f44336",
                "settings": {
                  "columnWidth": "25%",
                  "useCellStyleFunction": false,
                  "useCellContentFunction": false,
                  "defaultColumnVisibility": "visible",
                  "columnSelectionToDisplay": "enabled",
                  "columnExportOption": "onlyVisible"
                },
                "_hash": 0.7323586880398418,
                "aggregationType": null,
                "units": null,
                "decimals": null,
                "funcBody": null,
                "usePostProcessing": null,
                "postFuncBody": null
              },
              {
                "name": "severity",
                "type": "alarm",
                "label": "Details",
                "color": "#ffc107",
                "settings": {
                  "columnWidth": "0px",
                  "useCellStyleFunction": true,
                  "cellStyleFunction": "return {\n    \"color\": \"#D12730\"\n}",
                  "useCellContentFunction": true,
                  "cellContentFunction": "return alarm.details.data ? parseFloat(alarm.details.data).toFixed(0) + '%' : '-';",
                  "defaultColumnVisibility": "visible",
                  "columnSelectionToDisplay": "enabled",
                  "columnExportOption": "onlyVisible"
                },
                "_hash": 0.06240450485076421,
                "aggregationType": null,
                "units": null,
                "decimals": null,
                "funcBody": null,
                "usePostProcessing": null,
                "postFuncBody": null
              }
            ]
          },
          "alarmsPollingInterval": 5,
          "showTitleIcon": false,
          "titleIcon": "more_horiz",
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "widgetStyle": {},
          "displayTimewindow": true,
          "actions": {
            "headerButton": [],
            "actionCellButton": []
          },
          "datasources": [],
          "enableDataExport": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "alarmFilterConfig": {
            "statusList": [
              "ACTIVE"
            ],
            "severityList": [],
            "typeList": [],
            "searchPropagatedAlarms": false
          }
        },
        "row": 0,
        "col": 0,
        "id": "6672413e-b50d-c915-a8da-47f873df2458",
        "typeFullFqn": "system.alarm_widgets.alarms_table"
      },
      "1c29fe6f-d07a-61c4-2c16-01c861588074": {
        "typeFullFqn": "system.state_chart",
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": "",
              "entityAliasId": "89427837-ec63-72e5-7388-d55276d731d8",
              "dataKeys": [
                {
                  "name": "fullLevel",
                  "type": "timeseries",
                  "label": "Fullness",
                  "color": "#4B535B",
                  "settings": {
                    "yAxisId": "default",
                    "showInLegend": true,
                    "dataHiddenByDefault": false,
                    "type": "line",
                    "lineSettings": {
                      "showLine": true,
                      "step": true,
                      "stepType": "end",
                      "smooth": false,
                      "lineType": "solid",
                      "lineWidth": 2,
                      "showPoints": false,
                      "showPointLabel": false,
                      "pointLabelPosition": "top",
                      "pointLabelFont": {
                        "family": "Roboto",
                        "size": 11,
                        "sizeUnit": "px",
                        "style": "normal",
                        "weight": "400",
                        "lineHeight": "1"
                      },
                      "pointLabelColor": "rgba(0, 0, 0, 0.76)",
                      "enablePointLabelBackground": false,
                      "pointLabelBackground": "rgba(255,255,255,0.56)",
                      "pointShape": "circle",
                      "pointSize": 12,
                      "fillAreaSettings": {
                        "type": "none",
                        "opacity": 0.4,
                        "gradient": {
                          "start": 100,
                          "end": 0
                        }
                      }
                    },
                    "barSettings": {
                      "showBorder": false,
                      "borderWidth": 2,
                      "borderRadius": 0,
                      "showLabel": false,
                      "labelPosition": "top",
                      "labelFont": {
                        "family": "Roboto",
                        "size": 11,
                        "sizeUnit": "px",
                        "style": "normal",
                        "weight": "400",
                        "lineHeight": "1"
                      },
                      "labelColor": "rgba(0, 0, 0, 0.76)",
                      "enableLabelBackground": false,
                      "labelBackground": "rgba(255,255,255,0.56)",
                      "backgroundSettings": {
                        "type": "none",
                        "opacity": 0.4,
                        "gradient": {
                          "start": 100,
                          "end": 0
                        }
                      }
                    },
                    "comparisonSettings": {
                      "showValuesForComparison": false,
                      "comparisonValuesLabel": "",
                      "color": ""
                    }
                  },
                  "_hash": 0.6761280286115938,
                  "decimals": null,
                  "aggregationType": null,
                  "units": "%",
                  "funcBody": null,
                  "usePostProcessing": true,
                  "postFuncBody": "return Math.round(value / 5) * 5;"
                }
              ],
              "alarmFilterConfig": {
                "statusList": [
                  "ACTIVE"
                ]
              },
              "latestDataKeys": []
            }
          ],
          "timewindow": {
            "hideInterval": false,
            "hideLastInterval": false,
            "hideQuickInterval": false,
            "hideAggregation": false,
            "hideAggInterval": false,
            "hideTimezone": false,
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 0,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "interval": 1000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 25000
            },
            "timezone": null
          },
          "showTitle": true,
          "backgroundColor": "rgba(0, 0, 0, 0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "yAxes": {
              "default": {
                "units": "%",
                "decimals": 0,
                "show": true,
                "label": "",
                "labelFont": {
                  "family": "Roboto",
                  "size": 12,
                  "sizeUnit": "px",
                  "style": "normal",
                  "weight": "600",
                  "lineHeight": "1"
                },
                "labelColor": "rgba(0, 0, 0, 0.54)",
                "position": "left",
                "showTickLabels": true,
                "tickLabelFont": {
                  "family": "Roboto",
                  "size": 12,
                  "sizeUnit": "px",
                  "style": "normal",
                  "weight": "400",
                  "lineHeight": "1"
                },
                "tickLabelColor": "#9FA6B4",
                "ticksFormatter": "",
                "showTicks": false,
                "ticksColor": "rgba(0, 0, 0, 0.54)",
                "showLine": false,
                "lineColor": "rgba(0, 0, 0, 0.54)",
                "showSplitLines": true,
                "splitLinesColor": "rgba(0, 0, 0, 0.12)",
                "id": "default",
                "order": 0,
                "interval": null,
                "splitNumber": null,
                "min": null,
                "max": null,
                "ticksGenerator": ""
              }
            },
            "thresholds": [],
            "dataZoom": true,
            "stack": false,
            "xAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "bottom",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 10,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "#9FA6B4",
              "showTicks": false,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": false,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": false,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)",
              "ticksFormat": {}
            },
            "noAggregationBarWidthSettings": {
              "strategy": "group",
              "groupWidth": {
                "relative": true,
                "relativeWidth": 2,
                "absoluteWidth": 1000
              },
              "barWidth": {
                "relative": true,
                "relativeWidth": 2,
                "absoluteWidth": 1000
              }
            },
            "showLegend": false,
            "legendLabelFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "400",
              "lineHeight": "16px"
            },
            "legendLabelColor": "rgba(0, 0, 0, 0.76)",
            "legendConfig": {
              "direction": "column",
              "position": "right",
              "sortDataKeys": false,
              "showMin": false,
              "showMax": false,
              "showAvg": false,
              "showTotal": false,
              "showLatest": false
            },
            "showTooltip": true,
            "tooltipTrigger": "axis",
            "tooltipValueFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "500",
              "lineHeight": "16px"
            },
            "tooltipValueColor": "rgba(0, 0, 0, 0.76)",
            "tooltipValueFormatter": "",
            "tooltipShowDate": true,
            "tooltipDateFormat": {
              "format": null,
              "lastUpdateAgo": false,
              "custom": false,
              "auto": true,
              "autoDateFormatSettings": {
                "millisecond": "MMM dd yyyy HH:mm:ss"
              }
            },
            "tooltipDateFont": {
              "family": "Roboto",
              "size": 11,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "400",
              "lineHeight": "16px"
            },
            "tooltipDateColor": "rgba(0, 0, 0, 0.76)",
            "tooltipDateInterval": true,
            "tooltipBackgroundColor": "rgba(255, 255, 255, 0.76)",
            "tooltipBackgroundBlur": 4,
            "animation": {
              "animation": true,
              "animationThreshold": 2000,
              "animationDuration": 500,
              "animationEasing": "cubicOut",
              "animationDelay": 0,
              "animationDurationUpdate": 300,
              "animationEasingUpdate": "cubicOut",
              "animationDelayUpdate": 0
            },
            "background": {
              "type": "color",
              "color": "#fff",
              "overlay": {
                "enabled": false,
                "color": "rgba(255,255,255,0.72)",
                "blur": 3
              }
            },
            "padding": "12px",
            "states": [],
            "comparisonEnabled": false,
            "timeForComparison": "previousInterval",
            "comparisonCustomIntervalValue": 7200000,
            "comparisonXAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "top",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 10,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "rgba(0, 0, 0, 0.54)",
              "ticksFormat": {},
              "showTicks": true,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": true,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": true,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)"
            },
            "grid": {
              "show": false,
              "backgroundColor": null,
              "borderWidth": 1,
              "borderColor": "#ccc"
            }
          },
          "title": "Fullness",
          "dropShadow": false,
          "enableFullscreen": true,
          "titleStyle": {
            "padding": "5px 10px 5px 0px"
          },
          "configMode": "advanced",
          "actions": {},
          "showTitleIcon": false,
          "titleIcon": "thermostat",
          "iconColor": "#1F6BDD",
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "titleFont": {
            "size": 16,
            "sizeUnit": "px",
            "family": "Roboto",
            "weight": "500",
            "style": "normal",
            "lineHeight": "24px"
          },
          "titleColor": "#29313C",
          "titleTooltip": "",
          "widgetStyle": {},
          "widgetCss": "",
          "pageSize": 1024,
          "units": "",
          "decimals": null,
          "noDataDisplayMessage": "",
          "timewindowStyle": {
            "showIcon": false,
            "iconSize": "24px",
            "icon": null,
            "iconPosition": "left",
            "font": {
              "size": 12,
              "sizeUnit": "px",
              "family": "Roboto",
              "weight": "400",
              "style": "normal",
              "lineHeight": "16px"
            },
            "color": "rgba(0, 0, 0, 0.38)",
            "displayTypePrefix": true
          },
          "margin": "0px",
          "borderRadius": "",
          "iconSize": "0px",
          "enableDataExport": true
        },
        "row": 0,
        "col": 0,
        "id": "1c29fe6f-d07a-61c4-2c16-01c861588074"
      },
      "3432fdd3-4ce7-6221-f6f2-e551f414898a": {
        "typeFullFqn": "system.time_series_chart",
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": "",
              "entityAliasId": "89427837-ec63-72e5-7388-d55276d731d8",
              "dataKeys": [
                {
                  "name": "batteryLevel",
                  "type": "timeseries",
                  "label": "Battery level",
                  "color": "#4B535B",
                  "settings": {
                    "yAxisId": "default",
                    "showInLegend": true,
                    "dataHiddenByDefault": false,
                    "type": "line",
                    "lineSettings": {
                      "showLine": true,
                      "step": false,
                      "stepType": "start",
                      "smooth": false,
                      "lineType": "solid",
                      "lineWidth": 2,
                      "showPoints": false,
                      "showPointLabel": false,
                      "pointLabelPosition": "top",
                      "pointLabelFont": {
                        "family": "Roboto",
                        "size": 11,
                        "sizeUnit": "px",
                        "style": "normal",
                        "weight": "400",
                        "lineHeight": "1"
                      },
                      "pointLabelColor": "rgba(0, 0, 0, 0.76)",
                      "enablePointLabelBackground": false,
                      "pointLabelBackground": "rgba(255,255,255,0.56)",
                      "pointShape": "circle",
                      "pointSize": 12,
                      "fillAreaSettings": {
                        "type": "none",
                        "opacity": 0.4,
                        "gradient": {
                          "start": 100,
                          "end": 0
                        }
                      }
                    },
                    "barSettings": {
                      "showBorder": false,
                      "borderWidth": 2,
                      "borderRadius": 0,
                      "showLabel": false,
                      "labelPosition": "top",
                      "labelFont": {
                        "family": "Roboto",
                        "size": 11,
                        "sizeUnit": "px",
                        "style": "normal",
                        "weight": "400",
                        "lineHeight": "1"
                      },
                      "labelColor": "rgba(0, 0, 0, 0.76)",
                      "enableLabelBackground": false,
                      "labelBackground": "rgba(255,255,255,0.56)",
                      "backgroundSettings": {
                        "type": "none",
                        "opacity": 0.4,
                        "gradient": {
                          "start": 100,
                          "end": 0
                        }
                      }
                    },
                    "tooltipValueFormatter": null,
                    "comparisonSettings": {
                      "showValuesForComparison": false,
                      "comparisonValuesLabel": "",
                      "color": ""
                    }
                  },
                  "_hash": 0.9766341436744059,
                  "units": "%",
                  "decimals": 1,
                  "aggregationType": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ],
              "alarmFilterConfig": {
                "statusList": [
                  "ACTIVE"
                ]
              },
              "latestDataKeys": []
            }
          ],
          "timewindow": {
            "hideInterval": false,
            "hideLastInterval": false,
            "hideQuickInterval": false,
            "hideAggregation": false,
            "hideAggInterval": false,
            "hideTimezone": false,
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 0,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "interval": 1000
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            },
            "timezone": null
          },
          "showTitle": true,
          "backgroundColor": "rgba(0, 0, 0, 0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "showLegend": false,
            "legendConfig": {
              "direction": "column",
              "position": "top",
              "sortDataKeys": false,
              "showMin": false,
              "showMax": false,
              "showAvg": true,
              "showTotal": false,
              "showLatest": false
            },
            "thresholds": [],
            "dataZoom": true,
            "stack": false,
            "yAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "left",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "rgba(0, 0, 0, 0.54)",
              "showTicks": true,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": true,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": true,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)"
            },
            "xAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "bottom",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 10,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "#9FA6B4",
              "showTicks": false,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": false,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": false,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)",
              "ticksFormat": {}
            },
            "legendLabelFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "400",
              "lineHeight": "16px"
            },
            "legendLabelColor": "rgba(0, 0, 0, 0.76)",
            "showTooltip": true,
            "tooltipTrigger": "axis",
            "tooltipValueFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "500",
              "lineHeight": "16px"
            },
            "tooltipValueColor": "rgba(0, 0, 0, 0.76)",
            "tooltipShowDate": true,
            "tooltipDateFormat": {
              "format": null,
              "lastUpdateAgo": false,
              "custom": false,
              "auto": true,
              "autoDateFormatSettings": {
                "millisecond": "MMM dd yyyy HH:mm:ss"
              }
            },
            "tooltipDateFont": {
              "family": "Roboto",
              "size": 11,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "400",
              "lineHeight": "16px"
            },
            "tooltipDateColor": "rgba(0, 0, 0, 0.76)",
            "tooltipDateInterval": true,
            "tooltipBackgroundColor": "rgba(255, 255, 255, 0.76)",
            "tooltipBackgroundBlur": 4,
            "background": {
              "type": "color",
              "color": "#fff",
              "overlay": {
                "enabled": false,
                "color": "rgba(255,255,255,0.72)",
                "blur": 3
              }
            },
            "yAxes": {
              "default": {
                "units": "%",
                "decimals": null,
                "show": true,
                "label": "",
                "labelFont": {
                  "family": "Roboto",
                  "size": 12,
                  "sizeUnit": "px",
                  "style": "normal",
                  "weight": "600",
                  "lineHeight": "1"
                },
                "labelColor": "rgba(0, 0, 0, 0.54)",
                "position": "left",
                "showTickLabels": true,
                "tickLabelFont": {
                  "family": "Roboto",
                  "size": 12,
                  "sizeUnit": "px",
                  "style": "normal",
                  "weight": "400",
                  "lineHeight": "1"
                },
                "tickLabelColor": "#9FA6B4",
                "ticksFormatter": null,
                "showTicks": false,
                "ticksColor": "rgba(0, 0, 0, 0.54)",
                "showLine": false,
                "lineColor": "rgba(0, 0, 0, 0.54)",
                "showSplitLines": true,
                "splitLinesColor": "rgba(0, 0, 0, 0.12)",
                "id": "default",
                "order": 0,
                "ticksGenerator": null,
                "interval": null,
                "splitNumber": null,
                "min": 0,
                "max": 100
              }
            },
            "noAggregationBarWidthSettings": {
              "strategy": "group",
              "groupWidth": {
                "relative": true,
                "relativeWidth": 2,
                "absoluteWidth": 1000
              },
              "barWidth": {
                "relative": true,
                "relativeWidth": 2,
                "absoluteWidth": 1000
              }
            },
            "animation": {
              "animation": true,
              "animationThreshold": 2000,
              "animationDuration": 500,
              "animationEasing": "cubicOut",
              "animationDelay": 0,
              "animationDurationUpdate": 300,
              "animationEasingUpdate": "cubicOut",
              "animationDelayUpdate": 0
            },
            "padding": "12px",
            "comparisonEnabled": false,
            "timeForComparison": "previousInterval",
            "comparisonCustomIntervalValue": 7200000,
            "comparisonXAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "top",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 10,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "rgba(0, 0, 0, 0.54)",
              "ticksFormat": {},
              "showTicks": true,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": true,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": true,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)"
            },
            "grid": {
              "show": false,
              "backgroundColor": null,
              "borderWidth": 1,
              "borderColor": "#ccc"
            }
          },
          "title": "Battery level",
          "dropShadow": false,
          "enableFullscreen": true,
          "titleStyle": {
            "padding": "5px 10px 5px 0px"
          },
          "configMode": "basic",
          "actions": {},
          "showTitleIcon": false,
          "titleIcon": "thermostat",
          "iconColor": "#1F6BDD",
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "titleFont": {
            "size": 16,
            "sizeUnit": "px",
            "family": "Roboto",
            "weight": "500",
            "style": "normal",
            "lineHeight": "24px"
          },
          "titleColor": "#29313C",
          "titleTooltip": "",
          "widgetStyle": {},
          "widgetCss": "",
          "pageSize": 1024,
          "units": "",
          "decimals": null,
          "noDataDisplayMessage": "",
          "timewindowStyle": {
            "showIcon": false,
            "iconSize": "24px",
            "icon": null,
            "iconPosition": "left",
            "font": {
              "size": 12,
              "sizeUnit": "px",
              "family": "Roboto",
              "weight": "400",
              "style": "normal",
              "lineHeight": "16px"
            },
            "color": "rgba(0, 0, 0, 0.38)",
            "displayTypePrefix": true
          },
          "margin": "0px",
          "borderRadius": "",
          "iconSize": "0px",
          "enableDataExport": true
        },
        "row": 0,
        "col": 0,
        "id": "3432fdd3-4ce7-6221-f6f2-e551f414898a"
      },
      "24a4752e-7f68-011f-eeaa-2839664028bc": {
        "typeFullFqn": "system.map",
        "type": "latest",
        "sizeX": 8.5,
        "sizeY": 6,
        "config": {
          "datasources": [],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1742976686812,
                "endTimeMs": 1743063086812
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "rgba(0, 0, 0, 0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "mapType": "geoMap",
            "layers": [
              {
                "label": "{i18n:widgets.maps.layer.roadmap}",
                "provider": "openstreet",
                "layerType": "CartoDB.Positron",
                "referenceLayer": null
              },
              {
                "label": "{i18n:widgets.maps.layer.satellite}",
                "provider": "openstreet",
                "layerType": "Esri.WorldImagery"
              },
              {
                "label": "{i18n:widgets.maps.layer.hybrid}",
                "provider": "openstreet",
                "layerType": "Esri.WorldImagery",
                "referenceLayer": "openstreetmap_hybrid"
              }
            ],
            "imageSource": null,
            "markers": [
              {
                "dsType": "entity",
                "dsLabel": "",
                "dsDeviceId": null,
                "dsEntityAliasId": "6ee2c775-15f1-e7dc-a368-12a263215530",
                "dsFilterId": "b57ed975-3305-c009-023a-bbb9d8fd36ee",
                "additionalDataKeys": [
                  {
                    "name": "active",
                    "type": "attribute",
                    "label": "active",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.6938682084400549
                  },
                  {
                    "name": "isFull",
                    "type": "attribute",
                    "label": "isFull",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.7663040659848686
                  },
                  {
                    "name": "isLowBattery",
                    "type": "attribute",
                    "label": "isLowBattery",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.5782043187469397
                  },
                  {
                    "name": "fullLevel",
                    "type": "timeseries",
                    "label": "fullLevel",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.4754909823353195
                  },
                  {
                    "name": "batteryLevel",
                    "type": "timeseries",
                    "label": "batteryLevel",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.8989016678459154
                  },
                  {
                    "name": "address",
                    "type": "attribute",
                    "label": "address",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.6736783729168021
                  }
                ],
                "label": {
                  "show": false,
                  "type": "pattern",
                  "pattern": "",
                  "patternFunction": null
                },
                "tooltip": {
                  "show": true,
                  "trigger": "click",
                  "autoclose": true,
                  "type": "function",
                  "pattern": "",
                  "offsetX": 0,
                  "offsetY": -1,
                  "patternFunction": "const fullLevel = processValue(data.fullLevel, 0);\nconst batteryLevel = processValue(data.batteryLevel, 0);\nconst isFull = data.isFull && data.isFull !== 'false';\nconst isLowBattery = data.isLowBattery && data.isLowBattery !== 'false';\nconst fullColor = isFull ? '#D12730' : '#29313C';\nconst lowBatteryColor = isLowBattery ? '#D12730' : '#29313C';\nconst isActive = data.active === 'true';\nconst status = isActive ? 'Online' : 'Offline';\nconst color = isActive ? '#3AA94D' : '#C42F37';\nconst bgColor = isActive ? 'rgba(58, 169, 77, 0.08)' : 'rgba(196, 47, 55, 0.08)';\nconst address = data.address ? data.address : 'N/A';\nconst lastUpdate = (data['batteryLevel|ts'] || data['fullLevel|ts']) ? moment(Math.max(data['batteryLevel|ts'], data['fullLevel|ts'])).format('D MMM YYYY HH:mm') : 'N/A';\n\nreturn '<div style=\"display:flex;flex-direction:column;margin-bottom:8px;font-family:\\'Roboto\\';font-weight:500;font-size:16px;line-height:24px;letter-spacing:0.25px;color:#29313C\">' +\n            '<div>Sensor ${entityName}</div>' +\n            '<div style=\"width: 100%;border-bottom:1px solid rgba(0, 0, 0, 0.12);margin:12px 0;\"></div>' +\n            '<div style=\"display:flex;flex-direction:row;align-items:baseline;margin-bottom:9px;\">' +\n                '<div style=\"font-size:13px;line-height:16px;font-weight:500;color:rgba(0, 0, 0, 0.38);width:100px\">Address</div>' +\n                '<div style=\"font-size:14px;line-height:20px;font-weight:500;color:#29313C;letter-spacing:0.25px\">'+ address +'</div>' +\n            '</div>' +\n            '<div style=\"display:flex;flex-direction:row;align-items:baseline;margin-bottom:9px;\">' +\n                '<div style=\"font-size:13px;line-height:16px;font-weight:500;color:rgba(0, 0, 0, 0.38);width:100px\">Fullness</div>' +\n                '<div style=\"color:'+ fullColor +';font-size:14px;line-height:20px;font-weight:500;letter-spacing:0.25px\">'+ fullLevel +'%</div>' +\n            '</div>' +\n            '<div style=\"display:flex;flex-direction:row;align-items:baseline;margin-bottom:9px;\">' +\n                '<div style=\"font-size:13px;line-height:16px;font-weight:500;color:rgba(0, 0, 0, 0.38);width:100px\">Battery level</div>' +\n                '<div style=\"color:'+ lowBatteryColor +';font-size:14px;line-height:20px;font-weight:500;letter-spacing:0.25px\">'+ batteryLevel +'%</div>' +\n            '</div>' +\n            '<div style=\"display:flex;flex-direction:row;align-items:baseline;margin-bottom:9px;\">' +\n                '<div style=\"font-size:13px;line-height:16px;font-weight:500;color:rgba(0, 0, 0, 0.38);width:100px\">Connection</div>' +\n                '<div style=\"font-size:14px;width:fit-content;padding:4px 8px;font-weight:500;line-height:20px;letter-spacing:0.25px;border-radius:8px;color:'+ color +';background-color:'+ bgColor +'\">' + status + '</div>' +\n            '</div>' +\n            '<div style=\"display:flex;flex-direction:row;align-items:baseline;margin-bottom:13px;\">' +\n                '<div style=\"font-size:13px;line-height:16px;font-weight:500;color:rgba(0, 0, 0, 0.38);width:100px\">Last update</div>' +\n                '<div style=\"font-size:14px;line-height:20px;font-weight:500;color:#29313C;letter-spacing:0.25px\">'+ lastUpdate +'</div>' +\n            '</div>' +\n       '</div>' +\n       '<div style=\"text-align: center\">' +\n            '<link-act name=\"sensor-details\">Details ></link-act>' +\n       '</div>';\n\nfunction isNumber(value) {\n    return (typeof value === 'number' && isFinite(value));\n}\n\nfunction processValue(value, dec) {\n    value = parseFloat(value);\n    if (isNumber(value)) {\n        if (isNumber(dec)) {\n            value = parseFloat(value.toFixed(dec));\n        }\n        return value;\n    } else {\n        return 'N/A';\n    }\n}",
                  "tagActions": [
                    {
                      "name": "sensor-details",
                      "type": "openDashboardState",
                      "targetDashboardStateId": "selected_bin",
                      "setEntityId": true,
                      "stateEntityParamName": null,
                      "openRightLayout": false,
                      "openInSeparateDialog": false,
                      "openInPopover": false
                    }
                  ]
                },
                "click": {
                  "type": "doNothing"
                },
                "groups": null,
                "edit": {
                  "enabledActions": [],
                  "attributeScope": "SERVER_SCOPE",
                  "snappable": false
                },
                "xKey": {
                  "name": "latitude",
                  "label": "latitude",
                  "type": "attribute",
                  "settings": {},
                  "color": "#2196f3"
                },
                "yKey": {
                  "name": "longitude",
                  "label": "longitude",
                  "type": "attribute",
                  "settings": {},
                  "color": "#2196f3"
                },
                "markerType": "icon",
                "markerShape": {
                  "shape": "markerShape1",
                  "size": 34,
                  "color": {
                    "type": "constant",
                    "color": "#307FE5"
                  }
                },
                "markerIcon": {
                  "size": 32,
                  "color": {
                    "type": "function",
                    "color": "#757575",
                    "range": null,
                    "colorFunction": "let color = '#198038';\nconst isFull = data.isFull && data.isFull !== 'false';\nconst isLowBattery = data.isLowBattery && data.isLowBattery !== 'false';\nconst isActive = data.active && data.active !== 'false';\n\nif (!isActive) {\n    color = '#757575';\n} else if (isFull) {\n    color = '#d12730';\n} else if (isLowBattery) {\n    color = '#ff8a00';\n}\n\nreturn color;"
                  },
                  "iconContainer": "iconContainer6",
                  "icon": "mdi:trash-can-outline"
                },
                "markerImage": {
                  "type": "image",
                  "image": "/assets/markers/shape1.svg",
                  "imageSize": 34
                },
                "markerOffsetX": 0.5,
                "markerOffsetY": 1,
                "markerClustering": {
                  "enable": true,
                  "zoomOnClick": true,
                  "maxZoom": null,
                  "maxClusterRadius": 80,
                  "zoomAnimation": true,
                  "showCoverageOnHover": true,
                  "spiderfyOnMaxZoom": false,
                  "chunkedLoad": false,
                  "lazyLoad": true,
                  "useClusterMarkerColorFunction": true,
                  "clusterMarkerColorFunction": "let isAlarm = false;\nfor(let i=0; i < data.length; i++) {\n    if (data[i].isFull === 'true' || data[i].isLowBattery === 'true' || data[i].active === 'false') {\n        isAlarm = true;\n        break;\n    }\n}\n\nreturn isAlarm ? '#fbac36' : '#73c65e';"
                }
              }
            ],
            "polygons": [],
            "circles": [],
            "additionalDataSources": [],
            "controlsPosition": "topleft",
            "zoomActions": [
              "scroll",
              "doubleClick",
              "controlButtons"
            ],
            "scales": [
              "metric"
            ],
            "dragModeButton": false,
            "fitMapBounds": true,
            "useDefaultCenterPosition": false,
            "defaultCenterPosition": "0,0",
            "defaultZoomLevel": 0,
            "mapPageSize": 16384,
            "mapActionButtons": [],
            "background": {
              "type": "color",
              "color": "#fff",
              "overlay": {
                "enabled": false,
                "color": "rgba(255,255,255,0.72)",
                "blur": 3
              }
            },
            "padding": "8px"
          },
          "title": "Map",
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": true,
          "widgetStyle": {},
          "widgetCss": "",
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "configMode": "basic",
          "titleFont": null,
          "titleColor": null,
          "margin": "0px",
          "borderRadius": "",
          "iconSize": "24px",
          "titleIcon": "map",
          "iconColor": "#1F6BDD",
          "actions": {},
          "enableDataExport": false
        },
        "row": 0,
        "col": 0,
        "id": "24a4752e-7f68-011f-eeaa-2839664028bc"
      },
      "bea7eccf-f333-e2b9-41c1-ecd2640ad303": {
        "typeFullFqn": "system.map",
        "type": "latest",
        "sizeX": 8.5,
        "sizeY": 6,
        "config": {
          "datasources": [],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1742977623861,
                "endTimeMs": 1743064023861
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "rgba(0, 0, 0, 0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "mapType": "geoMap",
            "layers": [
              {
                "label": "{i18n:widgets.maps.layer.roadmap}",
                "provider": "openstreet",
                "layerType": "CartoDB.Positron",
                "referenceLayer": null
              },
              {
                "label": "{i18n:widgets.maps.layer.satellite}",
                "provider": "openstreet",
                "layerType": "Esri.WorldImagery"
              },
              {
                "label": "{i18n:widgets.maps.layer.hybrid}",
                "provider": "openstreet",
                "layerType": "Esri.WorldImagery",
                "referenceLayer": "openstreetmap_hybrid"
              }
            ],
            "imageSource": null,
            "markers": [
              {
                "dsType": "entity",
                "dsLabel": "",
                "dsDeviceId": null,
                "dsEntityAliasId": "89427837-ec63-72e5-7388-d55276d731d8",
                "dsFilterId": null,
                "additionalDataKeys": [
                  {
                    "name": "active",
                    "type": "attribute",
                    "label": "active",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.3120230024243247
                  },
                  {
                    "name": "isLowBattery",
                    "type": "attribute",
                    "label": "isLowBattery",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.6053110699421451
                  },
                  {
                    "name": "isFull",
                    "type": "attribute",
                    "label": "isFull",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.6063832408664489
                  }
                ],
                "label": {
                  "show": false,
                  "type": "pattern",
                  "pattern": "",
                  "patternFunction": null
                },
                "tooltip": {
                  "show": false,
                  "trigger": "click",
                  "autoclose": true,
                  "type": "pattern",
                  "pattern": "",
                  "offsetX": 0,
                  "offsetY": -1,
                  "patternFunction": null,
                  "tagActions": null
                },
                "click": {
                  "type": "doNothing"
                },
                "groups": null,
                "edit": {
                  "enabledActions": [
                    "add",
                    "move",
                    "remove"
                  ],
                  "attributeScope": "SERVER_SCOPE",
                  "snappable": false
                },
                "xKey": {
                  "name": "latitude",
                  "label": "latitude",
                  "type": "attribute",
                  "settings": {},
                  "color": "#2196f3"
                },
                "yKey": {
                  "name": "longitude",
                  "label": "longitude",
                  "type": "attribute",
                  "settings": {},
                  "color": "#2196f3"
                },
                "markerType": "icon",
                "markerShape": {
                  "shape": "markerShape1",
                  "size": 34,
                  "color": {
                    "type": "constant",
                    "color": "#307FE5"
                  }
                },
                "markerIcon": {
                  "size": 32,
                  "color": {
                    "type": "function",
                    "color": "#757575",
                    "range": null,
                    "colorFunction": "let color = '#198038';\nconst isFull = data.isFull && data.isFull !== 'false';\nconst isLowBattery = data.isLowBattery && data.isLowBattery !== 'false';\nconst isActive = data.active && data.active !== 'false';\n\nif (!isActive) {\n    color = '#757575';\n} else if (isFull) {\n    color = '#d12730';\n} else if (isLowBattery) {\n    color = '#ff8a00';\n}\n\nreturn color;"
                  },
                  "iconContainer": "iconContainer6",
                  "icon": "mdi:trash-can-outline"
                },
                "markerImage": {
                  "type": "image",
                  "image": "/assets/markers/shape1.svg",
                  "imageSize": 34
                },
                "markerOffsetX": 0.5,
                "markerOffsetY": 1,
                "markerClustering": {
                  "enable": false,
                  "zoomOnClick": true,
                  "maxZoom": null,
                  "maxClusterRadius": 80,
                  "zoomAnimation": true,
                  "showCoverageOnHover": true,
                  "spiderfyOnMaxZoom": false,
                  "chunkedLoad": false,
                  "lazyLoad": true,
                  "useClusterMarkerColorFunction": false,
                  "clusterMarkerColorFunction": null
                }
              }
            ],
            "polygons": [],
            "circles": [],
            "additionalDataSources": [],
            "controlsPosition": "topleft",
            "zoomActions": [
              "scroll",
              "doubleClick",
              "controlButtons"
            ],
            "scales": [
              "metric"
            ],
            "dragModeButton": false,
            "fitMapBounds": true,
            "useDefaultCenterPosition": false,
            "defaultCenterPosition": "0,0",
            "defaultZoomLevel": 5,
            "mapPageSize": 16384,
            "mapActionButtons": [],
            "background": {
              "type": "color",
              "color": "#fff",
              "overlay": {
                "enabled": false,
                "color": "rgba(255,255,255,0.72)",
                "blur": 3
              }
            },
            "padding": "8px"
          },
          "title": "Map",
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": true,
          "widgetStyle": {},
          "widgetCss": "",
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "configMode": "basic",
          "titleFont": null,
          "titleColor": null,
          "margin": "0px",
          "borderRadius": "",
          "iconSize": "24px",
          "titleIcon": "map",
          "iconColor": "#1F6BDD",
          "actions": {},
          "enableDataExport": false
        },
        "row": 0,
        "col": 0,
        "id": "bea7eccf-f333-e2b9-41c1-ecd2640ad303"
      }
    },
    "states": {
      "default": {
        "name": "Waste Management Administration",
        "root": true,
        "layouts": {
          "main": {
            "widgets": {
              "6743d611-3f49-5caf-4e28-c06eeebbe225": {
                "sizeX": 7,
                "sizeY": 4,
                "row": 0,
                "col": 0,
                "resizable": true,
                "mobileHeight": 1
              },
              "81c766cd-ae80-9f5e-fa44-9717cb1ba84f": {
                "sizeX": 7,
                "sizeY": 4,
                "row": 0,
                "col": 7,
                "resizable": true,
                "mobileHeight": 1
              },
              "fdcc234a-0d39-30b8-318a-9fad15085bb0": {
                "sizeX": 7,
                "sizeY": 4,
                "row": 0,
                "col": 14,
                "resizable": true,
                "mobileHeight": 1
              },
              "369fcee9-5f64-e56d-d723-64f46ec383d1": {
                "sizeX": 7,
                "sizeY": 4,
                "row": 0,
                "col": 21,
                "resizable": true,
                "mobileHeight": 1
              },
              "14b9092d-f098-0ce9-e214-3e19032d450a": {
                "sizeX": 28,
                "sizeY": 20,
                "row": 4,
                "col": 0,
                "resizable": true,
                "mobileHeight": 5
              },
              "bd47533e-1ef8-bea5-e982-728322a17536": {
                "sizeX": 28,
                "sizeY": 17,
                "row": 24,
                "col": 0,
                "resizable": true,
                "mobileHeight": 5
              },
              "24a4752e-7f68-011f-eeaa-2839664028bc": {
                "sizeX": 36,
                "sizeY": 41,
                "mobileHeight": 4,
                "resizable": true,
                "row": 0,
                "col": 28
              }
            },
            "gridSettings": {
              "backgroundColor": "#f9f9fb",
              "columns": 64,
              "margin": 16,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": false,
              "mobileRowHeight": 70,
              "outerMargin": true,
              "layoutType": "default",
              "minColumns": 64,
              "viewFormat": "grid",
              "rowHeight": 70
            }
          }
        }
      },
      "selected_bin": {
        "name": "Sensor ${entityName}",
        "root": false,
        "layouts": {
          "main": {
            "widgets": {
              "b89177ac-8f67-3ae5-dfc8-945d995ced41": {
                "sizeX": 8,
                "sizeY": 8,
                "row": 0,
                "col": 0,
                "resizable": true,
                "mobileHeight": 6
              },
              "6672413e-b50d-c915-a8da-47f873df2458": {
                "sizeX": 17,
                "sizeY": 8,
                "row": 8,
                "col": 0
              },
              "1c29fe6f-d07a-61c4-2c16-01c861588074": {
                "sizeX": 15,
                "sizeY": 8,
                "row": 0,
                "col": 17
              },
              "3432fdd3-4ce7-6221-f6f2-e551f414898a": {
                "sizeX": 15,
                "sizeY": 8,
                "row": 8,
                "col": 17
              },
              "bea7eccf-f333-e2b9-41c1-ecd2640ad303": {
                "sizeX": 9,
                "sizeY": 8,
                "row": 0,
                "col": 8
              }
            },
            "gridSettings": {
              "backgroundColor": "#f9f9fb",
              "columns": 32,
              "margin": 16,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": false,
              "mobileRowHeight": 50,
              "outerMargin": true,
              "layoutType": "default",
              "minColumns": 32,
              "viewFormat": "grid",
              "rowHeight": 70
            }
          }
        }
      }
    },
    "entityAliases": {
      "6ee2c775-15f1-e7dc-a368-12a263215530": {
        "id": "6ee2c775-15f1-e7dc-a368-12a263215530",
        "alias": "Waste Sensors",
        "filter": {
          "type": "deviceType",
          "resolveMultiple": true,
          "deviceNameFilter": "",
          "deviceTypes": [
            "Waste Sensor"
          ]
        }
      },
      "bbd8598b-83a5-5da8-43d3-4fd989919131": {
        "id": "bbd8598b-83a5-5da8-43d3-4fd989919131",
        "alias": "Current User",
        "filter": {
          "type": "singleEntity",
          "resolveMultiple": false,
          "singleEntity": {
            "entityType": "CURRENT_USER",
            "id": "13814000-1dd2-11b2-8080-808080808080"
          }
        }
      },
      "89427837-ec63-72e5-7388-d55276d731d8": {
        "id": "89427837-ec63-72e5-7388-d55276d731d8",
        "alias": "Sensor",
        "filter": {
          "type": "stateEntity",
          "resolveMultiple": false,
          "stateEntityParamName": null,
          "defaultStateEntity": null
        }
      }
    },
    "filters": {
      "b57ed975-3305-c009-023a-bbb9d8fd36ee": {
        "id": "b57ed975-3305-c009-023a-bbb9d8fd36ee",
        "filter": "Bins filter",
        "keyFilters": [
          {
            "key": {
              "type": "ATTRIBUTE",
              "key": "isFull"
            },
            "valueType": "BOOLEAN",
            "predicates": [
              {
                "keyFilterPredicate": {
                  "operation": "OR",
                  "predicates": [
                    {
                      "keyFilterPredicate": {
                        "operation": "EQUAL",
                        "value": {
                          "defaultValue": true,
                          "dynamicValue": null
                        },
                        "type": "BOOLEAN"
                      },
                      "userInfo": {
                        "editable": true,
                        "label": "",
                        "autogeneratedLabel": true,
                        "order": 0
                      }
                    },
                    {
                      "keyFilterPredicate": {
                        "operation": "EQUAL",
                        "value": {
                          "defaultValue": false,
                          "dynamicValue": {
                            "sourceType": "CURRENT_USER",
                            "sourceAttribute": "displayFullBins",
                            "inherit": false
                          }
                        },
                        "type": "BOOLEAN"
                      },
                      "userInfo": {
                        "editable": true,
                        "label": "",
                        "autogeneratedLabel": true,
                        "order": 0
                      }
                    }
                  ],
                  "type": "COMPLEX"
                },
                "userInfo": {
                  "editable": true,
                  "label": "",
                  "autogeneratedLabel": true,
                  "order": 0
                }
              }
            ]
          },
          {
            "key": {
              "type": "ATTRIBUTE",
              "key": "isLowBattery"
            },
            "valueType": "BOOLEAN",
            "predicates": [
              {
                "keyFilterPredicate": {
                  "operation": "OR",
                  "predicates": [
                    {
                      "keyFilterPredicate": {
                        "operation": "EQUAL",
                        "value": {
                          "defaultValue": true,
                          "dynamicValue": null
                        },
                        "type": "BOOLEAN"
                      },
                      "userInfo": {
                        "editable": true,
                        "label": "",
                        "autogeneratedLabel": true,
                        "order": 0
                      }
                    },
                    {
                      "keyFilterPredicate": {
                        "operation": "EQUAL",
                        "value": {
                          "defaultValue": false,
                          "dynamicValue": {
                            "sourceType": "CURRENT_USER",
                            "sourceAttribute": "displayLowBatteryBins",
                            "inherit": false
                          }
                        },
                        "type": "BOOLEAN"
                      },
                      "userInfo": {
                        "editable": true,
                        "label": "",
                        "autogeneratedLabel": true,
                        "order": 0
                      }
                    }
                  ],
                  "type": "COMPLEX"
                },
                "userInfo": {
                  "editable": true,
                  "label": "",
                  "autogeneratedLabel": true,
                  "order": 0
                }
              }
            ]
          },
          {
            "key": {
              "type": "ATTRIBUTE",
              "key": "active"
            },
            "valueType": "BOOLEAN",
            "predicates": [
              {
                "keyFilterPredicate": {
                  "operation": "OR",
                  "predicates": [
                    {
                      "keyFilterPredicate": {
                        "operation": "EQUAL",
                        "value": {
                          "defaultValue": false,
                          "dynamicValue": null
                        },
                        "type": "BOOLEAN"
                      },
                      "userInfo": {
                        "editable": true,
                        "label": "",
                        "autogeneratedLabel": true,
                        "order": 0
                      }
                    },
                    {
                      "keyFilterPredicate": {
                        "operation": "NOT_EQUAL",
                        "value": {
                          "defaultValue": false,
                          "dynamicValue": {
                            "sourceType": "CURRENT_USER",
                            "sourceAttribute": "displayOfflineBins",
                            "inherit": false
                          }
                        },
                        "type": "BOOLEAN"
                      },
                      "userInfo": {
                        "editable": true,
                        "label": "",
                        "autogeneratedLabel": true,
                        "order": 0
                      }
                    }
                  ],
                  "type": "COMPLEX"
                },
                "userInfo": {
                  "editable": true,
                  "label": "",
                  "autogeneratedLabel": true,
                  "order": 0
                }
              }
            ]
          }
        ],
        "editable": true
      },
      "4a477eb5-ba36-f5a8-0723-00d76f5f5687": {
        "id": "4a477eb5-ba36-f5a8-0723-00d76f5f5687",
        "filter": "Full bins",
        "keyFilters": [
          {
            "key": {
              "type": "ATTRIBUTE",
              "key": "isFull"
            },
            "valueType": "BOOLEAN",
            "predicates": [
              {
                "keyFilterPredicate": {
                  "operation": "EQUAL",
                  "value": {
                    "defaultValue": true,
                    "dynamicValue": null
                  },
                  "type": "BOOLEAN"
                },
                "userInfo": {
                  "editable": true,
                  "label": "",
                  "autogeneratedLabel": true,
                  "order": 0
                }
              }
            ]
          }
        ],
        "editable": true
      },
      "b01ebf89-e19a-7627-14f7-a4f8c597b2fb": {
        "id": "b01ebf89-e19a-7627-14f7-a4f8c597b2fb",
        "filter": "Low Battery bins",
        "keyFilters": [
          {
            "key": {
              "type": "ATTRIBUTE",
              "key": "isLowBattery"
            },
            "valueType": "BOOLEAN",
            "predicates": [
              {
                "keyFilterPredicate": {
                  "operation": "EQUAL",
                  "value": {
                    "defaultValue": true,
                    "dynamicValue": null
                  },
                  "type": "BOOLEAN"
                },
                "userInfo": {
                  "editable": true,
                  "label": "",
                  "autogeneratedLabel": true,
                  "order": 0
                }
              }
            ]
          }
        ],
        "editable": true
      },
      "cfdc11b4-28e0-0332-de61-fa20e4c17e56": {
        "id": "cfdc11b4-28e0-0332-de61-fa20e4c17e56",
        "filter": "Offline bins",
        "keyFilters": [
          {
            "key": {
              "type": "ATTRIBUTE",
              "key": "active"
            },
            "valueType": "BOOLEAN",
            "predicates": [
              {
                "keyFilterPredicate": {
                  "operation": "NOT_EQUAL",
                  "value": {
                    "defaultValue": true,
                    "dynamicValue": null
                  },
                  "type": "BOOLEAN"
                },
                "userInfo": {
                  "editable": true,
                  "label": "",
                  "autogeneratedLabel": true,
                  "order": 0
                }
              }
            ]
          }
        ],
        "editable": true
      }
    },
    "timewindow": {
      "hideAggregation": false,
      "hideAggInterval": false,
      "hideTimezone": false,
      "selectedTab": 0,
      "realtime": {
        "realtimeType": 0,
        "timewindowMs": 604800000,
        "quickInterval": "CURRENT_DAY",
        "interval": 1800000
      },
      "aggregation": {
        "type": "NONE",
        "limit": 25000
      }
    },
    "settings": {
      "stateControllerId": "entity",
      "showTitle": false,
      "showDashboardsSelect": false,
      "showEntitiesSelect": false,
      "showDashboardTimewindow": true,
      "showDashboardExport": true,
      "toolbarAlwaysOpen": true,
      "titleColor": "rgba(0,0,0,0.870588)",
      "showDashboardLogo": false,
      "dashboardLogoUrl": null,
      "hideToolbar": false,
      "showFilters": false,
      "showUpdateDashboardImage": false,
      "dashboardCss": ".tb-widget-container > .tb-widget {\n    border-radius: 8px;\n    box-shadow: 0px 2px 8px rgba(222, 223, 224, 0.25);\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget {\n    color: #4B535B !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-markdown-view {\n    overflow: hidden !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-table .mat-header-cell {\n    color: #9FA6B4 !important;\n    font-weight: 500;\n    font-size: 12px;\n    line-height: 16px;\n    letter-spacing: 0.25px;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-table .mat-cell {\n    color: #4B535B;\n    border-bottom-color: transparent;\n    font-size: 14px;\n    line-height: 20px;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .no-data-found {\n    font-weight: 500;\n    font-size: 14px;\n    letter-spacing: 0.25px;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-table .mat-row:hover:not(.tb-current-entity),\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-table .mat-row:hover:not(.tb-current-entity) .mat-cell.mat-table-sticky {\n    background-color: #F9F9FB !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-table .mat-header-cell .mat-sort-header-arrow {\n    color: #9FA6B4 !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-input-element::placeholder,\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-input-element::-moz-placeholder,\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-input-element::-webkit-input-placeholder,\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-input-element:-ms-input-placeholder {\n    color: #9FA6B4 !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-table .mat-cell .mat-checkbox-frame,.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-table .mat-header-cell .mat-checkbox-frame {\n    border-color : #9FA6B4 !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-table .mat-cell button.mat-icon-button mat-icon,\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-widget-actions mat-icon {\n    color: #757575 !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-paginator,\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-paginator button.mat-icon-button,\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-paginator .mat-select-value {\n    color: #9FA6B4 !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .leaflet-popup a.tb-custom-action {\n    font-family: 'Roboto';\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 20px;\n    letter-spacing: 0.25px;\n    border-bottom: none;\n}\n\n.bin-card,\n.bin-card .mdc-button {\n    padding: 0 !important;\n    height: 100%;\n    width: 100%;\n    border-radius: 8px;\n}\n\n.bin-card .mdc-button {\n    border-bottom: 3px solid #fff;\n    transition: all 0.2s ease-in-out;\n}\n\n.bin-card .mat-mdc-button:hover .mat-mdc-button-persistent-ripple:before,\n.bin-card .mat-mdc-outlined-button:hover .mat-mdc-button-persistent-ripple:before {\n    opacity: 0;\n}\n  \n.bin-card .mdc-button:hover {\n    border-bottom: 3px solid #E7E7E7;\n    background-color: #fff;\n}\n\n.bin-card .bin-card-selected {\n    border-bottom: 3px solid #305680;\n}\n\n.bin-card .bin-card-selected:hover {\n    border-bottom: 3px solid #305680;\n    cursor: initial;\n}\n\n.bin-card .mdc-button__label {\n    width: 100%;\n    margin-top: 4px;\n}\n\n.bin-card-content {\n    padding: 0 16px;\n}\n\n.bin-card-content img {\n    width: 40px;\n    height: 40px;\n}\n\n.bin-card-data {\n    text-align: left;\n    margin-left: 16px;\n}\n\n.bin-card-content .bin-card-header {\n    margin-bottom: 4px;\n    font-size: 12px;\n    line-height: 16px;\n    letter-spacing: 0.25px;\n    color: #9FA6B4;\n    white-space: nowrap;\n}\n\n.bin-card-content .bin-card-value {\n    font-size: 24px;\n    line-height: 24px;\n    color: rgba(0, 0, 0, 0.87);\n}\n\n@media (max-width: 1599px) {\n    \n    .bin-card-content {\n        padding: 0 8px;\n    }\n    \n    .bin-card-content img {\n        width: 32px;\n        height: 32px;\n    }\n    \n    .bin-card-data {\n        margin-left: 8px;\n    }\n    \n    .bin-card-content .bin-card-header {\n        font-size: 10px;\n        line-height: 12px;\n        margin-bottom: 0;\n    }\n    \n    .bin-card-content .bin-card-value {\n        font-size: 18px;\n        line-height: 20px;\n    }\n}"
    }
  },
  "name": "Waste management administration",
  "resources": [
    {
      "link": "/api/images/system/waste-management-2.jpg",
      "title": "\"Waste management\" dashboard image",
      "type": "IMAGE",
      "subType": "IMAGE",
      "fileName": "waste-management-2.jpg",
      "publicResourceKey": "gFwmqZJ5k16T6Yl59dFLpg2E0taW6s7u",
      "mediaType": "image/jpeg",
      "data": "",
      "public": true
    }
  ]
}
