{
  "title": "Air quality monitoring administration",
  "image": "tb-image;/api/images/system/air-quality.jpg",
  "mobileHide": false,
  "mobileOrder": null,
  "configuration": {
    "description": "",
    "widgets": {
      "0fccdd88-4852-2806-aa5b-d7853adc4088": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 6.5,
        "config": {
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1678035571326,
                "endTimeMs": 1678121971326
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0,0,0,0.87)",
          "padding": "0",
          "settings": {
            "entitiesTitle": "Sensors",
            "enableSearch": true,
            "enableSelectColumnDisplay": false,
            "enableStickyHeader": true,
            "enableStickyAction": true,
            "reserveSpaceForHiddenAction": "true",
            "displayEntityName": false,
            "displayEntityLabel": false,
            "displayEntityType": false,
            "displayPagination": false,
            "defaultSortOrder": "-batteryLevel",
            "useRowStyleFunction": false
          },
          "title": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "titleStyle": {
            "fontSize": "14px",
            "fontWeight": 500,
            "padding": "5px 10px 5px 5px",
            "color": "#29313C"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "c277b2f3-cca2-032a-4201-0305e99d3590",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "label",
                  "type": "entityField",
                  "label": "Sensor label",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.8301178225358368,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "name",
                  "type": "entityField",
                  "label": "Sensor id",
                  "color": "#4caf50",
                  "settings": {},
                  "_hash": 0.29417796626202364,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "active",
                  "type": "attribute",
                  "label": "Connection",
                  "color": "#f44336",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "const isActive = value === 'true';\nconst status = isActive ? 'Connected' : 'Inactive';\nconst color = isActive ? '#3AA94D' : '#C42F37';\nconst bgColor = isActive ? 'rgba(58, 169, 77, 0.08)' : 'rgba(196, 47, 55, 0.08)';\nreturn '<div style=\"width:fit-content;padding:4px 8px;border-radius:8px;color:'+ color +';background-color:'+ bgColor +'\">' +\n            status + '</div>';",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.8247369886014164,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "batteryLevel",
                  "type": "timeseries",
                  "label": "Battery level",
                  "color": "#ffc107",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": true,
                    "cellStyleFunction": "return {\n    color: (parseFloat(value) <= entity['batteryLevelThreshold']) ? \"#C32F37\" : \"#4B535B\"\n};",
                    "useCellContentFunction": true,
                    "cellContentFunction": "return value ? (value + '%') : '-';",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.3051285477389003,
                  "aggregationType": "NONE",
                  "units": null,
                  "decimals": 0,
                  "funcBody": null,
                  "usePostProcessing": false,
                  "postFuncBody": null
                },
                {
                  "name": "aqi",
                  "type": "timeseries",
                  "label": "Last AQI",
                  "color": "#607d8b",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "return value ? value : '-';",
                    "defaultColumnVisibility": "visible",
                    "columnSelectionToDisplay": "enabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.8410041806446122,
                  "aggregationType": "NONE",
                  "units": null,
                  "decimals": 0,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "batteryLevelThreshold",
                  "type": "attribute",
                  "label": "batteryLevelThreshold",
                  "color": "#9c27b0",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "defaultColumnVisibility": "hidden",
                    "columnSelectionToDisplay": "disabled",
                    "columnExportOption": "onlyVisible"
                  },
                  "_hash": 0.2724017333555371,
                  "aggregationType": null,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ]
            }
          ],
          "displayTimewindow": true,
          "showTitleIcon": false,
          "titleTooltip": "",
          "enableDataExport": true,
          "widgetStyle": {},
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "actions": {
            "rowClick": [
              {
                "name": "sensor-details",
                "icon": "more_horiz",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "openDashboardState",
                "targetDashboardStateId": "selected_sensor",
                "setEntityId": true,
                "stateEntityParamName": null,
                "openRightLayout": false,
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "edd9490c-1552-68bf-1ee8-d0c43cbf4f86"
              }
            ],
            "actionCellButton": [
              {
                "name": "Edit",
                "icon": "edit",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form [formGroup]=\"editEntityFormGroup\" (ngSubmit)=\"save()\" style=\"width:360px\">\n  <mat-toolbar color=\"primary\">\n    <h2>Edit sensor {{entityName}}</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content class=\"flex flex-col\">\n    <mat-form-field class=\"mat-block flex-1\">\n      <mat-label>Sensor id</mat-label>\n      <input matInput formControlName=\"entityName\" required>\n      <mat-error *ngIf=\"editEntityFormGroup.get('entityName').hasError('required')\">\n        Sensor id is required.\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"mat-block flex-1\">\n      <mat-label>Sensor label</mat-label>\n      <input matInput formControlName=\"entityLabel\" required>\n      <mat-error *ngIf=\"editEntityFormGroup.get('entityLabel').hasError('required')\">\n        Sensor label is required.\n      </mat-error>\n    </mat-form-field>\n    <div formGroupName=\"attributes flex flex-col\">\n      <mat-form-field class=\"mat-block flex-1\">\n        <mat-label>Latitude</mat-label>\n        <input type=\"number\" step=\"0.1\" matInput\n               formControlName=\"latitude\">\n      </mat-form-field>\n      <mat-form-field class=\"mat-block flex-1\">\n        <mat-label>Longitude</mat-label>\n        <input type=\"number\" step=\"0.1\" matInput\n               formControlName=\"longitude\">\n      </mat-form-field>\n    </div>\n  </div>\n  <div mat-dialog-actions class=\"flex items-center justify-end\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || editEntityFormGroup.invalid || !editEntityFormGroup.dirty\">\n      Save\n    </button>\n  </div>\n</form>",
                "customCss": "",
                "customFunction": "const $injector = widgetContext.$scope.$injector;\nconst customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nconst deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nconst attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nconst rxjs = widgetContext.rxjs;\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    const vm = instance;\n    \n    vm.entityId = entityId;\n    vm.entityName = entityName;\n    vm.entityLabel = entityLabel;\n    vm.sensor = null;\n    vm.attributes = {};\n    \n    vm.editEntityFormGroup = vm.fb.group({\n        entityName: ['', [vm.validators.required]],\n        entityLabel: ['', [vm.validators.required]],\n        attributes: vm.fb.group({\n            latitude: [null],\n            longitude: [null]\n        })\n    });\n    \n    getEntityInfo();\n    \n    vm.save = () => {\n        vm.editEntityFormGroup.markAsPristine();\n        const formValues = vm.editEntityFormGroup.value;\n        vm.sensor.name = formValues.entityName;\n        vm.sensor.label = formValues.entityLabel;\n        deviceService.saveDevice(vm.sensor).pipe(\n            rxjs.concatMap(() => {\n                return saveAttributes();\n            })\n        ).subscribe(() => {\n            widgetContext.updateAliases();\n            vm.dialogRef.close(null);\n        });\n    };\n    \n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    function getEntityAttributes(attributes) {\n        for (let i = 0; i < attributes.length; i++) {\n            vm.attributes[attributes[i].key] = attributes[i].value;\n        }\n    }\n    \n    function getEntityInfo() {\n        rxjs.forkJoin([\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', ['latitude', 'longitude']),\n            deviceService.getDevice(entityId.id)\n        ]).subscribe(\n            (data) => {\n                const attrs = data[0];\n                vm.sensor = data[1];\n                getEntityAttributes(attrs);\n                vm.editEntityFormGroup.patchValue({\n                    entityName: vm.entityName,\n                    entityLabel: vm.entityLabel,\n                    attributes: vm.attributes\n                });\n            }\n        );\n    }\n    \n    function saveAttributes() {\n        const attributes = vm.editEntityFormGroup.get('attributes').value;\n        const attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key] !== vm.attributes[key]) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(vm.entityId, \"SERVER_SCOPE\", attributesArray);\n        } else {\n            return widgetContext.rxjs.of([]);\n        }\n    }\n}",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "5b9897d4-27fa-a18b-8d00-da34ebbe6f60"
              },
              {
                "name": "Delete",
                "icon": "delete_forever",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "custom",
                "customFunction": "const $injector = widgetContext.$scope.$injector;\nconst dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nconst deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n    const title = 'Delete sensor \"' +  entityName + '\"';\n    const content = 'Are you sure you want to delete the sensor \"' +\n        entityName + '\"?';\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        (result) => {\n            if (result) {\n                deleteEntity();\n            }\n        }\n    );\n}\n\nfunction deleteEntity() {\n    deviceService.deleteDevice(entityId.id).subscribe(\n        () => {\n            widgetContext.updateAliases();\n        },\n        () => {\n            showErrorDialog();\n        }\n    );\n}\n\nfunction showErrorDialog() {\n    const title = 'Error';\n    const content = 'An error occurred while deleting the sensor. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe();\n}",
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "9b678edb-610d-f5fa-76e5-7222b410ee03"
              }
            ],
            "headerButton": [
              {
                "name": "Add sensor",
                "icon": "add",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form [formGroup]=\"addEntityFormGroup\" (ngSubmit)=\"save()\" style=\"width:360px\">\n  <mat-toolbar color=\"primary\">\n    <h2>Add sensor</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content class=\"flex flex-col\">\n    <mat-form-field class=\"mat-block flex-1\">\n      <mat-label>Sensor id</mat-label>\n      <input matInput formControlName=\"entityName\" required>\n      <mat-error *ngIf=\"addEntityFormGroup.get('entityName').hasError('required')\">\n        Sensor id is required.\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"mat-block flex-1\">\n      <mat-label>Sensor label</mat-label>\n      <input matInput formControlName=\"entityLabel\" required>\n      <mat-error *ngIf=\"addEntityFormGroup.get('entityLabel').hasError('required')\">\n        Sensor label is required.\n      </mat-error>\n    </mat-form-field>\n    <div formGroupName=\"attributes flex flex-col\">\n      <mat-form-field class=\"mat-block flex-1\">\n        <mat-label>Latitude</mat-label>\n        <input type=\"number\" step=\"0.1\" matInput\n               formControlName=\"latitude\">\n      </mat-form-field>\n      <mat-form-field class=\"mat-block flex-1\">\n        <mat-label>Longitude</mat-label>\n        <input type=\"number\" step=\"0.1\" matInput\n               formControlName=\"longitude\">\n      </mat-form-field>\n    </div>\n  </div>\n  <div mat-dialog-actions class=\"flex items-center justify-end\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || addEntityFormGroup.invalid || !addEntityFormGroup.dirty\">\n      Create\n    </button>\n  </div>\n</form>",
                "customCss": "",
                "customFunction": "const $injector = widgetContext.$scope.$injector;\nconst customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nconst deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nconst assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nconst attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nconst entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nconst entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nconst rxjs = widgetContext.rxjs;\n\nopenAddEntityDialog();\n\nfunction openAddEntityDialog() {\n    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n}\n\nfunction AddEntityDialogController(instance) {\n    const vm = instance;\n    \n    vm.addEntityFormGroup = vm.fb.group({\n        entityName: ['', [vm.validators.required]],\n        entityLabel: ['', [vm.validators.required]],\n        attributes: vm.fb.group({\n            latitude: [null],\n            longitude: [null]\n        })\n    });\n    \n    vm.save = () => {\n        vm.addEntityFormGroup.markAsPristine();\n        saveEntityObservable().pipe(\n            rxjs.concatMap((sensor) => {\n                return getAqiCityAndSaveRelationObservable(sensor.id).pipe(\n                    rxjs.concatMap((city) => {\n                        return city ? saveAttributesObservable(sensor.id, city) : rxjs.of(city);\n                    })\n                );\n            })\n        ).subscribe(() => {\n            widgetContext.updateAliases();\n            vm.dialogRef.close(null);\n        });\n    };\n    \n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    function saveEntityObservable() {\n        return  getOrCreateAqiSensorsDeviceGroupObservable().pipe(\n            rxjs.concatMap((aqiSensorsGroup) => {\n                const formValues = vm.addEntityFormGroup.value;\n                const sensor = {\n                    name: formValues.entityName,\n                    label: formValues.entityLabel,\n                    type: 'AQI Sensor'\n                };\n                return deviceService.saveDevice(sensor, aqiSensorsGroup.id.id);\n            })\n        );\n    }\n    \n    function getOrCreateAqiSensorsDeviceGroupObservable() {\n        return getEntityGroupByName('Air Quality Monitoring', 'DEVICE').pipe(\n            rxjs.concatMap((group) => {\n                if (group) {\n                    return rxjs.of(group);\n                } else {\n                    const aqiSensorsGroup = {\n                        type: 'DEVICE',\n                        name: 'Air Quality Monitoring'\n                    };\n                    return entityGroupService.saveEntityGroup(aqiSensorsGroup);\n                }\n            })\n        );\n    }\n    \n    function getEntityGroupByName(groupName, groupType) {\n        const entityGroupsPageLink = widgetContext.pageLink(10, 0, groupName);\n        return entityGroupService.getEntityGroupsByPageLink(entityGroupsPageLink, groupType).pipe(\n            rxjs.map((data) => {\n                if (data.data.length) {\n                    return data.data.find((group) => group.name === groupName);\n                } else {\n                    return null;\n                }\n            })\n        );\n    }\n    \n    function saveAttributesObservable(entityId, city) {\n        const attributes = vm.addEntityFormGroup.get('attributes').value;\n        const attributesArray = [\n            {key: 'latitude', value: 34.0371318},\n            {key: 'longitude', value: -118.309078},\n            {key: 'state', value: 'normal'},\n            {key: 'inactivityTimeout', value: city.attributes.inactivityTimeout},\n            {key: 'batteryLevelThreshold', value: city.attributes.batteryLevelThreshold}\n        ];\n        if (attributes.latitude || attributes.longitude) {\n            attributesArray[0].value = attributes.latitude;\n            attributesArray[1].value = attributes.longitude;\n        }\n        return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n    }\n    \n    function getAqiCityAndSaveRelationObservable(sensorId) {\n        return assetService.getUserAssets(widgetContext.pageLink(1, 0), 'AQI City').pipe(\n            rxjs.concatMap((assets) => {\n                const city = assets.data.length ? assets.data[0] : null;\n                if (city) {\n                    return attributeService.getEntityAttributes(city.id, 'SERVER_SCOPE').pipe(\n                        rxjs.concatMap((attrs) => {\n                            city.attributes = {};\n                            for (var i = 0; i < attrs.length; i++) {\n                                city.attributes[attrs[i].key] = attrs[i].value;\n                            }\n                            const relation = {\n                                from: city.id,\n                                to: sensorId,\n                                type: 'Contains'\n                            };\n                            return entityRelationService.saveRelation(relation).pipe(\n                                rxjs.map(() => {\n                                    return city;\n                                })\n                            );\n                        })\n                    );\n                } else {\n                    return rxjs.of(city);\n                }\n            })\n        );\n    }\n}",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "d1607cb1-814a-6813-a772-61ec65ba9407"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "0fccdd88-4852-2806-aa5b-d7853adc4088",
        "typeFullFqn": "system.cards.entities_table"
      },
      "8036e24e-24c8-cff5-3bb8-540e7c2ffafc": {
        "type": "alarm",
        "sizeX": 10.5,
        "sizeY": 6.5,
        "config": {
          "timewindow": {
            "hideAggregation": false,
            "hideAggInterval": false,
            "hideTimezone": false,
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 0,
              "timewindowMs": 604800000,
              "quickInterval": "CURRENT_DAY",
              "interval": 1000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0",
          "settings": {
            "enableSelection": false,
            "enableSearch": true,
            "enableSelectColumnDisplay": false,
            "enableFilter": true,
            "enableStickyHeader": true,
            "enableStickyAction": false,
            "reserveSpaceForHiddenAction": "true",
            "displayDetails": false,
            "allowAcknowledgment": true,
            "allowClear": true,
            "displayPagination": false,
            "defaultSortOrder": "-createdTime",
            "useRowStyleFunction": false
          },
          "title": "New Alarms table",
          "dropShadow": false,
          "enableFullscreen": false,
          "titleStyle": {
            "fontSize": "14px",
            "fontWeight": 500,
            "padding": "5px 10px 5px 2px",
            "color": "#29313C"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "alarmSource": {
            "type": "entity",
            "name": null,
            "entityAliasId": "2d96f6d4-f9ad-7633-fa62-3cb944f02901",
            "filterId": null,
            "dataKeys": [
              {
                "name": "createdTime",
                "type": "alarm",
                "label": "Created time",
                "color": "#2196f3",
                "settings": {
                  "columnWidth": "120px"
                },
                "_hash": 0.8162376389561272
              },
              {
                "name": "type",
                "type": "alarm",
                "label": "Type",
                "color": "#f44336",
                "settings": {},
                "_hash": 0.5372188672663036
              },
              {
                "name": "originator",
                "type": "alarm",
                "label": "Sensor id",
                "color": "#4caf50",
                "settings": {},
                "_hash": 0.14713076457871455,
                "aggregationType": null,
                "units": null,
                "decimals": null,
                "funcBody": null,
                "usePostProcessing": null,
                "postFuncBody": null
              },
              {
                "name": "status",
                "type": "alarm",
                "label": "Status",
                "color": "#607d8b",
                "settings": {},
                "_hash": 0.7907377750341227
              }
            ]
          },
          "alarmsPollingInterval": 5,
          "showTitleIcon": false,
          "titleIcon": "more_horiz",
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "widgetStyle": {},
          "displayTimewindow": true,
          "actions": {
            "headerButton": [
              {
                "name": "Alarm rules",
                "icon": "settings",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form [formGroup]=\"alarmRulesFormGroup\" (ngSubmit)=\"save()\" style=\"width:380px\">\n  <mat-toolbar color=\"primary\">\n    <h2>Alarm rules</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content class=\"flex flex-col\">\n    <div class=\"rule-row flex flex-row\">\n      <div class=\"rule-label\">Battery level less than</div>\n      <mat-form-field class=\"mat-block rule-input\" appearance=\"outline\">\n        <input matInput type=\"number\" step=\"1\" formControlName=\"batteryLevelThreshold\" required>\n        <mat-error *ngIf=\"alarmRulesFormGroup.get('batteryLevelThreshold').hasError('required')\">\n          Required!\n        </mat-error>\n      </mat-form-field>\n      <div class=\"rule-units\">%</div>\n    </div>\n    <div class=\"rule-row flex flex-row\">\n      <div class=\"rule-label\">Connection is lost for</div>\n      <mat-form-field class=\"mat-block rule-input\" appearance=\"outline\">\n        <input matInput type=\"number\" step=\"1\" formControlName=\"inactivityTimeout\" required>\n        <mat-error *ngIf=\"alarmRulesFormGroup.get('inactivityTimeout').hasError('required')\">\n          Required!\n        </mat-error>\n      </mat-form-field>\n      <div class=\"rule-units\">hours</div>\n    </div>\n  </div>\n  <div mat-dialog-actions class=\"flex items-center justify-end\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || alarmRulesFormGroup.invalid || !alarmRulesFormGroup.dirty\">\n      Save\n    </button>\n  </div>\n</form>",
                "customCss": ".rule-row {\n    align-items: baseline;\n}\n\n.rule-input {\n    margin-right: 6px;\n}\n\n.rule-label {\n    width: 180px;\n}\n\n.rule-input .mat-mdc-text-field-wrapper.mdc-text-field--outlined {\n    width: 80px;\n}\n.rule-input .mat-mdc-text-field-wrapper.mdc-text-field--outlined .mat-mdc-form-field-flex {\n    width: 80px;\n}\n\n.rule-input .mat-mdc-text-field-wrapper.mdc-text-field--outlined .mat-mdc-form-field-infix {\n    padding: 8px 0 8px 0;\n    width: auto;\n    min-height: 40px;\n}",
                "customFunction": "const $injector = widgetContext.$scope.$injector;\nconst customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nconst attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenAlarmRulesDialog();\n\nfunction openAlarmRulesDialog() {\n    customDialog.customDialog(htmlTemplate, AlarmRulesDialogController).subscribe();\n}\n\nfunction AlarmRulesDialogController(instance) {\n    const vm = instance;\n    \n    vm.attributes = {};\n    \n    vm.alarmRulesFormGroup = vm.fb.group({\n        inactivityTimeout: ['', [vm.validators.required]],\n        batteryLevelThreshold: ['', [vm.validators.required]],\n    });\n    \n    getEntityInfo();\n    \n    vm.save = () => {\n        saveAttributes().subscribe(() => {\n            widgetContext.updateAliases();\n            vm.dialogRef.close(null);\n        });\n    };\n    \n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    function getEntityInfo() {\n        attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', ['inactivityTimeout', 'batteryLevelThreshold']).subscribe(\n            (attrs) => {\n                getEntityAttributes(attrs);\n                vm.alarmRulesFormGroup.patchValue({\n                    batteryLevelThreshold: vm.attributes.batteryLevelThreshold,\n                    inactivityTimeout: vm.attributes.inactivityTimeout / (60*60*1000)\n                });\n        });\n    }\n    \n    function getEntityAttributes(attributes) {\n        for (let i = 0; i < attributes.length; i++) {\n            vm.attributes[attributes[i].key] = attributes[i].value;\n        }\n    }\n    \n    function saveAttributes() {\n        const attributes = vm.alarmRulesFormGroup.value;\n        const attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key] !== vm.attributes[key]) {\n                if (key === 'inactivityTimeout') {\n                    attributes[key] *= (60*60*1000);\n                }\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        } else {\n            return widgetContext.rxjs.of([]);\n        }\n    }\n}",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "a6edb729-fa78-7b3b-7045-a1dba2050dd9"
              }
            ]
          },
          "datasources": [],
          "enableDataExport": true,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "alarmFilterConfig": {
            "statusList": [],
            "severityList": [],
            "typeList": [],
            "searchPropagatedAlarms": true
          }
        },
        "row": 0,
        "col": 0,
        "id": "8036e24e-24c8-cff5-3bb8-540e7c2ffafc",
        "typeFullFqn": "system.alarm_widgets.alarms_table"
      },
      "5e0db7e2-78da-079f-47d2-960355026472": {
        "type": "alarm",
        "sizeX": 10.5,
        "sizeY": 6.5,
        "config": {
          "timewindow": {
            "hideAggregation": false,
            "hideAggInterval": false,
            "hideTimezone": false,
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 0,
              "timewindowMs": 604800000,
              "quickInterval": "CURRENT_DAY",
              "interval": 1000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0",
          "settings": {
            "enableSelection": false,
            "enableSearch": true,
            "enableSelectColumnDisplay": false,
            "enableFilter": true,
            "enableStickyHeader": true,
            "enableStickyAction": false,
            "reserveSpaceForHiddenAction": "true",
            "displayDetails": false,
            "allowAcknowledgment": true,
            "allowClear": true,
            "displayPagination": false,
            "defaultSortOrder": "-createdTime",
            "useRowStyleFunction": false
          },
          "title": "New Alarms table",
          "dropShadow": false,
          "enableFullscreen": false,
          "titleStyle": {
            "fontSize": "14px",
            "fontWeight": 500,
            "padding": "5px 10px 5px 2px",
            "color": "#29313C"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "alarmSource": {
            "type": "entity",
            "name": null,
            "entityAliasId": "98ac7e0d-e4c9-58a6-ee9a-e691db5bba47",
            "filterId": null,
            "dataKeys": [
              {
                "name": "createdTime",
                "type": "alarm",
                "label": "Created time",
                "color": "#2196f3",
                "settings": {
                  "columnWidth": "120px"
                },
                "_hash": 0.8162376389561272
              },
              {
                "name": "type",
                "type": "alarm",
                "label": "Type",
                "color": "#f44336",
                "settings": {},
                "_hash": 0.5372188672663036
              },
              {
                "name": "status",
                "type": "alarm",
                "label": "Status",
                "color": "#607d8b",
                "settings": {},
                "_hash": 0.7907377750341227
              }
            ]
          },
          "alarmsPollingInterval": 5,
          "showTitleIcon": false,
          "titleIcon": "more_horiz",
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "widgetStyle": {},
          "displayTimewindow": true,
          "actions": {},
          "datasources": [],
          "enableDataExport": true,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "alarmFilterConfig": {
            "statusList": [],
            "severityList": [],
            "typeList": [],
            "searchPropagatedAlarms": true
          }
        },
        "row": 0,
        "col": 0,
        "id": "5e0db7e2-78da-079f-47d2-960355026472",
        "typeFullFqn": "system.alarm_widgets.alarms_table"
      },
      "b89177ac-8f67-3ae5-dfc8-945d995ced41": {
        "type": "latest",
        "sizeX": 5,
        "sizeY": 3.5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "98ac7e0d-e4c9-58a6-ee9a-e691db5bba47",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "name",
                  "type": "entityField",
                  "label": "Name",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.15249290163595064
                },
                {
                  "name": "label",
                  "type": "entityField",
                  "label": "Label",
                  "color": "#4caf50",
                  "settings": {},
                  "_hash": 0.9481645420843656
                },
                {
                  "name": "latitude",
                  "type": "attribute",
                  "label": "latitude",
                  "color": "#f44336",
                  "settings": {},
                  "_hash": 0.09680113822958303
                },
                {
                  "name": "longitude",
                  "type": "attribute",
                  "label": "longitude",
                  "color": "#ffc107",
                  "settings": {},
                  "_hash": 0.9815644106031969
                },
                {
                  "name": "aqi",
                  "type": "timeseries",
                  "label": "aqi",
                  "color": "#607d8b",
                  "settings": {},
                  "_hash": 0.7122397160521527,
                  "aggregationType": "NONE",
                  "units": null,
                  "decimals": 0,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ]
            }
          ],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1678035571326,
                "endTimeMs": 1678121971326
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": true,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "useMarkdownTextFunction": true,
            "markdownTextFunction": "let entity, entityName, entityLabel, latitude, longitude, lastUpdate;\nif (data.length) {\n  entity = data[0];\n  entityName = entity.entityName;\n  entityLabel = entity.entityLabel;\n  latitude = isNumber(entity.latitude) ? entity.latitude : '-';\n  longitude = isNumber(entity.longitude) ? entity.longitude : '-';\n  lastUpdate = (!!entity['aqi|ts']) ? moment(entity['aqi|ts']).format('D MMM YYYY HH:mm') : '-';\n} else {\n  entityName = '-';\n  entityLabel = '-';\n  latitude = '-';\n  longitude = '-';\n  lastUpdate = '-';\n}\n\nreturn '<div class=\"sensor-details-container flex flex-col\">' +\n  '<div class=\"sensor-details-row flex flex-col\">' +\n  '<div class=\"label\">Sensor label</div>' +\n  '<div class=\"value\">'+ entityLabel +'</div>' +\n  '</div>' +\n  '<div class=\"sensor-details-row flex flex-col\">' +\n  '<div class=\"label\">Sensor id</div>' +\n  '<div class=\"value\">'+ entityName +'</div>' +\n  '</div>' +\n  '<div class=\"flex flex-row gap-4\">' +\n  '<div class=\"sensor-details-row flex flex-1 flex-col\">' +\n  '<div class=\"label\">Latitude</div>' +\n  '<div class=\"value\">'+ latitude +'</div>' +\n  '</div>' +\n  '<div class=\"sensor-details-row flex flex-1 flex-col\">' +\n  '<div class=\"label\">Longitude</div>' +\n  '<div class=\"value\">'+ longitude +'</div>' +\n  '</div>' +\n  '</div>' +\n  '<div class=\"sensor-details-row flex flex-col\">' +\n  '<div class=\"label\">Last update</div>' +\n  '<div class=\"value\" style=\"border-bottom:none;\">'+ lastUpdate +'</div>' +\n  '</div>' +\n  '</div>';\n\n\nfunction isNumber(value) {\n  return (typeof value === 'number' && isFinite(value));\n}\n\nfunction processValue(value, dec) {\n  value = parseFloat(value);\n  if (isNumber(value)) {\n    if (isNumber(dec)) {\n      value = parseFloat(value.toFixed(dec));\n    }\n    return value;\n  } else {\n    return 'N/A';\n  }\n}",
            "markdownCss": ".sensor-details-container {\n    height: 100%;\n    padding: 10px 15px;\n}\n\n.sensor-details-container .sensor-details-row:not(:last-child) {\n    margin-bottom: 20px;\n}\n\n.sensor-details-container .sensor-details-row .label {\n    font-size: 12px;\n    line-height: 16px;\n    letter-spacing: 0.25px;\n    color: #9FA6B4;\n}\n\n.sensor-details-container .sensor-details-row .value {\n    padding: 5px 0 6px 0;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    font-size: 16px;\n    line-height: 24px;\n    letter-spacing: 0.15px;\n    color: #4B535B;\n}"
          },
          "title": "Sensor details",
          "showTitleIcon": false,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "14px",
            "fontWeight": 500,
            "padding": "5px 10px 5px 10px",
            "color": "#29313C"
          },
          "showLegend": false,
          "useDashboardTimewindow": true,
          "enableDataExport": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "actions": {
            "headerButton": [
              {
                "name": "Edit sensor",
                "icon": "edit",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form [formGroup]=\"editEntityFormGroup\" (ngSubmit)=\"save()\" style=\"width:360px\">\n  <mat-toolbar color=\"primary\">\n    <h2>Edit sensor {{entityName}}</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content class=\"flex flex-col\">\n    <mat-form-field class=\"mat-block flex-1\">\n      <mat-label>Sensor id</mat-label>\n      <input matInput formControlName=\"entityName\" required>\n      <mat-error *ngIf=\"editEntityFormGroup.get('entityName').hasError('required')\">\n        Sensor id is required.\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"mat-block flex-1\">\n      <mat-label>Sensor label</mat-label>\n      <input matInput formControlName=\"entityLabel\" required>\n      <mat-error *ngIf=\"editEntityFormGroup.get('entityLabel').hasError('required')\">\n        Sensor label is required.\n      </mat-error>\n    </mat-form-field>\n    <div formGroupName=\"attributes\" class=\"flex flex-col\">\n      <mat-form-field class=\"mat-block flex-1\">\n        <mat-label>Latitude</mat-label>\n        <input type=\"number\" step=\"0.1\" matInput\n               formControlName=\"latitude\">\n      </mat-form-field>\n      <mat-form-field class=\"mat-block flex-1\">\n        <mat-label>Longitude</mat-label>\n        <input type=\"number\" step=\"0.1\" matInput\n               formControlName=\"longitude\">\n      </mat-form-field>\n    </div>\n  </div>\n  <div mat-dialog-actions class=\"flex items-center justify-end\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || editEntityFormGroup.invalid || !editEntityFormGroup.dirty\">\n      Save\n    </button>\n  </div>\n</form>",
                "customCss": "",
                "customFunction": "const $injector = widgetContext.$scope.$injector;\nconst customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nconst deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nconst attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nconst rxjs = widgetContext.rxjs;\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    const vm = instance;\n    \n    vm.entityId = entityId;\n    vm.entityName = entityName;\n    vm.entityLabel = entityLabel;\n    vm.sensor = null;\n    vm.attributes = {};\n    \n    vm.editEntityFormGroup = vm.fb.group({\n        entityName: ['', [vm.validators.required]],\n        entityLabel: ['', [vm.validators.required]],\n        attributes: vm.fb.group({\n            latitude: [null],\n            longitude: [null]\n        })\n    });\n    \n    getEntityInfo();\n    \n    vm.save = () => {\n        vm.editEntityFormGroup.markAsPristine();\n        const formValues = vm.editEntityFormGroup.value;\n        vm.sensor.name = formValues.entityName;\n        vm.sensor.label = formValues.entityLabel;\n        deviceService.saveDevice(vm.sensor).pipe(\n            rxjs.concatMap(() => {\n                return saveAttributes();\n            })\n        ).subscribe(() => {\n            widgetContext.updateAliases();\n            vm.dialogRef.close(null);\n        });\n    };\n    \n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    function getEntityAttributes(attributes) {\n        for (let i = 0; i < attributes.length; i++) {\n            vm.attributes[attributes[i].key] = attributes[i].value;\n        }\n    }\n    \n    function getEntityInfo() {\n        rxjs.forkJoin([\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', ['latitude', 'longitude']),\n            deviceService.getDevice(entityId.id)\n        ]).subscribe(\n            (data) => {\n                const attrs = data[0];\n                vm.sensor = data[1];\n                getEntityAttributes(attrs);\n                vm.editEntityFormGroup.patchValue({\n                    entityName: vm.entityName,\n                    entityLabel: vm.entityLabel,\n                    attributes: vm.attributes\n                });\n            }\n        );\n    }\n    \n    function saveAttributes() {\n        const attributes = vm.editEntityFormGroup.get('attributes').value;\n        const attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key] !== vm.attributes[key]) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(vm.entityId, \"SERVER_SCOPE\", attributesArray);\n        } else {\n            return widgetContext.rxjs.of([]);\n        }\n    }\n}",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "a10c91e9-4ea7-9d0f-5828-e79becf5436b"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "b89177ac-8f67-3ae5-dfc8-945d995ced41",
        "typeFullFqn": "system.cards.markdown_card"
      },
      "f6c53e71-6c41-71c4-842b-9f071a4dd168": {
        "type": "latest",
        "sizeX": 5,
        "sizeY": 3.5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "98ac7e0d-e4c9-58a6-ee9a-e691db5bba47",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "aqi",
                  "type": "timeseries",
                  "label": "aqi",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.575968799634154,
                  "aggregationType": "NONE",
                  "units": null,
                  "decimals": 0,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "batteryLevel",
                  "type": "timeseries",
                  "label": "batteryLevel",
                  "color": "#4caf50",
                  "settings": {},
                  "_hash": 0.3861200288297133,
                  "aggregationType": "NONE",
                  "units": null,
                  "decimals": 0,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "pm25Aqi",
                  "type": "timeseries",
                  "label": "pm25Aqi",
                  "color": "#f44336",
                  "settings": {},
                  "_hash": 0.4043129483520822,
                  "aggregationType": "NONE",
                  "units": null,
                  "decimals": 0,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "pm10Aqi",
                  "type": "timeseries",
                  "label": "pm10Aqi",
                  "color": "#ffc107",
                  "settings": {},
                  "_hash": 0.6727199151329402,
                  "aggregationType": "NONE",
                  "units": null,
                  "decimals": 0,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "no2Aqi",
                  "type": "timeseries",
                  "label": "no2Aqi",
                  "color": "#607d8b",
                  "settings": {},
                  "_hash": 0.7709128926157622,
                  "aggregationType": "NONE",
                  "units": null,
                  "decimals": 0,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "coAqi",
                  "type": "timeseries",
                  "label": "coAqi",
                  "color": "#9c27b0",
                  "settings": {},
                  "_hash": 0.39338946987262924,
                  "aggregationType": "NONE",
                  "units": null,
                  "decimals": 0,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "so2Aqi",
                  "type": "timeseries",
                  "label": "so2Aqi",
                  "color": "#8bc34a",
                  "settings": {},
                  "_hash": 0.37869831971635937,
                  "aggregationType": "NONE",
                  "units": null,
                  "decimals": 0,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "o3Aqi",
                  "type": "timeseries",
                  "label": "o3Aqi",
                  "color": "#3f51b5",
                  "settings": {},
                  "_hash": 0.18935337115186557,
                  "aggregationType": "NONE",
                  "units": null,
                  "decimals": 0,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "active",
                  "type": "attribute",
                  "label": "active",
                  "color": "#ffeb3b",
                  "settings": {},
                  "_hash": 0.7904734865385263
                },
                {
                  "name": "batteryLevelThreshold",
                  "type": "attribute",
                  "label": "batteryLevelThreshold",
                  "color": "#ffeb3b",
                  "settings": {},
                  "_hash": 0.1326907326244049
                }
              ]
            }
          ],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1678035571326,
                "endTimeMs": 1678121971326
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": true,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "useMarkdownTextFunction": true,
            "markdownTextFunction": "let entity, isActive, aqi, pm25AqiValue, pm10AqiValue, no2AqiValue, coAqiValue, so2AqiValue, o3AqiValue, batteryLevel, batteryLevelThreshold;\nif (data && data.length) {\n  entity = data[0];\n  aqi = processValue(entity['aqi'], 0);\n  pm25AqiValue = processValue(entity['pm25Aqi'], 0);\n  pm10AqiValue = processValue(entity['pm10Aqi'], 0);\n  no2AqiValue = processValue(entity['no2Aqi'], 0);\n  coAqiValue = processValue(entity['coAqi'], 0);\n  so2AqiValue = processValue(entity['so2Aqi'], 0);\n  o3AqiValue =  processValue(entity['o3Aqi'], 0);\n  batteryLevel = processValue(entity['batteryLevel']);\n  batteryLevelThreshold = processValue(entity['batteryLevelThreshold']);\n  isActive = entity['active'] === 'true';\n} else {\n  aqi = 'N/A';\n  pm25AqiValue = 'N/A';\n  pm10AqiValue = 'N/A';\n  no2AqiValue = 'N/A';\n  coAqiValue = 'N/A';\n  so2AqiValue = 'N/A';\n  o3AqiValue = 'N/A';\n  batteryLevel = 'N/A';\n  batteryLevelThreshold = 30;\n}\n\nconst legend = [\n  {\n    range: [0, 50],\n    colors: [[128, 186, 60], [176, 214, 72]],\n    inactiveColors: [[226, 226, 226], [215, 215, 215]]\n  },\n  {\n    range: [50, 100],\n    colors: [[176, 214, 72], [245, 189, 51]],\n    inactiveColors: [[215, 215, 215], [195, 195, 195]]\n  },\n  {\n    range: [100, 150],\n    colors: [[245, 189, 51], [235, 117, 51]],\n    inactiveColors: [[195, 195, 195], [160, 160, 160]]\n  },\n  {\n    range: [150, 200],\n    colors: [[235, 117, 51], [248, 76, 57]],\n    inactiveColors: [[160, 160, 160], [136, 136, 136]]\n  },\n  {\n    range: [200, 300],\n    colors: [[248, 76, 57], [188, 52, 53]],\n    inactiveColors: [[136, 136, 136], [119, 119, 119]]\n  },\n  {\n    range: [300],\n    colors: [[188, 52, 53], [128, 27, 49]],\n    inactiveColors: [[119, 119, 119], [78, 78, 78]]\n  }\n];\n\nreturn '<div class=\"measures-container flex flex-col gap-4\">' +\n  '<div class=\"measures-row flex flex-1 flex-row gap-4\">' +\n  '<div class=\"measures-card flex-1 flex justify-start\">' +\n  '<div class=\"measures-name\" style=\"line-height:20.4px;margin-bottom:8px\">Connection</div>' +\n  '<div class=\"connection-status\" style=\"color:'+ (isActive ? '#3AA94D' : '#C32F37') +'\">'+ (isActive ? 'Connected' : 'Inactive') +'</div>' +\n  '</div>' +\n  '<div class=\"measures-card flex-1\">' +\n  '<div class=\"measures-name\" style=\"line-height:20.4px\">Battery level</div>' +\n  '<div class=\"measures-value\" style=\"color:'+ getBatteryValueColor(batteryLevel) +'\">'+ batteryLevel +'%</div>' +\n  '<div class=\"measures-bar\">' +\n  '<div class=\"measures-bar-value\" style=\"background-color:'+ getBatteryLevelColor(batteryLevel) + ';width:' + getBatteryLevelBarWidth(batteryLevel) +'%\"></div>' +\n  '</div>' +\n  '</div>' +\n  '<div class=\"measures-card flex-1\">' +\n  '<div class=\"measures-name\" style=\"line-height:20.4px\">Last AQI</div>' +\n  '<div class=\"measures-value\">'+ aqi +'</div>' +\n  '<div class=\"measures-bar\">' +\n  '<div class=\"measures-bar-value\" style=\"background-color:'+ getAqiColor(aqi) + ';width:' + getAqiComponentBarWidth(aqi) +'%\"></div>' +\n  '</div>' +\n  '</div>' +\n  '</div>' +\n  '<div class=\"measures-row flex flex-1 flex-row gap-4\">' +\n  '<div class=\"measures-card flex-1\">' +\n  '<div class=\"measures-name\" style=\"line-height:20.4px\">PM2.5</div>' +\n  '<div class=\"measures-value\">'+ pm25AqiValue +'</div>' +\n  '<div class=\"measures-bar\">' +\n  '<div class=\"measures-bar-value\" style=\"background-color:'+ getAqiColor(pm25AqiValue) + ';width:' + getAqiComponentBarWidth(pm25AqiValue) +'%\"></div>' +\n  '</div>' +\n  '</div>' +\n  '<div class=\"measures-card flex-1\">' +\n  '<div class=\"measures-name\" style=\"line-height:20.4px\">PM10</div>' +\n  '<div class=\"measures-value\">'+ pm10AqiValue +'</div>' +\n  '<div class=\"measures-bar\">' +\n  '<div class=\"measures-bar-value\" style=\"background-color:'+ getAqiColor(pm10AqiValue) + ';width:' + getAqiComponentBarWidth(pm10AqiValue) +'%\"></div>' +\n  '</div>' +\n  '</div>' +\n  '<div class=\"measures-card flex-1\">' +\n  '<div class=\"measures-name\">NO<sub>2</sub></div>' +\n  '<div class=\"measures-value\">'+ no2AqiValue +'</div>' +\n  '<div class=\"measures-bar\">' +\n  '<div class=\"measures-bar-value\" style=\"background-color:'+ getAqiColor(no2AqiValue) + ';width:' + getAqiComponentBarWidth(no2AqiValue) +'%\"></div>' +\n  '</div>' +\n  '</div>' +\n  '</div>' +\n  '<div class=\"measures-row flex flex-1 flex-row gap-4\">' +\n  '<div class=\"measures-card flex-1\">' +\n  '<div class=\"measures-name\" style=\"line-height:20.4px\">CO</div>' +\n  '<div class=\"measures-value\">'+ coAqiValue +'</div>' +\n  '<div class=\"measures-bar\">' +\n  '<div class=\"measures-bar-value\" style=\"background-color:'+ getAqiColor(coAqiValue) + ';width:' + getAqiComponentBarWidth(coAqiValue) +'%\"></div>' +\n  '</div>' +\n  '</div>' +\n  '<div class=\"measures-card flex-1\">' +\n  '<div class=\"measures-name\">SO<sub>2</sub></div>' +\n  '<div class=\"measures-value\">'+ so2AqiValue +'</div>' +\n  '<div class=\"measures-bar\">' +\n  '<div class=\"measures-bar-value\" style=\"background-color:'+ getAqiColor(so2AqiValue) + ';width:' + getAqiComponentBarWidth(so2AqiValue) +'%\"></div>' +\n  '</div>' +\n  '</div>' +\n  '<div class=\"measures-card flex-1\">' +\n  '<div class=\"measures-name\">O<sub>3</sub></div>' +\n  '<div class=\"measures-value\">'+ o3AqiValue +'</div>' +\n  '<div class=\"measures-bar\">' +\n  '<div class=\"measures-bar-value\" style=\"background-color:'+ getAqiColor(o3AqiValue) + ';width:' + getAqiComponentBarWidth(o3AqiValue) +'%\"></div>' +\n  '</div>' +\n  '</div>' +\n  '</div>' +\n  '</div>';\n\nfunction getAqiColor(value) {\n  const targetSegment = getLegendSegment(value);\n  if (targetSegment) {\n    if (targetSegment.range.length === 1) {\n      return isActive ? 'rgb(128,27,49)' : 'rgb(78, 78, 78)';\n    } else if (value < 0) {\n      return isActive ? 'rgb(128,186,60)' : 'rgb(226, 226, 226)';\n    } else {\n      let ratio1 = (value - targetSegment.range[0]) / ((targetSegment.range[1] + 1) - targetSegment.range[0]);\n      let ratio2 = 1 - ratio1;\n      let colors = targetSegment[isActive ? 'colors' : 'inactiveColors'];\n      return 'rgb(' + (Math.round(colors[0][0] * ratio2 + colors[1][0] * ratio1)) + ', '\n        + (Math.round(colors[0][1] * ratio2 + colors[1][1] * ratio1)) + ', '\n        + (Math.round(colors[0][2] * ratio2 + colors[1][2] * ratio1)) + ')';\n    }\n  } else {\n    return 'rgb(180,180,180)';\n  }\n}\n\nfunction getLegendSegment(value) {\n  if (value === 'N/A') {\n    return null;\n  }\n  for (let i = 0; i < legend.length; i++) {\n    if (i === 0 && value <= 0) {\n      return legend[0];\n    }\n    if (i === legend.length - 1 && value > 300) {\n      return legend[legend.length - 1];\n    }\n    if (value > legend[i].range[0] && value <= legend[i].range[1]) {\n      return legend[i];\n    }\n  }\n}\n\nfunction getAqiComponentBarWidth(value) {\n  const targetSegment = getLegendSegment(value);\n  if (targetSegment) {\n    if (targetSegment.range.length === 1) {\n      return '100';\n    } else if (value < 0) {\n      return '0';\n    } else if (value >= 0 && value <= 200) {\n      return parseFloat((100*value/300).toFixed(2));\n    } else {\n      return parseFloat((100*(value + 200)/600).toFixed(2));\n    }\n  } else {\n    return '0';\n  }\n}\n\nfunction getBatteryLevelColor(value) {\n  if (value === 'N/A' || !isActive) {\n    return 'rgb(180,180,180)';\n  } else {\n    return value <= batteryLevelThreshold ? '#C32F37' : '#3AA94D';\n  }\n}\n\nfunction getBatteryValueColor(value) {\n  if (value === 'N/A' || !isActive) {\n    return '#29313C';\n  } else {\n    return value <= batteryLevelThreshold ? '#C32F37' : '#29313C';\n  }\n}\n\nfunction getBatteryLevelBarWidth(value) {\n  if (value === 'N/A') {\n    return '0';\n  } else {\n    return value.toString();\n  }\n}\n\nfunction isNumber(value) {\n  return (typeof value === 'number' && isFinite(value));\n}\n\nfunction processValue(value, dec) {\n  value = parseFloat(value);\n  if (isNumber(value)) {\n    if (isNumber(dec)) {\n      value = parseFloat(value.toFixed(dec));\n    }\n    return value;\n  } else {\n    return 'N/A';\n  }\n}",
            "markdownCss": ".measures-container {\n    height: 100%;\n    padding: 11px 16px 24px 16px;\n}\n\n.measures-container .measures-card {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    padding: 12px;\n    border: 1px solid #F9F9FB;\n    border-radius: 12px;\n}\n\n.measures-container .measures-name {\n    font-size: 12px;\n    line-height: 16px;\n    letter-spacing: 0.25px;\n    color: #9FA6B4;\n}\n\n.measures-container .measures-value {\n    font-weight: 500;\n    font-size: 18px;\n    line-height: 24px;\n    letter-spacing: 0.25px;\n    color: #29313C;\n}\n\n.measures-container .measures-bar {\n    width: 100%;\n    height: 4px;\n    background-color: #F9F9FB;\n    border-radius: 100px;\n}\n\n.measures-container .measures-bar-value {\n    height: 100%;\n    width: 50%;\n    border-radius: 100px;\n    background-color: #80BA3C;\n}\n\n.measures-container .connection-status {\n    font-weight: 500;\n    font-size: 18px;\n    line-height: 24px;\n    letter-spacing: 0.25px;\n}"
          },
          "title": "Sensor measures",
          "showTitleIcon": false,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "14px",
            "fontWeight": 500,
            "padding": "5px 10px 5px 10px",
            "color": "#29313C"
          },
          "showLegend": false,
          "useDashboardTimewindow": true,
          "enableDataExport": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": ""
        },
        "row": 0,
        "col": 0,
        "id": "f6c53e71-6c41-71c4-842b-9f071a4dd168",
        "typeFullFqn": "system.cards.markdown_card"
      },
      "1fdd80c2-0d7d-efa3-85f8-fb46908cff94": {
        "typeFullFqn": "system.time_series_chart",
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": "",
              "entityAliasId": "98ac7e0d-e4c9-58a6-ee9a-e691db5bba47",
              "dataKeys": [
                {
                  "name": "batteryLevel",
                  "type": "timeseries",
                  "label": "Battery level",
                  "color": "#4B535B",
                  "settings": {
                    "yAxisId": "default",
                    "showInLegend": true,
                    "dataHiddenByDefault": false,
                    "type": "line",
                    "lineSettings": {
                      "showLine": true,
                      "step": false,
                      "stepType": "start",
                      "smooth": true,
                      "lineType": "solid",
                      "lineWidth": 2,
                      "showPoints": false,
                      "showPointLabel": false,
                      "pointLabelPosition": "top",
                      "pointLabelFont": {
                        "family": "Roboto",
                        "size": 11,
                        "sizeUnit": "px",
                        "style": "normal",
                        "weight": "400",
                        "lineHeight": "1"
                      },
                      "pointLabelColor": "rgba(0, 0, 0, 0.76)",
                      "enablePointLabelBackground": false,
                      "pointLabelBackground": "rgba(255,255,255,0.56)",
                      "pointShape": "circle",
                      "pointSize": 12,
                      "fillAreaSettings": {
                        "type": "none",
                        "opacity": 0.4,
                        "gradient": {
                          "start": 100,
                          "end": 0
                        }
                      }
                    },
                    "barSettings": {
                      "showBorder": false,
                      "borderWidth": 2,
                      "borderRadius": 0,
                      "showLabel": false,
                      "labelPosition": "top",
                      "labelFont": {
                        "family": "Roboto",
                        "size": 11,
                        "sizeUnit": "px",
                        "style": "normal",
                        "weight": "400",
                        "lineHeight": "1"
                      },
                      "labelColor": "rgba(0, 0, 0, 0.76)",
                      "enableLabelBackground": false,
                      "labelBackground": "rgba(255,255,255,0.56)",
                      "backgroundSettings": {
                        "type": "none",
                        "opacity": 0.4,
                        "gradient": {
                          "start": 100,
                          "end": 0
                        }
                      }
                    },
                    "tooltipValueFormatter": null,
                    "comparisonSettings": {
                      "showValuesForComparison": false,
                      "comparisonValuesLabel": "",
                      "color": ""
                    }
                  },
                  "_hash": 0.43755307402996335,
                  "units": "%",
                  "decimals": 1,
                  "aggregationType": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ],
              "alarmFilterConfig": {
                "statusList": [
                  "ACTIVE"
                ]
              },
              "latestDataKeys": []
            }
          ],
          "timewindow": {
            "hideInterval": false,
            "hideLastInterval": false,
            "hideQuickInterval": false,
            "hideAggregation": false,
            "hideAggInterval": false,
            "hideTimezone": false,
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 0,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "interval": 1000
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            },
            "timezone": null
          },
          "showTitle": true,
          "backgroundColor": "rgba(0, 0, 0, 0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "showLegend": false,
            "legendConfig": {
              "direction": "column",
              "position": "top",
              "sortDataKeys": false,
              "showMin": false,
              "showMax": false,
              "showAvg": true,
              "showTotal": false,
              "showLatest": false
            },
            "thresholds": [],
            "dataZoom": true,
            "stack": false,
            "yAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "left",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "rgba(0, 0, 0, 0.54)",
              "showTicks": true,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": true,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": true,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)"
            },
            "xAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "bottom",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 10,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "#9FA6B4",
              "ticksFormat": {},
              "showTicks": false,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": false,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": false,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)"
            },
            "legendLabelFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "400",
              "lineHeight": "16px"
            },
            "legendLabelColor": "rgba(0, 0, 0, 0.76)",
            "showTooltip": true,
            "tooltipTrigger": "axis",
            "tooltipValueFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "500",
              "lineHeight": "16px"
            },
            "tooltipValueColor": "rgba(0, 0, 0, 0.76)",
            "tooltipShowDate": true,
            "tooltipDateFormat": {
              "format": null,
              "lastUpdateAgo": false,
              "custom": false,
              "auto": true,
              "autoDateFormatSettings": {
                "millisecond": "MMM dd yyyy HH:mm:ss"
              }
            },
            "tooltipDateFont": {
              "family": "Roboto",
              "size": 11,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "400",
              "lineHeight": "16px"
            },
            "tooltipDateColor": "rgba(0, 0, 0, 0.76)",
            "tooltipDateInterval": false,
            "tooltipBackgroundColor": "rgba(255, 255, 255, 0.76)",
            "tooltipBackgroundBlur": 4,
            "background": {
              "type": "color",
              "color": "#fff",
              "overlay": {
                "enabled": false,
                "color": "rgba(255,255,255,0.72)",
                "blur": 3
              }
            },
            "yAxes": {
              "default": {
                "units": "%",
                "decimals": 0,
                "show": true,
                "label": "",
                "labelFont": {
                  "family": "Roboto",
                  "size": 12,
                  "sizeUnit": "px",
                  "style": "normal",
                  "weight": "600",
                  "lineHeight": "1"
                },
                "labelColor": "rgba(0, 0, 0, 0.54)",
                "position": "left",
                "showTickLabels": true,
                "tickLabelFont": {
                  "family": "Roboto",
                  "size": 12,
                  "sizeUnit": "px",
                  "style": "normal",
                  "weight": "400",
                  "lineHeight": "1"
                },
                "tickLabelColor": "#9FA6B4",
                "ticksFormatter": null,
                "showTicks": false,
                "ticksColor": "rgba(0, 0, 0, 0.54)",
                "showLine": false,
                "lineColor": "rgba(0, 0, 0, 0.54)",
                "showSplitLines": true,
                "splitLinesColor": "rgba(0, 0, 0, 0.12)",
                "id": "default",
                "order": 0,
                "min": 0,
                "max": 100,
                "ticksGenerator": null,
                "interval": null,
                "splitNumber": null
              }
            },
            "noAggregationBarWidthSettings": {
              "strategy": "group",
              "groupWidth": {
                "relative": true,
                "relativeWidth": 2,
                "absoluteWidth": 1000
              },
              "barWidth": {
                "relative": true,
                "relativeWidth": 2,
                "absoluteWidth": 1000
              }
            },
            "animation": {
              "animation": true,
              "animationThreshold": 2000,
              "animationDuration": 500,
              "animationEasing": "cubicOut",
              "animationDelay": 0,
              "animationDurationUpdate": 300,
              "animationEasingUpdate": "cubicOut",
              "animationDelayUpdate": 0
            },
            "padding": "12px",
            "comparisonEnabled": false,
            "timeForComparison": "previousInterval",
            "comparisonCustomIntervalValue": 7200000,
            "comparisonXAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "top",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 10,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "rgba(0, 0, 0, 0.54)",
              "ticksFormat": {},
              "showTicks": true,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": true,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": true,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)"
            }
          },
          "title": "Battery level",
          "dropShadow": false,
          "enableFullscreen": true,
          "titleStyle": {
            "padding": "5px 10px 5px 0px"
          },
          "configMode": "basic",
          "actions": {},
          "showTitleIcon": false,
          "titleIcon": "thermostat",
          "iconColor": "#1F6BDD",
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "titleFont": {
            "size": 14,
            "sizeUnit": "px",
            "family": "Roboto",
            "weight": "500",
            "style": "normal",
            "lineHeight": "24px"
          },
          "titleColor": "#29313C",
          "titleTooltip": "",
          "widgetStyle": {},
          "widgetCss": "",
          "pageSize": 1024,
          "units": "",
          "decimals": null,
          "noDataDisplayMessage": "",
          "timewindowStyle": {
            "showIcon": false,
            "iconSize": "24px",
            "icon": null,
            "iconPosition": "left",
            "font": {
              "size": 12,
              "sizeUnit": "px",
              "family": "Roboto",
              "weight": "400",
              "style": "normal",
              "lineHeight": "16px"
            },
            "color": "rgba(0, 0, 0, 0.38)",
            "displayTypePrefix": true
          },
          "margin": "0px",
          "borderRadius": "",
          "iconSize": "0px",
          "enableDataExport": true
        },
        "row": 0,
        "col": 0,
        "id": "1fdd80c2-0d7d-efa3-85f8-fb46908cff94"
      },
      "3307147d-9991-3eb4-e0e4-19500419f695": {
        "typeFullFqn": "system.state_chart",
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": "",
              "entityAliasId": "98ac7e0d-e4c9-58a6-ee9a-e691db5bba47",
              "dataKeys": [
                {
                  "name": "activityState",
                  "type": "timeseries",
                  "label": "Connection",
                  "color": "#B62027",
                  "settings": {
                    "yAxisId": "default",
                    "showInLegend": true,
                    "dataHiddenByDefault": false,
                    "type": "line",
                    "lineSettings": {
                      "showLine": true,
                      "step": true,
                      "stepType": "end",
                      "smooth": false,
                      "lineType": "solid",
                      "lineWidth": 1,
                      "showPoints": false,
                      "showPointLabel": false,
                      "pointLabelPosition": "top",
                      "pointLabelFont": {
                        "family": "Roboto",
                        "size": 11,
                        "sizeUnit": "px",
                        "style": "normal",
                        "weight": "400",
                        "lineHeight": "1"
                      },
                      "pointLabelColor": "rgba(0, 0, 0, 0.76)",
                      "enablePointLabelBackground": false,
                      "pointLabelBackground": "rgba(255,255,255,0.56)",
                      "pointShape": "circle",
                      "pointSize": 12,
                      "fillAreaSettings": {
                        "type": "opacity",
                        "opacity": 0.4,
                        "gradient": {
                          "start": 100,
                          "end": 0
                        }
                      }
                    },
                    "barSettings": {
                      "showBorder": false,
                      "borderWidth": 2,
                      "borderRadius": 0,
                      "showLabel": false,
                      "labelPosition": "top",
                      "labelFont": {
                        "family": "Roboto",
                        "size": 11,
                        "sizeUnit": "px",
                        "style": "normal",
                        "weight": "400",
                        "lineHeight": "1"
                      },
                      "labelColor": "rgba(0, 0, 0, 0.76)",
                      "enableLabelBackground": false,
                      "labelBackground": "rgba(255,255,255,0.56)",
                      "backgroundSettings": {
                        "type": "none",
                        "opacity": 0.4,
                        "gradient": {
                          "start": 100,
                          "end": 0
                        }
                      }
                    },
                    "tooltipValueFormatter": null,
                    "comparisonSettings": {
                      "showValuesForComparison": false,
                      "comparisonValuesLabel": "",
                      "color": ""
                    }
                  },
                  "_hash": 0.6671828113260314,
                  "decimals": 0,
                  "aggregationType": null,
                  "units": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ],
              "alarmFilterConfig": {
                "statusList": [
                  "ACTIVE"
                ]
              },
              "latestDataKeys": []
            }
          ],
          "timewindow": {
            "hideInterval": false,
            "hideLastInterval": false,
            "hideQuickInterval": false,
            "hideAggregation": false,
            "hideAggInterval": false,
            "hideTimezone": false,
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 0,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "interval": 1000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 25000
            },
            "timezone": null
          },
          "showTitle": true,
          "backgroundColor": "rgba(0, 0, 0, 0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "yAxes": {
              "default": {
                "units": null,
                "decimals": 0,
                "show": true,
                "label": "",
                "labelFont": {
                  "family": "Roboto",
                  "size": 12,
                  "sizeUnit": "px",
                  "style": "normal",
                  "weight": "600",
                  "lineHeight": "1"
                },
                "labelColor": "rgba(0, 0, 0, 0.54)",
                "position": "left",
                "showTickLabels": true,
                "tickLabelFont": {
                  "family": "Roboto",
                  "size": 12,
                  "sizeUnit": "px",
                  "style": "normal",
                  "weight": "400",
                  "lineHeight": "1"
                },
                "tickLabelColor": "#9FA6B4",
                "ticksFormatter": "",
                "showTicks": false,
                "ticksColor": "rgba(0, 0, 0, 0.54)",
                "showLine": false,
                "lineColor": "rgba(0, 0, 0, 0.54)",
                "showSplitLines": false,
                "splitLinesColor": "rgba(0, 0, 0, 0.12)",
                "id": "default",
                "order": 0,
                "interval": null,
                "splitNumber": null,
                "min": 0,
                "max": 1,
                "ticksGenerator": ""
              }
            },
            "thresholds": [],
            "dataZoom": false,
            "stack": false,
            "xAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "bottom",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 10,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "#9FA6B4",
              "ticksFormat": {},
              "showTicks": false,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": false,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": false,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)"
            },
            "noAggregationBarWidthSettings": {
              "strategy": "group",
              "groupWidth": {
                "relative": true,
                "relativeWidth": 2,
                "absoluteWidth": 1000
              },
              "barWidth": {
                "relative": true,
                "relativeWidth": 2,
                "absoluteWidth": 1000
              }
            },
            "showLegend": false,
            "legendLabelFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "400",
              "lineHeight": "16px"
            },
            "legendLabelColor": "rgba(0, 0, 0, 0.76)",
            "legendConfig": {
              "direction": "column",
              "position": "right",
              "sortDataKeys": false,
              "showMin": false,
              "showMax": false,
              "showAvg": false,
              "showTotal": false,
              "showLatest": false
            },
            "showTooltip": true,
            "tooltipTrigger": "axis",
            "tooltipValueFont": {
              "family": "Roboto",
              "size": 12,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "500",
              "lineHeight": "16px"
            },
            "tooltipValueColor": "rgba(0, 0, 0, 0.76)",
            "tooltipValueFormatter": "",
            "tooltipShowDate": true,
            "tooltipDateFormat": {
              "format": null,
              "lastUpdateAgo": false,
              "custom": false,
              "auto": true,
              "autoDateFormatSettings": {
                "millisecond": "MMM dd yyyy HH:mm:ss"
              }
            },
            "tooltipDateFont": {
              "family": "Roboto",
              "size": 11,
              "sizeUnit": "px",
              "style": "normal",
              "weight": "400",
              "lineHeight": "16px"
            },
            "tooltipDateColor": "rgba(0, 0, 0, 0.76)",
            "tooltipDateInterval": true,
            "tooltipBackgroundColor": "rgba(255, 255, 255, 0.76)",
            "tooltipBackgroundBlur": 4,
            "animation": {
              "animation": true,
              "animationThreshold": 2000,
              "animationDuration": 500,
              "animationEasing": "cubicOut",
              "animationDelay": 0,
              "animationDurationUpdate": 300,
              "animationEasingUpdate": "cubicOut",
              "animationDelayUpdate": 0
            },
            "background": {
              "type": "color",
              "color": "#FFFFFF",
              "overlay": {
                "enabled": false,
                "color": "rgba(255,255,255,0.72)",
                "blur": 3
              },
              "imageUrl": null
            },
            "padding": "12px",
            "states": [
              {
                "label": "Connected",
                "value": 0,
                "sourceType": "constant",
                "sourceValue": false
              },
              {
                "label": "Inactive",
                "value": 1,
                "sourceType": "constant",
                "sourceValue": true
              }
            ],
            "comparisonEnabled": false,
            "timeForComparison": "previousInterval",
            "comparisonCustomIntervalValue": 7200000,
            "comparisonXAxis": {
              "show": true,
              "label": "",
              "labelFont": {
                "family": "Roboto",
                "size": 12,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "600",
                "lineHeight": "1"
              },
              "labelColor": "rgba(0, 0, 0, 0.54)",
              "position": "top",
              "showTickLabels": true,
              "tickLabelFont": {
                "family": "Roboto",
                "size": 10,
                "sizeUnit": "px",
                "style": "normal",
                "weight": "400",
                "lineHeight": "1"
              },
              "tickLabelColor": "rgba(0, 0, 0, 0.54)",
              "ticksFormat": {},
              "showTicks": true,
              "ticksColor": "rgba(0, 0, 0, 0.54)",
              "showLine": true,
              "lineColor": "rgba(0, 0, 0, 0.54)",
              "showSplitLines": true,
              "splitLinesColor": "rgba(0, 0, 0, 0.12)"
            },
            "grid": {
              "show": true,
              "backgroundColor": "#F2F8EB",
              "borderWidth": 0,
              "borderColor": "#ccc"
            }
          },
          "title": "Connection",
          "dropShadow": true,
          "enableFullscreen": true,
          "titleStyle": {
            "padding": "5px 10px 5px 10px"
          },
          "configMode": "basic",
          "actions": {},
          "showTitleIcon": false,
          "titleIcon": "thermostat",
          "iconColor": "#1F6BDD",
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "titleFont": {
            "size": 14,
            "sizeUnit": "px",
            "family": "Roboto",
            "weight": "500",
            "style": "normal",
            "lineHeight": "24px"
          },
          "titleColor": "#29313C",
          "titleTooltip": "",
          "widgetStyle": {},
          "widgetCss": "",
          "pageSize": 1024,
          "units": "",
          "decimals": null,
          "noDataDisplayMessage": "",
          "timewindowStyle": {
            "showIcon": false,
            "iconSize": "24px",
            "icon": null,
            "iconPosition": "left",
            "font": {
              "size": 12,
              "sizeUnit": "px",
              "family": "Roboto",
              "weight": "400",
              "style": "normal",
              "lineHeight": "16px"
            },
            "color": "rgba(0, 0, 0, 0.38)",
            "displayTypePrefix": true
          },
          "margin": "0px",
          "borderRadius": "",
          "iconSize": "0px",
          "enableDataExport": true
        },
        "row": 0,
        "col": 0,
        "id": "3307147d-9991-3eb4-e0e4-19500419f695"
      },
      "0106ede7-e965-1661-b94a-0a0e21ef6521": {
        "typeFullFqn": "system.map",
        "type": "latest",
        "sizeX": 8.5,
        "sizeY": 6,
        "config": {
          "datasources": [],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1742741950734,
                "endTimeMs": 1742828350734
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "rgba(0, 0, 0, 0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "mapType": "geoMap",
            "layers": [
              {
                "label": "{i18n:widgets.maps.layer.roadmap}",
                "provider": "custom",
                "tileUrl": "https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}{r}.png",
                "referenceLayer": null
              },
              {
                "label": "{i18n:widgets.maps.layer.satellite}",
                "provider": "openstreet",
                "layerType": "Esri.WorldImagery"
              },
              {
                "label": "{i18n:widgets.maps.layer.hybrid}",
                "provider": "openstreet",
                "layerType": "Esri.WorldImagery",
                "referenceLayer": "openstreetmap_hybrid"
              }
            ],
            "imageSource": null,
            "markers": [
              {
                "dsType": "entity",
                "dsLabel": "",
                "dsDeviceId": null,
                "dsEntityAliasId": "c277b2f3-cca2-032a-4201-0305e99d3590",
                "dsFilterId": null,
                "additionalDataKeys": [
                  {
                    "name": "active",
                    "type": "attribute",
                    "label": "active",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.25368338461489826
                  },
                  {
                    "name": "state",
                    "type": "attribute",
                    "label": "state",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.9460447622547674
                  },
                  {
                    "name": "aqi",
                    "type": "timeseries",
                    "label": "aqi",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.16939980979630143
                  },
                  {
                    "name": "batteryLevel",
                    "type": "timeseries",
                    "label": "batteryLevel",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.7735200314203357
                  },
                  {
                    "name": "batteryLevelThreshold",
                    "type": "attribute",
                    "label": "batteryLevelThreshold",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.28390807926935113
                  }
                ],
                "label": {
                  "show": false,
                  "type": "pattern",
                  "pattern": "${entityName}",
                  "patternFunction": null
                },
                "tooltip": {
                  "show": true,
                  "type": "function",
                  "pattern": "<b>${entityName}</b><br/><br/><b>Latitude:</b> ${latitude:7}<br/><b>Longitude:</b> ${longitude:7}<br/><b>Temperature:</b> ${temperature} °C<br/><small>See tooltip settings for details</small>",
                  "patternFunction": "const aqi = processValue(data['aqi'], 0);\nconst batteryLevel = processValue(data['batteryLevel']);\nconst batteryLevelThreshold = processValue(data['batteryLevelThreshold']);\nconst blColor = (batteryLevel <= batteryLevelThreshold) ? \"#C32F37\" : \"#29313C\";\nconst lastUpdate = (data['batteryLevel|ts'] || data['aqi|ts']) ? moment(Math.max(data['batteryLevel|ts'], data['aqi|ts'])).format('D MMM YYYY HH:mm') : 'N/A';\nconst isActive = data['active'] === 'true';\nconst status = isActive ? 'Connected' : 'Inactive';\nconst color = isActive ? '#3AA94D' : '#C42F37';\nconst bgColor = isActive ? 'rgba(58, 169, 77, 0.08)' : 'rgba(196, 47, 55, 0.08)';\n\nreturn '<div style=\"display:flex;flex-direction:column;margin-bottom:8px;font-family:\\'Roboto\\';font-weight:500;font-size:14px;line-height:18px;letter-spacing:0.25px;color:#29313C\">' +\n            '<div style=\"margin-bottom:14px\">${entityLabel}</div>' +\n            '<div style=\"display:flex;flex-direction:row;align-items:baseline;margin-bottom:6px;\">' +\n                '<div style=\"font-size:12px;line-height:16px;letter-spacing:0.4px;color:#9FA6B4;width:100px\">Sensor id</div>' +\n                '<div>${entityName}</div>' +\n            '</div>' +\n            '<div style=\"display:flex;flex-direction:row;align-items:baseline;margin-bottom:6px;\">' +\n                '<div style=\"font-size:12px;line-height:16px;letter-spacing:0.4px;color:#9FA6B4;width:100px\">Connection</div>' +\n                '<div style=\"width:fit-content;padding:4px 8px;font-weight:400;border-radius:8px;color:'+ color +';background-color:'+ bgColor +'\">' + status + '</div>' +\n            '</div>' +\n            '<div style=\"display:flex;flex-direction:row;align-items:baseline;margin-bottom:6px;\">' +\n                '<div style=\"font-size:12px;line-height:16px;letter-spacing:0.4px;color:#9FA6B4;width:100px\">Battery level</div>' +\n                '<div style=\"color:'+ blColor +'\">'+ batteryLevel +'%</div>' +\n            '</div>' +\n            '<div style=\"display:flex;flex-direction:row;align-items:baseline;margin-bottom:6px;\">' +\n                '<div style=\"font-size:12px;line-height:16px;letter-spacing:0.4px;color:#9FA6B4;width:100px\">Last AQI</div>' +\n                '<div>'+ aqi +'</div>' +\n            '</div>' +\n            '<div style=\"display:flex;flex-direction:row;align-items:baseline;margin-bottom:6px;\">' +\n                '<div style=\"font-size:12px;line-height:16px;letter-spacing:0.4px;color:#9FA6B4;width:100px\">Last update</div>' +\n                '<div>'+ lastUpdate +'</div>' +\n            '</div>' +\n       '</div>' +\n       '<link-act name=\"sensor-details\">Details</link-act>';\n\nfunction isNumber(value) {\n    return (typeof value === 'number' && isFinite(value));\n}\n\nfunction processValue(value, dec) {\n    value = parseFloat(value);\n    if (isNumber(value)) {\n        if (isNumber(dec)) {\n            value = parseFloat(value.toFixed(dec));\n        }\n        return value;\n    } else {\n        return 'N/A';\n    }\n}",
                  "trigger": "click",
                  "autoclose": true,
                  "offsetX": 0,
                  "offsetY": -1,
                  "tagActions": [
                    {
                      "name": "sensor-details",
                      "type": "openDashboardState",
                      "targetDashboardStateId": "selected_sensor",
                      "setEntityId": true,
                      "stateEntityParamName": null,
                      "openRightLayout": false,
                      "openInSeparateDialog": false,
                      "openInPopover": false
                    }
                  ]
                },
                "click": {
                  "type": "doNothing"
                },
                "groups": null,
                "edit": {
                  "enabledActions": [],
                  "attributeScope": "SERVER_SCOPE",
                  "snappable": false
                },
                "xKey": {
                  "name": "latitude",
                  "label": "latitude",
                  "type": "attribute",
                  "settings": {},
                  "color": "#2196f3"
                },
                "yKey": {
                  "name": "longitude",
                  "label": "longitude",
                  "type": "attribute",
                  "settings": {},
                  "color": "#2196f3"
                },
                "markerType": "image",
                "markerShape": {
                  "shape": "markerShape1",
                  "size": 34,
                  "color": {
                    "type": "constant",
                    "color": "#307FE5"
                  }
                },
                "markerIcon": {
                  "iconContainer": "iconContainer1",
                  "icon": "mdi:lightbulb-on",
                  "size": 48,
                  "color": {
                    "type": "constant",
                    "color": "#307FE5"
                  }
                },
                "markerImage": {
                  "type": "function",
                  "image": "/assets/markers/shape1.svg",
                  "imageSize": 34,
                  "imageFunction": "const state = data['state'];\nconst hasData = data['aqi'] || data['batteryLevel'];\nconst svgString = '<svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">' +\n                    '<rect width=\"32\" height=\"32\" rx=\"16\" fill=\"'+ (state === 'normal' ? (hasData ? '#80BA3C' : '#B4B4B4') : '#C42F37\"/><path d=\"M15 10V19H17V10M15 21V23H17V21\" fill=\"white') +'\"/>' +       \n                  '</svg>';\n                  \nconst encodedSvg = encodeURIComponent(svgString);\nconst svgUrl = 'data:image/svg+xml,' + encodedSvg;\n\nreturn {\n    url: svgUrl,\n    size: 32\n};",
                  "images": null
                },
                "markerOffsetX": 0.5,
                "markerOffsetY": 1,
                "markerClustering": {
                  "enable": false,
                  "zoomOnClick": true,
                  "maxZoom": null,
                  "maxClusterRadius": 80,
                  "zoomAnimation": true,
                  "showCoverageOnHover": true,
                  "spiderfyOnMaxZoom": false,
                  "chunkedLoad": false,
                  "lazyLoad": true,
                  "useClusterMarkerColorFunction": false,
                  "clusterMarkerColorFunction": null
                }
              }
            ],
            "polygons": [],
            "circles": [],
            "additionalDataSources": [],
            "controlsPosition": "topleft",
            "zoomActions": [
              "scroll",
              "doubleClick",
              "controlButtons"
            ],
            "scales": [],
            "dragModeButton": false,
            "fitMapBounds": true,
            "useDefaultCenterPosition": false,
            "defaultCenterPosition": "0,0",
            "defaultZoomLevel": null,
            "mapPageSize": 16384,
            "mapActionButtons": [],
            "background": {
              "type": "color",
              "color": "#fff",
              "overlay": {
                "enabled": false,
                "color": "rgba(255,255,255,0.72)",
                "blur": 3
              }
            },
            "padding": "8px"
          },
          "title": "Map",
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": true,
          "widgetStyle": {},
          "widgetCss": "",
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "configMode": "basic",
          "titleFont": null,
          "titleColor": null,
          "margin": "0px",
          "borderRadius": "",
          "iconSize": "24px",
          "titleIcon": "map",
          "iconColor": "#1F6BDD",
          "actions": {},
          "enableDataExport": false
        },
        "row": 0,
        "col": 0,
        "id": "0106ede7-e965-1661-b94a-0a0e21ef6521"
      },
      "2b5dc642-aa86-b1c0-f15e-31b648165201": {
        "typeFullFqn": "system.map",
        "type": "latest",
        "sizeX": 8.5,
        "sizeY": 6,
        "config": {
          "datasources": [],
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 60000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1742741950734,
                "endTimeMs": 1742828350734
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "AVG",
              "limit": 25000
            }
          },
          "showTitle": false,
          "backgroundColor": "rgba(0, 0, 0, 0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "mapType": "geoMap",
            "layers": [
              {
                "label": "{i18n:widgets.maps.layer.roadmap}",
                "provider": "custom",
                "tileUrl": "https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}{r}.png",
                "referenceLayer": null
              },
              {
                "label": "{i18n:widgets.maps.layer.satellite}",
                "provider": "openstreet",
                "layerType": "Esri.WorldImagery"
              },
              {
                "label": "{i18n:widgets.maps.layer.hybrid}",
                "provider": "openstreet",
                "layerType": "Esri.WorldImagery",
                "referenceLayer": "openstreetmap_hybrid"
              }
            ],
            "imageSource": null,
            "markers": [
              {
                "dsType": "entity",
                "dsLabel": "",
                "dsDeviceId": null,
                "dsEntityAliasId": "98ac7e0d-e4c9-58a6-ee9a-e691db5bba47",
                "dsFilterId": null,
                "additionalDataKeys": [
                  {
                    "name": "active",
                    "type": "attribute",
                    "label": "active",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.25368338461489826
                  },
                  {
                    "name": "state",
                    "type": "attribute",
                    "label": "state",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.9460447622547674
                  },
                  {
                    "name": "aqi",
                    "type": "timeseries",
                    "label": "aqi",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.16939980979630143
                  },
                  {
                    "name": "batteryLevel",
                    "type": "timeseries",
                    "label": "batteryLevel",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.7735200314203357
                  },
                  {
                    "name": "batteryLevelThreshold",
                    "type": "attribute",
                    "label": "batteryLevelThreshold",
                    "color": "#2196f3",
                    "settings": {},
                    "_hash": 0.28390807926935113
                  }
                ],
                "label": {
                  "show": false,
                  "type": "pattern",
                  "pattern": "${entityName}",
                  "patternFunction": null
                },
                "tooltip": {
                  "show": false,
                  "type": "pattern",
                  "pattern": "<b>${entityName}</b><br/><br/><b>Latitude:</b> ${latitude:7}<br/><b>Longitude:</b> ${longitude:7}<br/><b>Temperature:</b> ${temperature} °C<br/><small>See tooltip settings for details</small>",
                  "patternFunction": "",
                  "trigger": "click",
                  "autoclose": true,
                  "offsetX": 0,
                  "offsetY": -1,
                  "tagActions": [
                    {
                      "name": "sensor-details",
                      "type": "openDashboardState",
                      "targetDashboardStateId": "selected_sensor",
                      "setEntityId": true,
                      "stateEntityParamName": null,
                      "openRightLayout": false,
                      "openInSeparateDialog": false,
                      "openInPopover": false
                    }
                  ]
                },
                "click": {
                  "type": "doNothing"
                },
                "groups": null,
                "edit": {
                  "enabledActions": [
                    "add",
                    "move",
                    "remove"
                  ],
                  "attributeScope": "SERVER_SCOPE",
                  "snappable": false
                },
                "xKey": {
                  "name": "latitude",
                  "label": "latitude",
                  "type": "attribute",
                  "settings": {},
                  "color": "#2196f3"
                },
                "yKey": {
                  "name": "longitude",
                  "label": "longitude",
                  "type": "attribute",
                  "settings": {},
                  "color": "#2196f3"
                },
                "markerType": "image",
                "markerShape": {
                  "shape": "markerShape1",
                  "size": 34,
                  "color": {
                    "type": "constant",
                    "color": "#307FE5"
                  }
                },
                "markerIcon": {
                  "iconContainer": "iconContainer1",
                  "icon": "mdi:lightbulb-on",
                  "size": 48,
                  "color": {
                    "type": "constant",
                    "color": "#307FE5"
                  }
                },
                "markerImage": {
                  "type": "function",
                  "image": "/assets/markers/shape1.svg",
                  "imageSize": 34,
                  "imageFunction": "const state = data['state'];\nconst hasData = data['aqi'] || data['batteryLevel'];\nconst svgString = '<svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">' +\n                    '<rect width=\"32\" height=\"32\" rx=\"16\" fill=\"'+ (state === 'normal' ? (hasData ? '#80BA3C' : '#B4B4B4') : '#C42F37\"/><path d=\"M15 10V19H17V10M15 21V23H17V21\" fill=\"white') +'\"/>' +       \n                  '</svg>';\n                  \nconst encodedSvg = encodeURIComponent(svgString);\nconst svgUrl = 'data:image/svg+xml,' + encodedSvg;\n\nreturn {\n    url: svgUrl,\n    size: 32\n};",
                  "images": null
                },
                "markerOffsetX": 0.5,
                "markerOffsetY": 1,
                "markerClustering": {
                  "enable": false,
                  "zoomOnClick": true,
                  "maxZoom": null,
                  "maxClusterRadius": 80,
                  "zoomAnimation": true,
                  "showCoverageOnHover": true,
                  "spiderfyOnMaxZoom": false,
                  "chunkedLoad": false,
                  "lazyLoad": true,
                  "useClusterMarkerColorFunction": false,
                  "clusterMarkerColorFunction": null
                }
              }
            ],
            "polygons": [],
            "circles": [],
            "additionalDataSources": [],
            "controlsPosition": "topleft",
            "zoomActions": [
              "scroll",
              "doubleClick",
              "controlButtons"
            ],
            "scales": [],
            "dragModeButton": false,
            "fitMapBounds": true,
            "useDefaultCenterPosition": false,
            "defaultCenterPosition": "0,0",
            "defaultZoomLevel": null,
            "mapPageSize": 16384,
            "mapActionButtons": [],
            "background": {
              "type": "color",
              "color": "#fff",
              "overlay": {
                "enabled": false,
                "color": "rgba(255,255,255,0.72)",
                "blur": 3
              }
            },
            "padding": "8px"
          },
          "title": "Map",
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": true,
          "widgetStyle": {},
          "widgetCss": "",
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "configMode": "basic",
          "titleFont": null,
          "titleColor": null,
          "margin": "0px",
          "borderRadius": "",
          "iconSize": "24px",
          "titleIcon": "map",
          "iconColor": "#1F6BDD",
          "actions": {},
          "enableDataExport": false
        },
        "row": 0,
        "col": 0,
        "id": "2b5dc642-aa86-b1c0-f15e-31b648165201"
      }
    },
    "states": {
      "default": {
        "name": "AQI Administration",
        "root": true,
        "layouts": {
          "main": {
            "widgets": {
              "0fccdd88-4852-2806-aa5b-d7853adc4088": {
                "sizeX": 10,
                "sizeY": 5,
                "row": 0,
                "col": 0
              },
              "8036e24e-24c8-cff5-3bb8-540e7c2ffafc": {
                "sizeX": 10,
                "sizeY": 5,
                "row": 5,
                "col": 0
              },
              "0106ede7-e965-1661-b94a-0a0e21ef6521": {
                "sizeX": 14,
                "sizeY": 10,
                "row": 0,
                "col": 10
              }
            },
            "gridSettings": {
              "backgroundColor": "#f9f9fb",
              "columns": 24,
              "margin": 16,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": true,
              "mobileRowHeight": 70,
              "outerMargin": true,
              "layoutType": "default"
            }
          }
        }
      },
      "selected_sensor": {
        "name": "${entityLabel}",
        "root": false,
        "layouts": {
          "main": {
            "widgets": {
              "5e0db7e2-78da-079f-47d2-960355026472": {
                "sizeX": 8,
                "sizeY": 5,
                "row": 5,
                "col": 6,
                "mobileOrder": 4
              },
              "b89177ac-8f67-3ae5-dfc8-945d995ced41": {
                "sizeX": 6,
                "sizeY": 5,
                "row": 0,
                "col": 0,
                "mobileOrder": 0
              },
              "f6c53e71-6c41-71c4-842b-9f071a4dd168": {
                "sizeX": 8,
                "sizeY": 5,
                "row": 0,
                "col": 6,
                "mobileOrder": 1
              },
              "1fdd80c2-0d7d-efa3-85f8-fb46908cff94": {
                "sizeX": 10,
                "sizeY": 5,
                "mobileOrder": 2,
                "row": 0,
                "col": 14
              },
              "3307147d-9991-3eb4-e0e4-19500419f695": {
                "sizeX": 10,
                "sizeY": 5,
                "mobileOrder": 5,
                "row": 5,
                "col": 14
              },
              "2b5dc642-aa86-b1c0-f15e-31b648165201": {
                "sizeX": 6,
                "sizeY": 5,
                "mobileOrder": 3,
                "resizable": true,
                "row": 5,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#f9f9fb",
              "columns": 24,
              "margin": 16,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": true,
              "mobileRowHeight": 70,
              "outerMargin": true,
              "layoutType": "default"
            }
          }
        }
      }
    },
    "entityAliases": {
      "2d96f6d4-f9ad-7633-fa62-3cb944f02901": {
        "id": "2d96f6d4-f9ad-7633-fa62-3cb944f02901",
        "alias": "City",
        "filter": {
          "type": "singleEntity",
          "resolveMultiple": false,
          "singleEntity": {
            "entityType": "ASSET",
            "id": "203624e0-641a-11ed-90f3-052710537c9f"
          }
        }
      },
      "c277b2f3-cca2-032a-4201-0305e99d3590": {
        "id": "c277b2f3-cca2-032a-4201-0305e99d3590",
        "alias": "AQI Sensors",
        "filter": {
          "type": "deviceSearchQuery",
          "resolveMultiple": true,
          "rootStateEntity": false,
          "stateEntityParamName": null,
          "defaultStateEntity": null,
          "rootEntity": {
            "entityType": "ASSET",
            "id": "203624e0-641a-11ed-90f3-052710537c9f"
          },
          "direction": "FROM",
          "maxLevel": 1,
          "fetchLastLevelOnly": false,
          "relationType": "Contains",
          "deviceTypes": [
            "AQI Sensor"
          ]
        }
      },
      "98ac7e0d-e4c9-58a6-ee9a-e691db5bba47": {
        "id": "98ac7e0d-e4c9-58a6-ee9a-e691db5bba47",
        "alias": "Sensor",
        "filter": {
          "type": "stateEntity",
          "resolveMultiple": false,
          "stateEntityParamName": null,
          "defaultStateEntity": null
        }
      }
    },
    "filters": {},
    "timewindow": {
      "hideAggregation": false,
      "hideAggInterval": false,
      "hideTimezone": false,
      "selectedTab": 0,
      "realtime": {
        "realtimeType": 0,
        "timewindowMs": 604800000,
        "quickInterval": "CURRENT_DAY",
        "interval": 1000
      },
      "aggregation": {
        "type": "NONE",
        "limit": 25000
      }
    },
    "settings": {
      "stateControllerId": "entity",
      "showTitle": false,
      "showDashboardsSelect": false,
      "showEntitiesSelect": false,
      "showDashboardTimewindow": true,
      "showDashboardExport": true,
      "toolbarAlwaysOpen": true,
      "titleColor": "rgba(0,0,0,0.870588)",
      "showDashboardLogo": false,
      "dashboardLogoUrl": null,
      "hideToolbar": false,
      "showFilters": false,
      "showUpdateDashboardImage": false,
      "dashboardCss": ".tb-widget-container > .tb-widget {\n    border-radius: 12px;\n    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.06);\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget {\n    color: #9FA6B4 !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-widget-actions button.mat-mdc-icon-button {\n    --mat-icon-color: inherit !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-header-cell {\n    color: #9FA6B4 !important;\n    font-weight: 500;\n    font-size: 12px;\n    line-height: 16px;\n    letter-spacing: 0.4px;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-cell {\n    color: #4B535B;\n    border-bottom-color: transparent;\n    font-size: 14px;\n    line-height: 20px;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .no-data-found {\n    font-weight: 500;\n    font-size: 14px;\n    letter-spacing: 0.25px;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-row:hover:not(.tb-current-entity),\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-row:hover:not(.tb-current-entity) .mat-mdc-cell.mat-mdc-table-sticky {\n    background-color: #F9F9FB !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-header-cell .mat-sort-header-arrow {\n    color: #9FA6B4 !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-input-element::placeholder {\n    color: #9FA6B4 !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-input-element::-moz-placeholder {\n    color: #9FA6B4 !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-input-element::-webkit-input-placeholder {\n    color: #9FA6B4 !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-input-element:-ms-input-placeholder {\n    color: #9FA6B4 !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-cell .mat-mdc-checkbox .mdc-checkbox__native-control:focus:enabled:not(:checked):not(:indeterminate):not([data-indeterminate=true])~.mdc-checkbox__background,\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-header-cell .mat-mdc-checkbox .mdc-checkbox__native-control:focus:enabled:not(:checked):not(:indeterminate):not([data-indeterminate=true])~.mdc-checkbox__background {\n    border-color : #9FA6B4 !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-cell button.mat-mdc-icon-button mat-icon {\n    color: #9FA6B4 !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-paginator {\n    color: #9FA6B4 !important;\n}\n\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-paginator button.mat-mdc-icon-button {\n    color: #9FA6B4 !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-paginator .mat-mdc-select-value {\n    color: #9FA6B4 !important;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget a.tb-custom-action {\n    font-family: 'Roboto';\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget {\n    --tb-map-control-color: #9FA6B4;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .leaflet-control-zoom-in,\n.tb-dashboard-page .tb-widget-container > .tb-widget .leaflet-control-zoom-out {\n    color: #9FA6B4;\n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .leaflet-control-zoom-in {\n   border-bottom: 1px solid transparent; \n}\n\n.tb-dashboard-page .tb-widget-container > .tb-widget .leaflet-control,\n.tb-dashboard-page .tb-widget-container > .tb-widget .leaflet-buttons-control-button{\n    border: none;\n}\n"
    }
  },
  "name": "Air quality monitoring administration",
  "resources": [
    {
      "link": "/api/images/system/air-quality.jpg",
      "title": "\"Air quality monitoring\" dashboard image",
      "type": "IMAGE",
      "subType": "IMAGE",
      "fileName": "air-quality.jpg",
      "publicResourceKey": "LtB8xMJy3CM45Vw0ZP9aW72sAkBom0cb",
      "mediaType": "image/jpeg",
      "data": "",
      "public": true
    }
  ]
}
