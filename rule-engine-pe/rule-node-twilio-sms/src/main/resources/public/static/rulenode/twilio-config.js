System.register(["@angular/core","@shared/public-api","@angular/forms","@ngrx/store","@angular/common","@shared/components/help-popup.component","@angular/material/input","@angular/material/form-field","@angular/flex-layout/flex","@ngx-translate/core","@angular/platform-browser","@angular/material/icon","@angular/material/select","@angular/material/core","@angular/material/tooltip","@angular/flex-layout/extended","@home/components/public-api"],(function(e){"use strict";var t,o,i,n,a,r,l,s,m,u,c,p,d,f,g,b,L,v,h,x,w,y,P;return{setters:[function(e){t=e,o=e.Pipe,i=e.Component,n=e.NgModule},function(e){a=e.RuleNodeConfigurationComponent,r=e.SharedModule},function(e){l=e.Validators,s=e},function(e){m=e},function(e){u=e,c=e.CommonModule},function(e){p=e},function(e){d=e},function(e){f=e},function(e){g=e},function(e){b=e},function(e){L=e},function(e){v=e},function(e){h=e},function(e){x=e},function(e){w=e},function(e){y=e},function(e){P=e.HomeComponentsModule}],execute:function(){class C{constructor(e){this.sanitizer=e}transform(e){return this.sanitizer.bypassSecurityTrustHtml(e)}}C.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.5",ngImport:t,type:C,deps:[{token:L.DomSanitizer}],target:t.ɵɵFactoryTarget.Pipe}),C.ɵpipe=t.ɵɵngDeclarePipe({minVersion:"14.0.0",version:"15.2.5",ngImport:t,type:C,name:"safeHtml"}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.5",ngImport:t,type:C,decorators:[{type:o,args:[{name:"safeHtml"}]}],ctorParameters:function(){return[{type:L.DomSanitizer}]}});class I extends a{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.twilioSmsConfigForm}onConfigurationSet(e){this.twilioSmsConfigForm=this.fb.group({numberFrom:[e?e.numberFrom:null,[l.required]],numbersTo:[e?e.numbersTo:null,[l.required]],accountSid:[e?e.accountSid:null,[l.required]],accountToken:[e?e.accountToken:null,[l.required]]})}}var A,E;e("TwilioSmsConfigComponent",I),I.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.5",ngImport:t,type:I,deps:[{token:m.Store},{token:s.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),I.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.5",type:I,selector:"tb-action-node-twilio-sms-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="twilioSmsConfigForm" fxLayout="column" class="tb-form-panel no-border no-padding">\n  <section class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.twilio.phone-settings</div>\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n      <mat-label translate>tb.twilio.number-from</mat-label>\n      <input required matInput formControlName="numberFrom">\n      <mat-error *ngIf="twilioSmsConfigForm.get(\'numberFrom\').hasError(\'required\')">\n        {{ \'tb.twilio.number-from-required\' | translate }}\n      </mat-error>\n      <mat-hint align="start" class="text-hint" [innerHTML]="\'tb.twilio.number-to-hint\' | translate | safeHtml">\n      </mat-hint>\n      <mat-hint align="end">\n        <div class="input-bottom-double-hint">\n          <div class="see-example"\n               hintMode\n               tb-help-popup="{{\'rulenode/twilio_sms_numbers_templatization\'}}"\n               tb-help-popup-placement="right"\n               trigger-style="letter-spacing:0.25px; font-size:12px;"\n               [tb-help-popup-style]="{maxWidth: \'820px\'}"\n               trigger-text="{{ \'tb.twilio.see-examples\' | translate }}"></div>\n        </div>\n      </mat-hint>\n    </mat-form-field>\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n      <mat-label translate>tb.twilio.numbers-to</mat-label>\n      <input required matInput formControlName="numbersTo">\n      <mat-error *ngIf="twilioSmsConfigForm.get(\'numbersTo\').hasError(\'required\')">\n        {{ \'tb.twilio.numbers-to-required\' | translate }}\n      </mat-error>\n      <mat-hint align="start" class="text-hint" [innerHTML]="\'tb.twilio.numbers-to-hint\' | translate | safeHtml"></mat-hint>\n      <mat-hint align="end">\n        <div class="input-bottom-double-hint">\n          <div class="see-example"\n               hintMode\n               tb-help-popup="{{\'rulenode/twilio_sms_numbers_templatization\'}}"\n               tb-help-popup-placement="right"\n               trigger-style="letter-spacing:0.25px; font-size:12px;"\n               [tb-help-popup-style]="{maxWidth: \'820px\'}"\n               trigger-text="{{ \'tb.twilio.see-examples\' | translate }}"></div>\n        </div>\n      </mat-hint>\n    </mat-form-field>\n  </section>\n  <section class="tb-form-panel stroked no-gap no-padding-bottom">\n    <div class="tb-form-panel-title margin-bottom" translate>tb.twilio.account-settings</div>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.twilio.account-sid</mat-label>\n      <input required matInput formControlName="accountSid">\n      <mat-error *ngIf="twilioSmsConfigForm.get(\'accountSid\').hasError(\'required\')">\n        {{ \'tb.twilio.account-sid-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.twilio.account-token</mat-label>\n      <input required type="password" matInput formControlName="accountToken">\n      <mat-error *ngIf="twilioSmsConfigForm.get(\'accountToken\').hasError(\'required\')">\n        {{ \'tb.twilio.account-token-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </section>\n</section>\n',styles:[":host .margin-bottom{margin-bottom:16px}:host .input-bottom-double-hint{display:inline-flex}:host .input-bottom-double-hint .see-example{flex-shrink:0}:host .text-hint{max-width:80%}\n"],dependencies:[{kind:"directive",type:u.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:p.HelpPopupComponent,selector:"[tb-help-popup], [tb-help-popup-content]",inputs:["tb-help-popup","tb-help-popup-content","trigger-text","trigger-style","tb-help-popup-placement","tb-help-popup-style"]},{kind:"directive",type:d.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:f.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:f.MatLabel,selector:"mat-label"},{kind:"directive",type:f.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:f.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:g.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:s.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:s.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:s.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:s.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:s.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:s.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:b.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:b.TranslatePipe,name:"translate"},{kind:"pipe",type:C,name:"safeHtml"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.5",ngImport:t,type:I,decorators:[{type:i,args:[{selector:"tb-action-node-twilio-sms-config",template:'<section [formGroup]="twilioSmsConfigForm" fxLayout="column" class="tb-form-panel no-border no-padding">\n  <section class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.twilio.phone-settings</div>\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n      <mat-label translate>tb.twilio.number-from</mat-label>\n      <input required matInput formControlName="numberFrom">\n      <mat-error *ngIf="twilioSmsConfigForm.get(\'numberFrom\').hasError(\'required\')">\n        {{ \'tb.twilio.number-from-required\' | translate }}\n      </mat-error>\n      <mat-hint align="start" class="text-hint" [innerHTML]="\'tb.twilio.number-to-hint\' | translate | safeHtml">\n      </mat-hint>\n      <mat-hint align="end">\n        <div class="input-bottom-double-hint">\n          <div class="see-example"\n               hintMode\n               tb-help-popup="{{\'rulenode/twilio_sms_numbers_templatization\'}}"\n               tb-help-popup-placement="right"\n               trigger-style="letter-spacing:0.25px; font-size:12px;"\n               [tb-help-popup-style]="{maxWidth: \'820px\'}"\n               trigger-text="{{ \'tb.twilio.see-examples\' | translate }}"></div>\n        </div>\n      </mat-hint>\n    </mat-form-field>\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n      <mat-label translate>tb.twilio.numbers-to</mat-label>\n      <input required matInput formControlName="numbersTo">\n      <mat-error *ngIf="twilioSmsConfigForm.get(\'numbersTo\').hasError(\'required\')">\n        {{ \'tb.twilio.numbers-to-required\' | translate }}\n      </mat-error>\n      <mat-hint align="start" class="text-hint" [innerHTML]="\'tb.twilio.numbers-to-hint\' | translate | safeHtml"></mat-hint>\n      <mat-hint align="end">\n        <div class="input-bottom-double-hint">\n          <div class="see-example"\n               hintMode\n               tb-help-popup="{{\'rulenode/twilio_sms_numbers_templatization\'}}"\n               tb-help-popup-placement="right"\n               trigger-style="letter-spacing:0.25px; font-size:12px;"\n               [tb-help-popup-style]="{maxWidth: \'820px\'}"\n               trigger-text="{{ \'tb.twilio.see-examples\' | translate }}"></div>\n        </div>\n      </mat-hint>\n    </mat-form-field>\n  </section>\n  <section class="tb-form-panel stroked no-gap no-padding-bottom">\n    <div class="tb-form-panel-title margin-bottom" translate>tb.twilio.account-settings</div>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.twilio.account-sid</mat-label>\n      <input required matInput formControlName="accountSid">\n      <mat-error *ngIf="twilioSmsConfigForm.get(\'accountSid\').hasError(\'required\')">\n        {{ \'tb.twilio.account-sid-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.twilio.account-token</mat-label>\n      <input required type="password" matInput formControlName="accountToken">\n      <mat-error *ngIf="twilioSmsConfigForm.get(\'accountToken\').hasError(\'required\')">\n        {{ \'tb.twilio.account-token-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </section>\n</section>\n',styles:[":host .margin-bottom{margin-bottom:16px}:host .input-bottom-double-hint{display:inline-flex}:host .input-bottom-double-hint .see-example{flex-shrink:0}:host .text-hint{max-width:80%}\n"]}]}],ctorParameters:function(){return[{type:m.Store},{type:s.FormBuilder}]}}),function(e){e.MAN="man",e.WOMAN="woman",e.ALICE="alice",e.POLLY_ADITI="Polly.Aditi",e.POLLY_AMY="Polly.Amy",e.POLLY_ASTRID="Polly.Astrid",e.POLLY_BIANCA="Polly.Bianca",e.POLLY_BRIAN="Polly.Brian",e.POLLY_CAMILA="Polly.Camila",e.POLLY_CARLA="Polly.Carla",e.POLLY_CARMEN="Polly.Carmen",e.POLLY_CELINE="Polly.Celine",e.POLLY_CHANTAL="Polly.Chantal",e.POLLY_CONCHITA="Polly.Conchita",e.POLLY_CRISTIANO="Polly.Cristiano",e.POLLY_DORA="Polly.Dora",e.POLLY_EMMA="Polly.Emma",e.POLLY_ENRIQUE="Polly.Enrique",e.POLLY_EWA="Polly.Ewa",e.POLLY_FILIZ="Polly.Filiz",e.POLLY_GERAINT="Polly.Geraint",e.POLLY_GIORGIO="Polly.Giorgio",e.POLLY_GWYNETH="Polly.Gwyneth",e.POLLY_HANS="Polly.Hans",e.POLLY_INES="Polly.Ines",e.POLLY_IVY="Polly.Ivy",e.POLLY_JACEK="Polly.Jacek",e.POLLY_JAN="Polly.Jan",e.POLLY_JOANNA="Polly.Joanna",e.POLLY_JOEY="Polly.Joey",e.POLLY_JUSTIN="Polly.Justin",e.POLLY_KARL="Polly.Karl",e.POLLY_KENDRA="Polly.Kendra",e.POLLY_KIMBERLY="Polly.Kimberly",e.POLLY_LEA="Polly.Lea",e.POLLY_LIV="Polly.Liv",e.POLLY_LOTTE="Polly.Lotte",e.POLLY_LUCIA="Polly.Lucia",e.POLLY_LUPE="Polly.Lupe",e.POLLY_MADS="Polly.Mads",e.POLLY_MAJA="Polly.Maja",e.POLLY_MARLENE="Polly.Marlene",e.POLLY_MATHIEU="Polly.Mathieu",e.POLLY_MATTHEW="Polly.Matthew",e.POLLY_MAXIM="Polly.Maxim",e.POLLY_MIA="Polly.Mia",e.POLLY_MIGUEL="Polly.Miguel",e.POLLY_MIZUKI="Polly.Mizuki",e.POLLY_NAJA="Polly.Naja",e.POLLY_NICOLE="Polly.Nicole",e.POLLY_PENELOPE="Polly.Penelope",e.POLLY_RAVEENA="Polly.Raveena",e.POLLY_RICARDO="Polly.Ricardo",e.POLLY_RUBEN="Polly.Ruben",e.POLLY_RUSSELL="Polly.Russell",e.POLLY_SALLI="Polly.Salli",e.POLLY_SEOYEON="Polly.Seoyeon",e.POLLY_TAKUMI="Polly.Takumi",e.POLLY_TATYANA="Polly.Tatyana",e.POLLY_VICKI="Polly.Vicki",e.POLLY_VITORIA="Polly.Vitoria",e.POLLY_ZEINA="Polly.Zeina",e.POLLY_ZHIYU="Polly.Zhiyu",e.POLLY_AMY_NEURAL="Polly.Amy-Neural",e.POLLY_EMMA_NEURAL="Polly.Emma-Neural",e.POLLY_BRIAN_NEURAL="Polly.Brian-Neural",e.POLLY_SALLI_NEURAL="Polly.Salli-Neural",e.POLLY_IVY_NEURAL="Polly.Ivy-Neural",e.POLLY_JOANNA_NEURAL="Polly.Joanna-Neural",e.POLLY_KENDRA_NEURAL="Polly.Kendra-Neural",e.POLLY_KIMBERLY_NEURAL="Polly.Kimberly-Neural",e.POLLY_JOEY_NEURAL="Polly.Joey-Neural",e.POLLY_JUSTIN_NEURAL="Polly.Justin-Neural",e.POLLY_MATTHEW_NEURAL="Polly.Matthew-Neural",e.POLLY_CAMILA_NEURAL="Polly.Camila-Neural",e.POLLY_LUPE_NEURAL="Polly.Lupe-Neural"}(A||(A={})),function(e){e.BASIC="Basic",e.ALICE="Alice",e.AMAZON_POLLY="Amazon Polly"}(E||(E={}));const N=new Map([["en",{viewValue:"English, United States",value:"en",voices:[A.MAN,A.WOMAN]}],["en-gb",{viewValue:"English, British",value:"en-gb",voices:[A.MAN,A.WOMAN]}],["es",{viewValue:"Spanish, Spain",value:"es",voices:[A.MAN,A.WOMAN]}],["fr",{viewValue:"French",value:"fr",voices:[A.MAN,A.WOMAN]}],["de",{viewValue:"German",value:"de",voices:[A.MAN,A.WOMAN]}]]),O=new Map([["da-DK",{viewValue:"Danish, Denmark",value:"da-DK",voices:[A.ALICE]}],["de-DE",{viewValue:"German, Germany",value:"de-DE",voices:[A.ALICE]}],["en-AU",{viewValue:"English, Australia",value:"en-AU",voices:[A.ALICE]}],["en-CA",{viewValue:"English, Canada",value:"en-CA",voices:[A.ALICE]}],["en-GB",{viewValue:"English, UK",value:"en-GB",voices:[A.ALICE]}],["en-IN",{viewValue:"English, India",value:"en-IN",voices:[A.ALICE]}],["en-US",{viewValue:"English, United States",value:"en-US",voices:[A.ALICE]}],["ca-ES",{viewValue:"Catalan, Spain",value:"ca-ES",voices:[A.ALICE]}],["es-ES",{viewValue:"Spanish, Spain",value:"es-ES",voices:[A.ALICE]}],["es-MX",{viewValue:"Spanish, Mexico",value:"es-MX",voices:[A.ALICE]}],["fi-FI",{viewValue:"Finnish, Finland",value:"fi-FI",voices:[A.ALICE]}],["fr-CA",{viewValue:"French, Canada",value:"fr-CA",voices:[A.ALICE]}],["fr-FR",{viewValue:"French, France",value:"fr-FR",voices:[A.ALICE]}],["it-IT",{viewValue:"Italian, Italy",value:"it-IT",voices:[A.ALICE]}],["ja-JP",{viewValue:"Japanese, Japan",value:"ja-JP",voices:[A.ALICE]}],["ko-KR",{viewValue:"Korean, Korea",value:"ko-KR",voices:[A.ALICE]}],["nb-NO",{viewValue:"Norwegian, Norway",value:"nb-NO",voices:[A.ALICE]}],["nl-NL",{viewValue:"Dutch, Netherlands",value:"nl-NL",voices:[A.ALICE]}],["pl-PL",{viewValue:"Polish-Poland",value:"pl-PL",voices:[A.ALICE]}],["pt-BR",{viewValue:"Portuguese, Brazil",value:"pt-BR",voices:[A.ALICE]}],["pt-PT",{viewValue:"Portuguese, Portugal",value:"pt-PT",voices:[A.ALICE]}],["ru-RU",{viewValue:"Russian, Russia",value:"ru-RU",voices:[A.ALICE]}],["sv-SE",{viewValue:"Swedish, Sweden",value:"sv-SE",voices:[A.ALICE]}],["zh-CN",{viewValue:"Chinese (Mandarin)",value:"zh-CN",voices:[A.ALICE]}],["zh-HK",{viewValue:"Chinese (Cantonese)",value:"zh-HK",voices:[A.ALICE]}],["zh-TW",{viewValue:"Chinese (Taiwanese Mandarin)",value:"zh-TW",voices:[A.ALICE]}]]),_=new Map([["arb",{viewValue:"Arabic",value:"arb",voices:[A.POLLY_ZEINA]}],["cy-GB",{viewValue:"Welsh",value:"cy-GB",voices:[A.POLLY_GWYNETH]}],["da-DK",{viewValue:"Danish",value:"da-DK",voices:[A.POLLY_NAJA,A.POLLY_MADS]}],["de-DE",{viewValue:"German",value:"de-DE",voices:[A.POLLY_MARLENE,A.POLLY_VICKI,A.POLLY_HANS]}],["en-AU",{viewValue:"English (Australian)",value:"en-AU",voices:[A.POLLY_NICOLE,A.POLLY_RUSSELL]}],["en-GB",{viewValue:"English (British)",value:"en-GB",voices:[A.POLLY_AMY,A.POLLY_EMMA,A.POLLY_BRIAN,A.POLLY_AMY_NEURAL,A.POLLY_EMMA_NEURAL,A.POLLY_BRIAN_NEURAL]}],["en-GB",{viewValue:"English (Welsh)",value:"en-GB-WLS",voices:[A.POLLY_GERAINT]}],["en-IN",{viewValue:"English (Indian)",value:"en-IN",voices:[A.POLLY_ADITI,A.POLLY_RAVEENA]}],["en-US",{viewValue:"English (US)",value:"en-US",voices:[A.POLLY_SALLI,A.POLLY_IVY,A.POLLY_JOANNA,A.POLLY_KENDRA,A.POLLY_KIMBERLY,A.POLLY_JOEY,A.POLLY_JUSTIN,A.POLLY_MATTHEW,A.POLLY_SALLI_NEURAL,A.POLLY_IVY_NEURAL,A.POLLY_JOANNA_NEURAL,A.POLLY_KENDRA_NEURAL,A.POLLY_KIMBERLY_NEURAL,A.POLLY_JOEY_NEURAL,A.POLLY_JUSTIN_NEURAL,A.POLLY_MATTHEW_NEURAL]}],["es-ES",{viewValue:"Spanish (Castilian)",value:"es-ES",voices:[A.POLLY_CONCHITA,A.POLLY_ENRIQUE,A.POLLY_LUCIA]}],["es-MX",{viewValue:"Spanish (Mexico)",value:"es-MX",voices:[A.POLLY_MIA]}],["es-US",{viewValue:"Spanish (Latin American)",value:"es-US",voices:[A.POLLY_LUPE,A.POLLY_PENELOPE,A.POLLY_MIGUEL,A.POLLY_LUPE_NEURAL]}],["fr-CA",{viewValue:"French (Canadian)",value:"fr-CA",voices:[A.POLLY_CHANTAL]}],["fr-FR",{viewValue:"French",value:"fr-FR",voices:[A.POLLY_CELINE,A.POLLY_MATHIEU,A.POLLY_LEA]}],["hi-IN",{viewValue:"Hindi",value:"hi-IN",voices:[A.POLLY_ADITI]}],["is-IS",{viewValue:"Icelandic",value:"is-IS",voices:[A.POLLY_DORA,A.POLLY_KARL]}],["it-IT",{viewValue:"Italian",value:"it-IT",voices:[A.POLLY_CARLA,A.POLLY_GIORGIO,A.POLLY_BIANCA]}],["ja-JP",{viewValue:"Japanese",value:"ja-JP",voices:[A.POLLY_MIZUKI,A.POLLY_TAKUMI]}],["ko-KR",{viewValue:"Korean",value:"ko-KR",voices:[A.POLLY_SEOYEON]}],["nb-NO",{viewValue:"Norwegian",value:"nb-NO",voices:[A.POLLY_LIV]}],["nl-NL",{viewValue:"Dutch",value:"nl-NL",voices:[A.POLLY_LOTTE,A.POLLY_RUBEN]}],["pl-PL",{viewValue:"Polish",value:"pl-PL",voices:[A.POLLY_EWA,A.POLLY_MAJA,A.POLLY_JAN,A.POLLY_JACEK]}],["pt-BR",{viewValue:"Portuguese (Brazilian)",value:"pt-BR",voices:[A.POLLY_CAMILA,A.POLLY_VITORIA,A.POLLY_RICARDO,A.POLLY_CAMILA_NEURAL]}],["pt-PT",{viewValue:"Portuguese (European)",value:"pt-PT",voices:[A.POLLY_INES,A.POLLY_CRISTIANO]}],["ro-RO",{viewValue:"Romanian",value:"ro-RO",voices:[A.POLLY_CARMEN]}],["ru-RU",{viewValue:"Russian",value:"ru-RU",voices:[A.POLLY_TATYANA,A.POLLY_MAXIM]}],["sv-SE",{viewValue:"Swedish",value:"sv-SE",voices:[A.POLLY_ASTRID]}],["tr-TR",{viewValue:"Turkish",value:"tr-TR",voices:[A.POLLY_FILIZ]}],["zh-CN",{viewValue:"Chinese (Mandarin)",value:"zh-CN",voices:[A.POLLY_ZHIYU]}]]),S=new Map([[E.BASIC,N],[E.ALICE,O],[E.AMAZON_POLLY,_]]);class Y extends a{get startPauseErrorText(){const e=this.twilioVoiceConfigForm.get("startPause");return e.hasError("required")?this.translate.instant("tb.twilio.start-pause-required"):e.hasError("min")?this.translate.instant("tb.twilio.start-pause-min",{min:0}):""}constructor(e,t,o){super(e),this.store=e,this.fb=t,this.translate=o,this.voiceConfiguration=S,this.providers=E,this.languages=[],this.voices=[]}configForm(){return this.twilioVoiceConfigForm}updateConfiguration(e){super.updateConfiguration(e),null!==this.configuration.provider&&(this.languages=Array.from(this.voiceConfiguration.get(e?.provider)?.values()),this.voices=this.voiceConfiguration.get(e?.provider)?.get(e?.language)?.voices)}onConfigurationSet(e){this.twilioVoiceConfigForm=this.fb.group({numberFrom:[e?e.numberFrom:null,[l.required]],numbersTo:[e?e.numbersTo:null,[l.required]],accountSid:[e?e.accountSid:null,[l.required]],accountToken:[e?e.accountToken:null,[l.required]],provider:[e?e.provider:null,[l.required]],language:[e?e.language:null,[l.required]],voice:[e?e.voice:null,[l.required]],pitch:[e?e.pitch:null,[l.required,l.min(0)]],rate:[e?e.rate:null,[l.required,l.min(0)]],volume:[e?e.volume:null,[l.required]],startPause:[e?e.startPause:null,[l.required,l.min(0)]]}),this.twilioVoiceConfigForm.get("provider").valueChanges.subscribe((e=>{this.languages=Array.from(this.voiceConfiguration.get(e)?.values()),this.voices=e===E.ALICE?[A.ALICE]:[],this.twilioVoiceConfigForm.patchValue({language:null,voice:e===E.ALICE?A.ALICE:null},{emitEvent:!1})})),this.twilioVoiceConfigForm.get("language").valueChanges.subscribe((e=>{this.voices=Array.from(this.voiceConfiguration.get(this.twilioVoiceConfigForm.get("provider").value)?.get(e).voices),this.twilioVoiceConfigForm.patchValue({voice:this.twilioVoiceConfigForm.get("provider").value===E.ALICE?A.ALICE:null},{emitEvent:!1})}))}}e("TwilioVoiceConfigComponent",Y),Y.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.5",ngImport:t,type:Y,deps:[{token:m.Store},{token:s.FormBuilder},{token:b.TranslateService}],target:t.ɵɵFactoryTarget.Component}),Y.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.5",type:Y,selector:"tb-action-node-twilio-voice-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="twilioVoiceConfigForm" fxLayout="column" class="tb-form-panel no-border no-padding">\n  <section class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.twilio.phone-settings</div>\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n      <mat-label translate>tb.twilio.number-from</mat-label>\n      <input required matInput formControlName="numberFrom">\n      <mat-error *ngIf="twilioVoiceConfigForm.get(\'numberFrom\').hasError(\'required\')">\n        {{ \'tb.twilio.number-from-required\' | translate }}\n      </mat-error>\n      <mat-hint align="start" class="text-hint" [innerHTML]="\'tb.twilio.number-to-hint\' | translate | safeHtml">\n      </mat-hint>\n      <mat-hint align="end">\n        <div class="input-bottom-double-hint">\n          <div class="see-example"\n               hintMode\n               tb-help-popup="{{\'rulenode/twilio_voice_numbers_templatization\'}}"\n               tb-help-popup-placement="right"\n               trigger-style="letter-spacing:0.25px; font-size:12px;"\n               [tb-help-popup-style]="{maxWidth: \'820px\'}"\n               trigger-text="{{ \'tb.twilio.see-examples\' | translate }}"></div>\n        </div>\n      </mat-hint>\n    </mat-form-field>\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n      <mat-label translate>tb.twilio.numbers-to</mat-label>\n      <input required matInput formControlName="numbersTo">\n      <mat-error *ngIf="twilioVoiceConfigForm.get(\'numbersTo\').hasError(\'required\')">\n        {{ \'tb.twilio.numbers-to-required\' | translate }}\n      </mat-error>\n      <mat-hint align="start" class="text-hint" [innerHTML]="\'tb.twilio.numbers-to-hint\' | translate | safeHtml"></mat-hint>\n      <mat-hint align="end">\n        <div class="input-bottom-double-hint">\n          <div class="see-example"\n               hintMode\n               tb-help-popup="{{\'rulenode/twilio_voice_numbers_templatization\'}}"\n               tb-help-popup-placement="right"\n               trigger-style="letter-spacing:0.25px; font-size:12px;"\n               [tb-help-popup-style]="{maxWidth: \'820px\'}"\n               trigger-text="{{ \'tb.twilio.see-examples\' | translate }}"></div>\n        </div>\n      </mat-hint>\n    </mat-form-field>\n  </section>\n  <section class="tb-form-panel stroked no-gap no-padding-bottom">\n    <div class="tb-form-panel-title margin-bottom" translate>tb.twilio.account-settings</div>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.twilio.account-sid</mat-label>\n      <input required matInput formControlName="accountSid">\n      <mat-error *ngIf="twilioVoiceConfigForm.get(\'accountSid\').hasError(\'required\')">\n        {{ \'tb.twilio.account-sid-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.twilio.account-token</mat-label>\n      <input required type="password" autocomplete="new-password" matInput formControlName="accountToken">\n      <mat-error *ngIf="twilioVoiceConfigForm.get(\'accountToken\').hasError(\'required\')">\n        {{ \'tb.twilio.account-token-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </section>\n  <section class="tb-form-panel stroked no-gap no-padding-bottom">\n    <div class="tb-form-panel-title margin-bottom" translate>tb.twilio.voice-settings</div>\n    <div class="tb-flex row">\n      <mat-form-field class="mat-block flex-1">\n        <mat-label translate>tb.twilio.provider</mat-label>\n        <mat-select formControlName="provider">\n          <mat-option *ngFor="let provider of providers | keyvalue" [value]="provider.value">\n            {{ provider.value }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf="twilioVoiceConfigForm.get(\'provider\').hasError(\'required\')">\n          {{ \'tb.twilio.provider-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class="mat-block flex-1" [fxShow]="twilioVoiceConfigForm.get(\'provider\').value">\n        <mat-label translate>tb.twilio.language</mat-label>\n        <mat-select required formControlName="language">\n          <mat-option *ngFor="let language of languages" [value]="language.value">\n            {{ language.viewValue }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf="twilioVoiceConfigForm.get(\'language\').hasError(\'required\')">\n          {{ \'tb.twilio.language-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class="mat-block flex-1" [fxShow]="twilioVoiceConfigForm.get(\'language\').value">\n        <mat-label translate>tb.twilio.voice</mat-label>\n        <mat-select required formControlName="voice">\n          <mat-option *ngFor="let voice of voices" [value]="voice">\n            {{ voice }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf="twilioVoiceConfigForm.get(\'voice\').hasError(\'required\')">\n          {{ \'tb.twilio.voice-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </section>\n  <section class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.twilio.audio-output-settings</div>\n    <div class="tb-form-row space-between">\n      <div class="fixed-title-width tb-required" translate>tb.twilio.pitch</div>\n      <mat-form-field class="flex number" appearance="outline" subscriptSizing="dynamic">\n        <input required matInput type="number" formControlName="pitch" min="0">\n        <div matSuffix *ngIf="!twilioVoiceConfigForm.get(\'pitch\').hasError(\'required\')" translate>\n          tb.twilio.percent\n        </div>\n        <mat-icon matSuffix\n                  matTooltipPosition="above"\n                  matTooltipClass="tb-error-tooltip"\n                  [matTooltip]="\'tb.twilio.pitch-required\' | translate"\n                  *ngIf="twilioVoiceConfigForm.get(\'pitch\').hasError(\'required\')"\n                  class="material-icons tb-suffix-show-always tb-error">\n          warning\n        </mat-icon>\n      </mat-form-field>\n    </div>\n    <div class="tb-form-row space-between">\n      <div class="fixed-title-width tb-required" translate>tb.twilio.rate</div>\n      <mat-form-field class="flex number" appearance="outline" subscriptSizing="dynamic">\n        <input required matInput type="number" formControlName="rate" min="0">\n        <div matSuffix  *ngIf="!twilioVoiceConfigForm.get(\'rate\').hasError(\'required\')" translate>\n          tb.twilio.percent\n        </div>\n        <mat-icon matSuffix\n                  matTooltipPosition="above"\n                  matTooltipClass="tb-error-tooltip"\n                  [matTooltip]="\'tb.twilio.rate-required\' | translate"\n                  *ngIf="twilioVoiceConfigForm.get(\'rate\').hasError(\'required\')"\n                  class="material-icons tb-suffix-show-always tb-error">\n          warning\n        </mat-icon>\n      </mat-form-field>\n    </div>\n    <div class="tb-form-row space-between">\n      <div class="fixed-title-width tb-required" translate>tb.twilio.volume</div>\n      <mat-form-field class="flex number" appearance="outline" subscriptSizing="dynamic">\n        <input required matInput type="number" formControlName="volume">\n        <div matSuffix *ngIf="!twilioVoiceConfigForm.get(\'volume\').hasError(\'required\')" translate>\n          tb.twilio.decibel\n        </div>\n        <mat-icon matSuffix\n                  matTooltipPosition="above"\n                  matTooltipClass="tb-error-tooltip"\n                  [matTooltip]="\'tb.twilio.volume-required\' | translate"\n                  *ngIf="twilioVoiceConfigForm.get(\'volume\').hasError(\'required\')"\n                  class="material-icons tb-suffix-show-always tb-error">\n          warning\n        </mat-icon>\n      </mat-form-field>\n    </div>\n    <div class="tb-form-row space-between">\n      <div class="fixed-title-width tb-required" translate>tb.twilio.start-pause</div>\n      <mat-form-field class="flex number" appearance="outline" subscriptSizing="dynamic">\n        <input required matInput type="number" formControlName="startPause" min="0">\n        <div matSuffix translate *ngIf="!twilioVoiceConfigForm.get(\'startPause\').hasError(\'required\') &&\n                                        !twilioVoiceConfigForm.get(\'startPause\').hasError(\'min\')">\n          tb.twilio.seconds\n        </div>\n        <mat-icon matSuffix\n                  matTooltipPosition="above"\n                  matTooltipClass="tb-error-tooltip"\n                  [matTooltip]="startPauseErrorText"\n                  *ngIf="twilioVoiceConfigForm.get(\'startPause\').hasError(\'required\') ||\n                         twilioVoiceConfigForm.get(\'startPause\').hasError(\'min\')"\n                  class="material-icons tb-suffix-show-always tb-error">\n          warning\n        </mat-icon>\n      </mat-form-field>\n    </div>\n  </section>\n</section>\n',styles:[":host .tb-form-panel .tb-flex{display:flex;flex:1;gap:8px}:host .tb-form-panel .tb-flex.row{flex-direction:row}:host .tb-form-panel .tb-flex .flex-1{flex:1}:host ::ng-deep .mat-mdc-form-field .mat-mdc-form-field-infix{width:100%}\n",":host .margin-bottom{margin-bottom:16px}:host .input-bottom-double-hint{display:inline-flex}:host .input-bottom-double-hint .see-example{flex-shrink:0}:host .text-hint{max-width:80%}\n"],dependencies:[{kind:"directive",type:u.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:u.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:p.HelpPopupComponent,selector:"[tb-help-popup], [tb-help-popup-content]",inputs:["tb-help-popup","tb-help-popup-content","trigger-text","trigger-style","tb-help-popup-placement","tb-help-popup-style"]},{kind:"component",type:v.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:d.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:f.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:f.MatLabel,selector:"mat-label"},{kind:"directive",type:f.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:f.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:f.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:h.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:x.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:w.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:g.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:y.DefaultShowHideDirective,selector:"  [fxShow], [fxShow.print],  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],  [fxHide], [fxHide.print],  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]",inputs:["fxShow","fxShow.print","fxShow.xs","fxShow.sm","fxShow.md","fxShow.lg","fxShow.xl","fxShow.lt-sm","fxShow.lt-md","fxShow.lt-lg","fxShow.lt-xl","fxShow.gt-xs","fxShow.gt-sm","fxShow.gt-md","fxShow.gt-lg","fxHide","fxHide.print","fxHide.xs","fxHide.sm","fxHide.md","fxHide.lg","fxHide.xl","fxHide.lt-sm","fxHide.lt-md","fxHide.lt-lg","fxHide.lt-xl","fxHide.gt-xs","fxHide.gt-sm","fxHide.gt-md","fxHide.gt-lg"]},{kind:"directive",type:s.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:s.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:s.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:s.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:s.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:s.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:s.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:s.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:b.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:u.KeyValuePipe,name:"keyvalue"},{kind:"pipe",type:b.TranslatePipe,name:"translate"},{kind:"pipe",type:C,name:"safeHtml"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.5",ngImport:t,type:Y,decorators:[{type:i,args:[{selector:"tb-action-node-twilio-voice-config",template:'<section [formGroup]="twilioVoiceConfigForm" fxLayout="column" class="tb-form-panel no-border no-padding">\n  <section class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.twilio.phone-settings</div>\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n      <mat-label translate>tb.twilio.number-from</mat-label>\n      <input required matInput formControlName="numberFrom">\n      <mat-error *ngIf="twilioVoiceConfigForm.get(\'numberFrom\').hasError(\'required\')">\n        {{ \'tb.twilio.number-from-required\' | translate }}\n      </mat-error>\n      <mat-hint align="start" class="text-hint" [innerHTML]="\'tb.twilio.number-to-hint\' | translate | safeHtml">\n      </mat-hint>\n      <mat-hint align="end">\n        <div class="input-bottom-double-hint">\n          <div class="see-example"\n               hintMode\n               tb-help-popup="{{\'rulenode/twilio_voice_numbers_templatization\'}}"\n               tb-help-popup-placement="right"\n               trigger-style="letter-spacing:0.25px; font-size:12px;"\n               [tb-help-popup-style]="{maxWidth: \'820px\'}"\n               trigger-text="{{ \'tb.twilio.see-examples\' | translate }}"></div>\n        </div>\n      </mat-hint>\n    </mat-form-field>\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n      <mat-label translate>tb.twilio.numbers-to</mat-label>\n      <input required matInput formControlName="numbersTo">\n      <mat-error *ngIf="twilioVoiceConfigForm.get(\'numbersTo\').hasError(\'required\')">\n        {{ \'tb.twilio.numbers-to-required\' | translate }}\n      </mat-error>\n      <mat-hint align="start" class="text-hint" [innerHTML]="\'tb.twilio.numbers-to-hint\' | translate | safeHtml"></mat-hint>\n      <mat-hint align="end">\n        <div class="input-bottom-double-hint">\n          <div class="see-example"\n               hintMode\n               tb-help-popup="{{\'rulenode/twilio_voice_numbers_templatization\'}}"\n               tb-help-popup-placement="right"\n               trigger-style="letter-spacing:0.25px; font-size:12px;"\n               [tb-help-popup-style]="{maxWidth: \'820px\'}"\n               trigger-text="{{ \'tb.twilio.see-examples\' | translate }}"></div>\n        </div>\n      </mat-hint>\n    </mat-form-field>\n  </section>\n  <section class="tb-form-panel stroked no-gap no-padding-bottom">\n    <div class="tb-form-panel-title margin-bottom" translate>tb.twilio.account-settings</div>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.twilio.account-sid</mat-label>\n      <input required matInput formControlName="accountSid">\n      <mat-error *ngIf="twilioVoiceConfigForm.get(\'accountSid\').hasError(\'required\')">\n        {{ \'tb.twilio.account-sid-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.twilio.account-token</mat-label>\n      <input required type="password" autocomplete="new-password" matInput formControlName="accountToken">\n      <mat-error *ngIf="twilioVoiceConfigForm.get(\'accountToken\').hasError(\'required\')">\n        {{ \'tb.twilio.account-token-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </section>\n  <section class="tb-form-panel stroked no-gap no-padding-bottom">\n    <div class="tb-form-panel-title margin-bottom" translate>tb.twilio.voice-settings</div>\n    <div class="tb-flex row">\n      <mat-form-field class="mat-block flex-1">\n        <mat-label translate>tb.twilio.provider</mat-label>\n        <mat-select formControlName="provider">\n          <mat-option *ngFor="let provider of providers | keyvalue" [value]="provider.value">\n            {{ provider.value }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf="twilioVoiceConfigForm.get(\'provider\').hasError(\'required\')">\n          {{ \'tb.twilio.provider-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class="mat-block flex-1" [fxShow]="twilioVoiceConfigForm.get(\'provider\').value">\n        <mat-label translate>tb.twilio.language</mat-label>\n        <mat-select required formControlName="language">\n          <mat-option *ngFor="let language of languages" [value]="language.value">\n            {{ language.viewValue }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf="twilioVoiceConfigForm.get(\'language\').hasError(\'required\')">\n          {{ \'tb.twilio.language-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class="mat-block flex-1" [fxShow]="twilioVoiceConfigForm.get(\'language\').value">\n        <mat-label translate>tb.twilio.voice</mat-label>\n        <mat-select required formControlName="voice">\n          <mat-option *ngFor="let voice of voices" [value]="voice">\n            {{ voice }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf="twilioVoiceConfigForm.get(\'voice\').hasError(\'required\')">\n          {{ \'tb.twilio.voice-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </section>\n  <section class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.twilio.audio-output-settings</div>\n    <div class="tb-form-row space-between">\n      <div class="fixed-title-width tb-required" translate>tb.twilio.pitch</div>\n      <mat-form-field class="flex number" appearance="outline" subscriptSizing="dynamic">\n        <input required matInput type="number" formControlName="pitch" min="0">\n        <div matSuffix *ngIf="!twilioVoiceConfigForm.get(\'pitch\').hasError(\'required\')" translate>\n          tb.twilio.percent\n        </div>\n        <mat-icon matSuffix\n                  matTooltipPosition="above"\n                  matTooltipClass="tb-error-tooltip"\n                  [matTooltip]="\'tb.twilio.pitch-required\' | translate"\n                  *ngIf="twilioVoiceConfigForm.get(\'pitch\').hasError(\'required\')"\n                  class="material-icons tb-suffix-show-always tb-error">\n          warning\n        </mat-icon>\n      </mat-form-field>\n    </div>\n    <div class="tb-form-row space-between">\n      <div class="fixed-title-width tb-required" translate>tb.twilio.rate</div>\n      <mat-form-field class="flex number" appearance="outline" subscriptSizing="dynamic">\n        <input required matInput type="number" formControlName="rate" min="0">\n        <div matSuffix  *ngIf="!twilioVoiceConfigForm.get(\'rate\').hasError(\'required\')" translate>\n          tb.twilio.percent\n        </div>\n        <mat-icon matSuffix\n                  matTooltipPosition="above"\n                  matTooltipClass="tb-error-tooltip"\n                  [matTooltip]="\'tb.twilio.rate-required\' | translate"\n                  *ngIf="twilioVoiceConfigForm.get(\'rate\').hasError(\'required\')"\n                  class="material-icons tb-suffix-show-always tb-error">\n          warning\n        </mat-icon>\n      </mat-form-field>\n    </div>\n    <div class="tb-form-row space-between">\n      <div class="fixed-title-width tb-required" translate>tb.twilio.volume</div>\n      <mat-form-field class="flex number" appearance="outline" subscriptSizing="dynamic">\n        <input required matInput type="number" formControlName="volume">\n        <div matSuffix *ngIf="!twilioVoiceConfigForm.get(\'volume\').hasError(\'required\')" translate>\n          tb.twilio.decibel\n        </div>\n        <mat-icon matSuffix\n                  matTooltipPosition="above"\n                  matTooltipClass="tb-error-tooltip"\n                  [matTooltip]="\'tb.twilio.volume-required\' | translate"\n                  *ngIf="twilioVoiceConfigForm.get(\'volume\').hasError(\'required\')"\n                  class="material-icons tb-suffix-show-always tb-error">\n          warning\n        </mat-icon>\n      </mat-form-field>\n    </div>\n    <div class="tb-form-row space-between">\n      <div class="fixed-title-width tb-required" translate>tb.twilio.start-pause</div>\n      <mat-form-field class="flex number" appearance="outline" subscriptSizing="dynamic">\n        <input required matInput type="number" formControlName="startPause" min="0">\n        <div matSuffix translate *ngIf="!twilioVoiceConfigForm.get(\'startPause\').hasError(\'required\') &&\n                                        !twilioVoiceConfigForm.get(\'startPause\').hasError(\'min\')">\n          tb.twilio.seconds\n        </div>\n        <mat-icon matSuffix\n                  matTooltipPosition="above"\n                  matTooltipClass="tb-error-tooltip"\n                  [matTooltip]="startPauseErrorText"\n                  *ngIf="twilioVoiceConfigForm.get(\'startPause\').hasError(\'required\') ||\n                         twilioVoiceConfigForm.get(\'startPause\').hasError(\'min\')"\n                  class="material-icons tb-suffix-show-always tb-error">\n          warning\n        </mat-icon>\n      </mat-form-field>\n    </div>\n  </section>\n</section>\n',styles:[":host .tb-form-panel .tb-flex{display:flex;flex:1;gap:8px}:host .tb-form-panel .tb-flex.row{flex-direction:row}:host .tb-form-panel .tb-flex .flex-1{flex:1}:host ::ng-deep .mat-mdc-form-field .mat-mdc-form-field-infix{width:100%}\n",":host .margin-bottom{margin-bottom:16px}:host .input-bottom-double-hint{display:inline-flex}:host .input-bottom-double-hint .see-example{flex-shrink:0}:host .text-hint{max-width:80%}\n"]}]}],ctorParameters:function(){return[{type:m.Store},{type:s.FormBuilder},{type:b.TranslateService}]}});class q{constructor(e){!function(e){e.setTranslation("en_US",{tb:{twilio:{"number-from":"Phone Number From","number-from-required":"Phone Number From is required.","numbers-to":"Phone Numbers To","numbers-to-required":"Phone Numbers To is required.","number-to-hint":'Single Phone Number, use <code><span style="color: #000;">$&#123;</span>metadataKey<span style="color: #000;">&#125;</span></code> for value from metadata.',"numbers-to-hint":'Comma separated Phone Numbers, use <code><span style="color: #000;">$&#123;</span>metadataKey<span style="color: #000;">&#125;</span></code> for value from metadata.',"account-sid":"Twilio Account SID","account-sid-required":"Twilio Account SID is required.","account-token":"Twilio Account Token","account-token-required":"Twilio Account Token is required.",provider:"Voice provider","provider-required":"Voice provider is required.",language:"Language","language-required":"Language is required.",voice:"Voice","voice-required":"Voice is required.",pitch:"Pitch","pitch-required":"Pitch is required.",volume:"Volume","volume-required":"Volume is required.",rate:"Rate","rate-required":"Rate is required.","start-pause-required":"Start pause is required.","start-pause":"Pause before talking","phone-settings":"Phone settings","account-settings":"Account settings","voice-settings":"Voice settings","audio-output-settings":"Audio output settings",seconds:"seconds",decibel:"dB",percent:"%","see-examples":"See examples","start-pause-min":"Start pause should be equal or more then {{min}}."}}},!0)}(e)}}e("TwilioConfigModule",q),q.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.5",ngImport:t,type:q,deps:[{token:b.TranslateService}],target:t.ɵɵFactoryTarget.NgModule}),q.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.5",ngImport:t,type:q,declarations:[I,Y,C],imports:[c,r,P],exports:[I,Y]}),q.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.5",ngImport:t,type:q,imports:[c,r,P]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.5",ngImport:t,type:q,decorators:[{type:n,args:[{declarations:[I,Y,C],imports:[c,r,P],exports:[I,Y]}]}],ctorParameters:function(){return[{type:b.TranslateService}]}})}}}));//# sourceMappingURL=twilio-config.js.map
