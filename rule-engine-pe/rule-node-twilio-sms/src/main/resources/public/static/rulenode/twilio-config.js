System.register(["@angular/core","@shared/public-api","@angular/forms","@ngrx/store","@angular/material/form-field","@angular/flex-layout/flex","@ngx-translate/core","@angular/material/input","@angular/common","@angular/platform-browser","@angular/material/select","@angular/material/core","@home/components/public-api"],(function(e){"use strict";var t,o,a,r,l,n,i,u,s,m,L,c,f,p,d,g,v,y,P;return{setters:[function(e){t=e,o=e.Pipe,a=e.Component,r=e.NgModule},function(e){l=e.RuleNodeConfigurationComponent,n=e.SharedModule},function(e){i=e.Validators,u=e},function(e){s=e},function(e){m=e},function(e){L=e},function(e){c=e},function(e){f=e},function(e){p=e,d=e.CommonModule},function(e){g=e},function(e){v=e},function(e){y=e},function(e){P=e.HomeComponentsModule}],execute:function(){class A{constructor(e){this.sanitizer=e}transform(e){return this.sanitizer.bypassSecurityTrustHtml(e)}}A.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:t,type:A,deps:[{token:g.DomSanitizer}],target:t.ɵɵFactoryTarget.Pipe}),A.ɵpipe=t.ɵɵngDeclarePipe({minVersion:"12.0.0",version:"12.2.15",ngImport:t,type:A,name:"safeHtml"}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:t,type:A,decorators:[{type:o,args:[{name:"safeHtml"}]}],ctorParameters:function(){return[{type:g.DomSanitizer}]}});class x extends l{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.twilioSmsConfigForm}onConfigurationSet(e){this.twilioSmsConfigForm=this.fb.group({numberFrom:[e?e.numberFrom:null,[i.required]],numbersTo:[e?e.numbersTo:null,[i.required]],accountSid:[e?e.accountSid:null,[i.required]],accountToken:[e?e.accountToken:null,[i.required]]})}}var I,C;e("TwilioSmsConfigComponent",x),x.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:t,type:x,deps:[{token:s.Store},{token:u.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),x.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"12.0.0",version:"12.2.15",type:x,selector:"tb-action-node-twilio-sms-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="twilioSmsConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.twilio.number-from</mat-label>\n    <input required matInput formControlName="numberFrom">\n    <mat-error *ngIf="twilioSmsConfigForm.get(\'numberFrom\').hasError(\'required\')">\n      {{ \'tb.twilio.number-from-required\' | translate }}\n    </mat-error>\n    <mat-hint [innerHTML]="\'tb.rulenode.general-pattern-hint\' | translate | safeHtml"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.twilio.numbers-to</mat-label>\n    <input required matInput formControlName="numbersTo">\n    <mat-error *ngIf="twilioSmsConfigForm.get(\'numbersTo\').hasError(\'required\')">\n      {{ \'tb.twilio.numbers-to-required\' | translate }}\n    </mat-error>\n    <mat-hint [innerHTML]="\'tb.twilio.numbers-to-hint\' | translate | safeHtml"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.twilio.account-sid</mat-label>\n    <input required matInput formControlName="accountSid">\n    <mat-error *ngIf="twilioSmsConfigForm.get(\'accountSid\').hasError(\'required\')">\n      {{ \'tb.twilio.account-sid-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.twilio.account-token</mat-label>\n    <input required type="password" matInput formControlName="accountToken">\n    <mat-error *ngIf="twilioSmsConfigForm.get(\'accountToken\').hasError(\'required\')">\n      {{ \'tb.twilio.account-token-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n',components:[{type:m.MatFormField,selector:"mat-form-field",inputs:["color","floatLabel","appearance","hideRequiredMarker","hintLabel"],exportAs:["matFormField"]}],directives:[{type:L.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{type:u.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{type:u.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{type:m.MatLabel,selector:"mat-label"},{type:c.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{type:f.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["id","disabled","required","type","value","readonly","placeholder","errorStateMatcher","aria-describedby"],exportAs:["matInput"]},{type:u.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{type:u.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{type:u.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{type:u.FormControlName,selector:"[formControlName]",inputs:["disabled","formControlName","ngModel"],outputs:["ngModelChange"]},{type:p.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{type:m.MatError,selector:"mat-error",inputs:["id"]},{type:m.MatHint,selector:"mat-hint",inputs:["align","id"]}],pipes:{translate:c.TranslatePipe,safeHtml:A}}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:t,type:x,decorators:[{type:a,args:[{selector:"tb-action-node-twilio-sms-config",templateUrl:"./twilio-sms-config.component.html",styleUrls:[]}]}],ctorParameters:function(){return[{type:s.Store},{type:u.FormBuilder}]}}),function(e){e.MAN="man",e.WOMAN="woman",e.ALICE="alice",e.POLLY_ADITI="Polly.Aditi",e.POLLY_AMY="Polly.Amy",e.POLLY_ASTRID="Polly.Astrid",e.POLLY_BIANCA="Polly.Bianca",e.POLLY_BRIAN="Polly.Brian",e.POLLY_CAMILA="Polly.Camila",e.POLLY_CARLA="Polly.Carla",e.POLLY_CARMEN="Polly.Carmen",e.POLLY_CELINE="Polly.Celine",e.POLLY_CHANTAL="Polly.Chantal",e.POLLY_CONCHITA="Polly.Conchita",e.POLLY_CRISTIANO="Polly.Cristiano",e.POLLY_DORA="Polly.Dora",e.POLLY_EMMA="Polly.Emma",e.POLLY_ENRIQUE="Polly.Enrique",e.POLLY_EWA="Polly.Ewa",e.POLLY_FILIZ="Polly.Filiz",e.POLLY_GERAINT="Polly.Geraint",e.POLLY_GIORGIO="Polly.Giorgio",e.POLLY_GWYNETH="Polly.Gwyneth",e.POLLY_HANS="Polly.Hans",e.POLLY_INES="Polly.Ines",e.POLLY_IVY="Polly.Ivy",e.POLLY_JACEK="Polly.Jacek",e.POLLY_JAN="Polly.Jan",e.POLLY_JOANNA="Polly.Joanna",e.POLLY_JOEY="Polly.Joey",e.POLLY_JUSTIN="Polly.Justin",e.POLLY_KARL="Polly.Karl",e.POLLY_KENDRA="Polly.Kendra",e.POLLY_KIMBERLY="Polly.Kimberly",e.POLLY_LEA="Polly.Lea",e.POLLY_LIV="Polly.Liv",e.POLLY_LOTTE="Polly.Lotte",e.POLLY_LUCIA="Polly.Lucia",e.POLLY_LUPE="Polly.Lupe",e.POLLY_MADS="Polly.Mads",e.POLLY_MAJA="Polly.Maja",e.POLLY_MARLENE="Polly.Marlene",e.POLLY_MATHIEU="Polly.Mathieu",e.POLLY_MATTHEW="Polly.Matthew",e.POLLY_MAXIM="Polly.Maxim",e.POLLY_MIA="Polly.Mia",e.POLLY_MIGUEL="Polly.Miguel",e.POLLY_MIZUKI="Polly.Mizuki",e.POLLY_NAJA="Polly.Naja",e.POLLY_NICOLE="Polly.Nicole",e.POLLY_PENELOPE="Polly.Penelope",e.POLLY_RAVEENA="Polly.Raveena",e.POLLY_RICARDO="Polly.Ricardo",e.POLLY_RUBEN="Polly.Ruben",e.POLLY_RUSSELL="Polly.Russell",e.POLLY_SALLI="Polly.Salli",e.POLLY_SEOYEON="Polly.Seoyeon",e.POLLY_TAKUMI="Polly.Takumi",e.POLLY_TATYANA="Polly.Tatyana",e.POLLY_VICKI="Polly.Vicki",e.POLLY_VITORIA="Polly.Vitoria",e.POLLY_ZEINA="Polly.Zeina",e.POLLY_ZHIYU="Polly.Zhiyu",e.POLLY_AMY_NEURAL="Polly.Amy-Neural",e.POLLY_EMMA_NEURAL="Polly.Emma-Neural",e.POLLY_BRIAN_NEURAL="Polly.Brian-Neural",e.POLLY_SALLI_NEURAL="Polly.Salli-Neural",e.POLLY_IVY_NEURAL="Polly.Ivy-Neural",e.POLLY_JOANNA_NEURAL="Polly.Joanna-Neural",e.POLLY_KENDRA_NEURAL="Polly.Kendra-Neural",e.POLLY_KIMBERLY_NEURAL="Polly.Kimberly-Neural",e.POLLY_JOEY_NEURAL="Polly.Joey-Neural",e.POLLY_JUSTIN_NEURAL="Polly.Justin-Neural",e.POLLY_MATTHEW_NEURAL="Polly.Matthew-Neural",e.POLLY_CAMILA_NEURAL="Polly.Camila-Neural",e.POLLY_LUPE_NEURAL="Polly.Lupe-Neural"}(I||(I={})),function(e){e.BASIC="Basic",e.ALICE="Alice",e.AMAZON_POLLY="Amazon Polly"}(C||(C={}));const O=new Map([["en",{viewValue:"English, United States",value:"en",voices:[I.MAN,I.WOMAN]}],["en-gb",{viewValue:"English, British",value:"en-gb",voices:[I.MAN,I.WOMAN]}],["es",{viewValue:"Spanish, Spain",value:"es",voices:[I.MAN,I.WOMAN]}],["fr",{viewValue:"French",value:"fr",voices:[I.MAN,I.WOMAN]}],["de",{viewValue:"German",value:"de",voices:[I.MAN,I.WOMAN]}]]),N=new Map([["da-DK",{viewValue:"Danish, Denmark",value:"da-DK",voices:[I.ALICE]}],["de-DE",{viewValue:"German, Germany",value:"de-DE",voices:[I.ALICE]}],["en-AU",{viewValue:"English, Australia",value:"en-AU",voices:[I.ALICE]}],["en-CA",{viewValue:"English, Canada",value:"en-CA",voices:[I.ALICE]}],["en-GB",{viewValue:"English, UK",value:"en-GB",voices:[I.ALICE]}],["en-IN",{viewValue:"English, India",value:"en-IN",voices:[I.ALICE]}],["en-US",{viewValue:"English, United States",value:"en-US",voices:[I.ALICE]}],["ca-ES",{viewValue:"Catalan, Spain",value:"ca-ES",voices:[I.ALICE]}],["es-ES",{viewValue:"Spanish, Spain",value:"es-ES",voices:[I.ALICE]}],["es-MX",{viewValue:"Spanish, Mexico",value:"es-MX",voices:[I.ALICE]}],["fi-FI",{viewValue:"Finnish, Finland",value:"fi-FI",voices:[I.ALICE]}],["fr-CA",{viewValue:"French, Canada",value:"fr-CA",voices:[I.ALICE]}],["fr-FR",{viewValue:"French, France",value:"fr-FR",voices:[I.ALICE]}],["it-IT",{viewValue:"Italian, Italy",value:"it-IT",voices:[I.ALICE]}],["ja-JP",{viewValue:"Japanese, Japan",value:"ja-JP",voices:[I.ALICE]}],["ko-KR",{viewValue:"Korean, Korea",value:"ko-KR",voices:[I.ALICE]}],["nb-NO",{viewValue:"Norwegian, Norway",value:"nb-NO",voices:[I.ALICE]}],["nl-NL",{viewValue:"Dutch, Netherlands",value:"nl-NL",voices:[I.ALICE]}],["pl-PL",{viewValue:"Polish-Poland",value:"pl-PL",voices:[I.ALICE]}],["pt-BR",{viewValue:"Portuguese, Brazil",value:"pt-BR",voices:[I.ALICE]}],["pt-PT",{viewValue:"Portuguese, Portugal",value:"pt-PT",voices:[I.ALICE]}],["ru-RU",{viewValue:"Russian, Russia",value:"ru-RU",voices:[I.ALICE]}],["sv-SE",{viewValue:"Swedish, Sweden",value:"sv-SE",voices:[I.ALICE]}],["zh-CN",{viewValue:"Chinese (Mandarin)",value:"zh-CN",voices:[I.ALICE]}],["zh-HK",{viewValue:"Chinese (Cantonese)",value:"zh-HK",voices:[I.ALICE]}],["zh-TW",{viewValue:"Chinese (Taiwanese Mandarin)",value:"zh-TW",voices:[I.ALICE]}]]),b=new Map([["arb",{viewValue:"Arabic",value:"arb",voices:[I.POLLY_ZEINA]}],["cy-GB",{viewValue:"Welsh",value:"cy-GB",voices:[I.POLLY_GWYNETH]}],["da-DK",{viewValue:"Danish",value:"da-DK",voices:[I.POLLY_NAJA,I.POLLY_MADS]}],["de-DE",{viewValue:"German",value:"de-DE",voices:[I.POLLY_MARLENE,I.POLLY_VICKI,I.POLLY_HANS]}],["en-AU",{viewValue:"English (Australian)",value:"en-AU",voices:[I.POLLY_NICOLE,I.POLLY_RUSSELL]}],["en-GB",{viewValue:"English (British)",value:"en-GB",voices:[I.POLLY_AMY,I.POLLY_EMMA,I.POLLY_BRIAN,I.POLLY_AMY_NEURAL,I.POLLY_EMMA_NEURAL,I.POLLY_BRIAN_NEURAL]}],["en-GB",{viewValue:"English (Welsh)",value:"en-GB-WLS",voices:[I.POLLY_GERAINT]}],["en-IN",{viewValue:"English (Indian)",value:"en-IN",voices:[I.POLLY_ADITI,I.POLLY_RAVEENA]}],["en-US",{viewValue:"English (US)",value:"en-US",voices:[I.POLLY_SALLI,I.POLLY_IVY,I.POLLY_JOANNA,I.POLLY_KENDRA,I.POLLY_KIMBERLY,I.POLLY_JOEY,I.POLLY_JUSTIN,I.POLLY_MATTHEW,I.POLLY_SALLI_NEURAL,I.POLLY_IVY_NEURAL,I.POLLY_JOANNA_NEURAL,I.POLLY_KENDRA_NEURAL,I.POLLY_KIMBERLY_NEURAL,I.POLLY_JOEY_NEURAL,I.POLLY_JUSTIN_NEURAL,I.POLLY_MATTHEW_NEURAL]}],["es-ES",{viewValue:"Spanish (Castilian)",value:"es-ES",voices:[I.POLLY_CONCHITA,I.POLLY_ENRIQUE,I.POLLY_LUCIA]}],["es-MX",{viewValue:"Spanish (Mexico)",value:"es-MX",voices:[I.POLLY_MIA]}],["es-US",{viewValue:"Spanish (Latin American)",value:"es-US",voices:[I.POLLY_LUPE,I.POLLY_PENELOPE,I.POLLY_MIGUEL,I.POLLY_LUPE_NEURAL]}],["fr-CA",{viewValue:"French (Canadian)",value:"fr-CA",voices:[I.POLLY_CHANTAL]}],["fr-FR",{viewValue:"French",value:"fr-FR",voices:[I.POLLY_CELINE,I.POLLY_MATHIEU,I.POLLY_LEA]}],["hi-IN",{viewValue:"Hindi",value:"hi-IN",voices:[I.POLLY_ADITI]}],["is-IS",{viewValue:"Icelandic",value:"is-IS",voices:[I.POLLY_DORA,I.POLLY_KARL]}],["it-IT",{viewValue:"Italian",value:"it-IT",voices:[I.POLLY_CARLA,I.POLLY_GIORGIO,I.POLLY_BIANCA]}],["ja-JP",{viewValue:"Japanese",value:"ja-JP",voices:[I.POLLY_MIZUKI,I.POLLY_TAKUMI]}],["ko-KR",{viewValue:"Korean",value:"ko-KR",voices:[I.POLLY_SEOYEON]}],["nb-NO",{viewValue:"Norwegian",value:"nb-NO",voices:[I.POLLY_LIV]}],["nl-NL",{viewValue:"Dutch",value:"nl-NL",voices:[I.POLLY_LOTTE,I.POLLY_RUBEN]}],["pl-PL",{viewValue:"Polish",value:"pl-PL",voices:[I.POLLY_EWA,I.POLLY_MAJA,I.POLLY_JAN,I.POLLY_JACEK]}],["pt-BR",{viewValue:"Portuguese (Brazilian)",value:"pt-BR",voices:[I.POLLY_CAMILA,I.POLLY_VITORIA,I.POLLY_RICARDO,I.POLLY_CAMILA_NEURAL]}],["pt-PT",{viewValue:"Portuguese (European)",value:"pt-PT",voices:[I.POLLY_INES,I.POLLY_CRISTIANO]}],["ro-RO",{viewValue:"Romanian",value:"ro-RO",voices:[I.POLLY_CARMEN]}],["ru-RU",{viewValue:"Russian",value:"ru-RU",voices:[I.POLLY_TATYANA,I.POLLY_MAXIM]}],["sv-SE",{viewValue:"Swedish",value:"sv-SE",voices:[I.POLLY_ASTRID]}],["tr-TR",{viewValue:"Turkish",value:"tr-TR",voices:[I.POLLY_FILIZ]}],["zh-CN",{viewValue:"Chinese (Mandarin)",value:"zh-CN",voices:[I.POLLY_ZHIYU]}]]),E=new Map([[C.BASIC,O],[C.ALICE,N],[C.AMAZON_POLLY,b]]);class _ extends l{constructor(e,t){super(e),this.store=e,this.fb=t,this.voiceConfiguration=E,this.providers=C,this.languages=[],this.voices=[]}configForm(){return this.twilioVoiceConfigForm}updateConfiguration(e){var t,o,a;super.updateConfiguration(e),null!==this.configuration.provider&&(this.languages=Array.from(null===(t=this.voiceConfiguration.get(null==e?void 0:e.provider))||void 0===t?void 0:t.values()),this.voices=null===(a=null===(o=this.voiceConfiguration.get(null==e?void 0:e.provider))||void 0===o?void 0:o.get(null==e?void 0:e.language))||void 0===a?void 0:a.voices)}onConfigurationSet(e){this.twilioVoiceConfigForm=this.fb.group({numberFrom:[e?e.numberFrom:null,[i.required]],numbersTo:[e?e.numbersTo:null,[i.required]],accountSid:[e?e.accountSid:null,[i.required]],accountToken:[e?e.accountToken:null,[i.required]],provider:[e?e.provider:null,[i.required]],language:[e?e.language:null,[i.required]],voice:[e?e.voice:null,[i.required]],pitch:[e?e.pitch:null,[i.required,i.min(0)]],rate:[e?e.rate:null,[i.required,i.min(0)]],volume:[e?e.volume:null,[i.required]],startPause:[e?e.startPause:null,[i.required,i.min(0)]]}),this.twilioVoiceConfigForm.get("provider").valueChanges.subscribe((e=>{var t;this.languages=Array.from(null===(t=this.voiceConfiguration.get(e))||void 0===t?void 0:t.values()),this.voices=e===C.ALICE?[I.ALICE]:[],this.twilioVoiceConfigForm.patchValue({language:null,voice:e===C.ALICE?I.ALICE:null},{emitEvent:!1})})),this.twilioVoiceConfigForm.get("language").valueChanges.subscribe((e=>{var t;this.voices=Array.from(null===(t=this.voiceConfiguration.get(this.twilioVoiceConfigForm.get("provider").value))||void 0===t?void 0:t.get(e).voices),this.twilioVoiceConfigForm.patchValue({voice:this.twilioVoiceConfigForm.get("provider").value===C.ALICE?I.ALICE:null},{emitEvent:!1})}))}}e("TwilioVoiceConfigComponent",_),_.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:t,type:_,deps:[{token:s.Store},{token:u.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),_.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"12.0.0",version:"12.2.15",type:_,selector:"tb-action-node-twilio-voice-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="twilioVoiceConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.twilio.number-from</mat-label>\n    <input required matInput formControlName="numberFrom">\n    <mat-error *ngIf="twilioVoiceConfigForm.get(\'numberFrom\').hasError(\'required\')">\n      {{ \'tb.twilio.number-from-required\' | translate }}\n    </mat-error>\n    <mat-hint [innerHTML]="\'tb.rulenode.general-pattern-hint\' | translate | safeHtml"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.twilio.numbers-to</mat-label>\n    <input required matInput formControlName="numbersTo">\n    <mat-error *ngIf="twilioVoiceConfigForm.get(\'numbersTo\').hasError(\'required\')">\n      {{ \'tb.twilio.numbers-to-required\' | translate }}\n    </mat-error>\n    <mat-hint [innerHTML]="\'tb.twilio.numbers-to-hint\' | translate | safeHtml"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.twilio.account-sid</mat-label>\n    <input required matInput formControlName="accountSid">\n    <mat-error *ngIf="twilioVoiceConfigForm.get(\'accountSid\').hasError(\'required\')">\n      {{ \'tb.twilio.account-sid-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.twilio.account-token</mat-label>\n    <input required type="password" autocomplete="new-password" matInput formControlName="accountToken">\n    <mat-error *ngIf="twilioVoiceConfigForm.get(\'accountToken\').hasError(\'required\')">\n      {{ \'tb.twilio.account-token-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <section>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.twilio.provider</mat-label>\n      <mat-select formControlName="provider">\n        <mat-option *ngFor="let provider of providers | keyvalue" [value]="provider.value">\n          {{ provider.value }}\n        </mat-option>\n      </mat-select>\n      <mat-error *ngIf="twilioVoiceConfigForm.get(\'provider\').hasError(\'required\')">\n        {{ \'tb.twilio.provider-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.twilio.language</mat-label>\n      <mat-select required formControlName="language">\n        <mat-option *ngFor="let language of languages" [value]="language.value">\n          {{ language.viewValue }}\n        </mat-option>\n      </mat-select>\n      <mat-error *ngIf="twilioVoiceConfigForm.get(\'language\').hasError(\'required\')">\n        {{ \'tb.twilio.language-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field class="mat-block" *ngIf="this.configuration.provider!=\'Alice\'" disabled="this.twilioVoiceConfigForm.get(\'language\').value">\n      <mat-label translate>tb.twilio.voice</mat-label>\n      <mat-select required formControlName="voice">\n        <mat-option *ngFor="let voice of voices" [value]="voice">\n          {{ voice }}\n        </mat-option>\n      </mat-select>\n      <mat-error *ngIf="twilioVoiceConfigForm.get(\'voice\').hasError(\'required\')">\n        {{ \'tb.twilio.voice-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </section>\n  <section fxLayout="row" fxLayoutGap="8px">\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.twilio.pitch</mat-label>\n      <input required matInput type="number" formControlName="pitch" min="0">\n      <span matSuffix> %</span>\n      <mat-error *ngIf="twilioVoiceConfigForm.get(\'pitch\').hasError(\'required\')">\n        {{ \'tb.twilio.pitch-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.twilio.rate</mat-label>\n      <input required matInput type="number" formControlName="rate" min="0">\n      <span matSuffix> %</span>\n      <mat-error *ngIf="twilioVoiceConfigForm.get(\'rate\').hasError(\'required\')">\n        {{ \'tb.twilio.rate-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.twilio.volume</mat-label>\n      <input required matInput type="number" formControlName="volume">\n      <span matSuffix> dB</span>\n      <mat-error *ngIf="twilioVoiceConfigForm.get(\'volume\').hasError(\'required\')">\n        {{ \'tb.twilio.volume-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </section>\n  <section>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.twilio.start-pause</mat-label>\n      <span matSuffix> second</span>\n      <input required matInput type="number" formControlName="startPause" min="0">\n    </mat-form-field>\n  </section>\n</section>\n',components:[{type:m.MatFormField,selector:"mat-form-field",inputs:["color","floatLabel","appearance","hideRequiredMarker","hintLabel"],exportAs:["matFormField"]},{type:v.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex"],exportAs:["matSelect"]},{type:y.MatOption,selector:"mat-option",exportAs:["matOption"]}],directives:[{type:L.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{type:u.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{type:u.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{type:m.MatLabel,selector:"mat-label"},{type:c.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{type:f.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["id","disabled","required","type","value","readonly","placeholder","errorStateMatcher","aria-describedby"],exportAs:["matInput"]},{type:u.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{type:u.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{type:u.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{type:u.FormControlName,selector:"[formControlName]",inputs:["disabled","formControlName","ngModel"],outputs:["ngModelChange"]},{type:p.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{type:m.MatError,selector:"mat-error",inputs:["id"]},{type:m.MatHint,selector:"mat-hint",inputs:["align","id"]},{type:p.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{type:L.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{type:L.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{type:u.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{type:u.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{type:m.MatSuffix,selector:"[matSuffix]"}],pipes:{translate:c.TranslatePipe,safeHtml:A,keyvalue:p.KeyValuePipe}}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:t,type:_,decorators:[{type:a,args:[{selector:"tb-action-node-twilio-voice-config",templateUrl:"./twilio-voice-config.component.html",styleUrls:[]}]}],ctorParameters:function(){return[{type:s.Store},{type:u.FormBuilder}]}});class Y{constructor(e){!function(e){e.setTranslation("en_US",{tb:{twilio:{"number-from":"Phone Number From","number-from-required":"Phone Number From is required.","numbers-to":"Phone Numbers To","numbers-to-required":"Phone Numbers To is required.","numbers-to-hint":'Comma separated Phone Numbers, use <code><span style="color: #000;">$&#123;</span>metadataKey<span style="color: #000;">&#125;</span></code> for value from metadata, <code><span style="color: #000;">$[</span>messageKey<span style="color: #000;">]</span></code> for value from message body',"account-sid":"Twilio Account SID","account-sid-required":"Twilio Account SID is required","account-token":"Twilio Account Token","account-token-required":"Twilio Account Token is required",provider:"Voice provider","provider-required":"Voice provider is required",language:"Language","language-required":"Language is required",voice:"Voice","voice-required":"Voice is required",pitch:"Pitch","pitch-required":"Pitch is required",volume:"Volume","volume-required":"Volume is required",rate:"Rate","rate-required":"Rate is required","start-pause":"Pause before talking"}}},!0)}(e)}}e("TwilioConfigModule",Y),Y.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:t,type:Y,deps:[{token:c.TranslateService}],target:t.ɵɵFactoryTarget.NgModule}),Y.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"12.0.0",version:"12.2.15",ngImport:t,type:Y,declarations:[x,_,A],imports:[d,n,P],exports:[x,_]}),Y.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"12.2.15",ngImport:t,type:Y,imports:[[d,n,P]]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:t,type:Y,decorators:[{type:r,args:[{declarations:[x,_,A],imports:[d,n,P],exports:[x,_]}]}],ctorParameters:function(){return[{type:c.TranslateService}]}})}}}));//# sourceMappingURL=twilio-config.js.map
