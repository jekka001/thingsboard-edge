!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common"),require("@ngx-translate/core"),require("@shared/public-api"),require("@ngrx/store"),require("@angular/forms"),require("@home/components/public-api"),require("@core/public-api"),require("@angular/cdk/keycodes"),require("@angular/cdk/coercion"),require("@angular/material/chips"),require("@angular/material/autocomplete"),require("rxjs"),require("rxjs/operators"),require("moment"),require("@angular/material/dialog"),require("@angular/router")):"function"==typeof define&&define.amd?define("rulenode-core-config",["exports","@angular/core","@angular/common","@ngx-translate/core","@shared/public-api","@ngrx/store","@angular/forms","@home/components/public-api","@core/public-api","@angular/cdk/keycodes","@angular/cdk/coercion","@angular/material/chips","@angular/material/autocomplete","rxjs","rxjs/operators","moment","@angular/material/dialog","@angular/router"],t):t((e=e||self)["rulenode-core-config"]={},e.ng.core,e.ng.common,e["ngx-translate"],e.shared,e["ngrx-store"],e.ng.forms,e.publicApi$1,e.core,e.ng.cdk.keycodes,e.ng.cdk.coercion,e.ng.material.chips,e.ng.material.autocomplete,e.rxjs,e.rxjs.operators,e.moment,e.ng.material.dialog,e.ng.router)}(this,(function(e,t,n,r,a,o,i,l,s,m,u,p,d,c,g,f,y,b){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */var h=function(e,t){return(h=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};function C(e,t){function n(){this.constructor=e}h(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function v(e,t,n,r){var a,o=arguments.length,i=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(a=e[l])&&(i=(o<3?a(i):o>3?a(t,n,i):a(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i}function F(e,t){return function(n,r){t(n,r,e)}}function x(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}Object.create;function T(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}Object.create;var I,q=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.emptyConfigForm},n.prototype.onConfigurationSet=function(e){this.emptyConfigForm=this.fb.group({})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-node-empty-config",template:"<div></div>"}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),S=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.attributeScopes=Object.keys(a.AttributeScope),r.telemetryTypeTranslationsMap=a.telemetryTypeTranslations,r}return C(n,e),n.prototype.configForm=function(){return this.attributesConfigForm},n.prototype.onConfigurationSet=function(e){this.attributesConfigForm=this.fb.group({scope:[e?e.scope:null,[i.Validators.required]],notifyDevice:[!e||e.scope,[]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-attributes-config",template:'<section [formGroup]="attributesConfigForm" fxLayout="column">\n  <mat-form-field fxFlex class="mat-block">\n    <mat-label translate>attribute.attributes-scope</mat-label>\n    <mat-select formControlName="scope" required>\n      <mat-option *ngFor="let scope of attributeScopes" [value]="scope">\n        {{ telemetryTypeTranslationsMap.get(scope) | translate }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <div *ngIf="attributesConfigForm.get(\'scope\').value === \'SHARED_SCOPE\'">\n    <mat-checkbox formControlName="notifyDevice">\n      {{ \'tb.rulenode.notify-device\' | translate }}\n    </mat-checkbox>\n    <div class="tb-hint" style="padding-bottom: 16px;" translate>tb.rulenode.notify-device-hint</div>\n  </div>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),E=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.timeseriesConfigForm},n.prototype.onConfigurationSet=function(e){this.timeseriesConfigForm=this.fb.group({defaultTTL:[e?e.defaultTTL:null,[i.Validators.required,i.Validators.min(0)]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-timeseries-config",template:'<section [formGroup]="timeseriesConfigForm" fxLayout="column">\n  <mat-form-field fxFlex class="mat-block">\n    <mat-label translate>tb.rulenode.default-ttl</mat-label>\n    <input type="number" min="0" step="1" matInput formControlName="defaultTTL" required>\n    <mat-error *ngIf="timeseriesConfigForm.get(\'defaultTTL\').hasError(\'required\')">\n      {{ \'tb.rulenode.default-ttl-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="timeseriesConfigForm.get(\'defaultTTL\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-default-ttl-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),N=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.rpcRequestConfigForm},n.prototype.onConfigurationSet=function(e){this.rpcRequestConfigForm=this.fb.group({timeoutInSeconds:[e?e.timeoutInSeconds:null,[i.Validators.required,i.Validators.min(0)]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-rpc-request-config",template:'<section [formGroup]="rpcRequestConfigForm" fxLayout="column">\n  <mat-form-field fxFlex class="mat-block">\n    <mat-label translate>tb.rulenode.timeout-sec</mat-label>\n    <input type="number" min="0" step="1" matInput formControlName="timeoutInSeconds" required>\n    <mat-error *ngIf="rpcRequestConfigForm.get(\'timeoutInSeconds\').hasError(\'required\')">\n      {{ \'tb.rulenode.timeout-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="rpcRequestConfigForm.get(\'timeoutInSeconds\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-timeout-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),V=function(e){function n(t,n,r,a){var o=e.call(this,t)||this;return o.store=t,o.fb=n,o.nodeScriptTestService=r,o.translate=a,o}return C(n,e),n.prototype.configForm=function(){return this.logConfigForm},n.prototype.onConfigurationSet=function(e){this.logConfigForm=this.fb.group({jsScript:[e?e.jsScript:null,[i.Validators.required]]})},n.prototype.testScript=function(){var e=this,t=this.logConfigForm.get("jsScript").value;this.nodeScriptTestService.testNodeScript(t,"string",this.translate.instant("tb.rulenode.to-string"),"ToString",["msg","metadata","msgType"],this.ruleNodeId).subscribe((function(t){t&&e.logConfigForm.get("jsScript").setValue(t)}))},n.prototype.onValidate=function(){this.jsFuncComponent.validateOnSubmit()},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder},{type:s.NodeScriptTestService},{type:r.TranslateService}]},v([t.ViewChild("jsFuncComponent",{static:!0}),x("design:type",a.JsFuncComponent)],n.prototype,"jsFuncComponent",void 0),n=v([t.Component({selector:"tb-action-node-log-config",template:'<section [formGroup]="logConfigForm" fxLayout="column">\n  <label translate class="tb-title no-padding">tb.rulenode.to-string</label>\n  <tb-js-func #jsFuncComponent\n              formControlName="jsScript"\n              functionName="ToString"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              noValidate="true">\n  </tb-js-func>\n  <div fxLayout="row">\n    <button mat-button mat-raised-button color="primary" (click)="testScript()">\n      {{ \'tb.rulenode.test-to-string-function\' | translate }}\n    </button>\n  </div>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder,s.NodeScriptTestService,r.TranslateService])],n)}(a.RuleNodeConfigurationComponent),A=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.assignCustomerConfigForm},n.prototype.onConfigurationSet=function(e){this.assignCustomerConfigForm=this.fb.group({customerNamePattern:[e?e.customerNamePattern:null,[i.Validators.required]],createCustomerIfNotExists:[!!e&&e.createCustomerIfNotExists,[]],customerCacheExpiration:[e?e.customerCacheExpiration:null,[i.Validators.required,i.Validators.min(0)]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-assign-to-customer-config",template:'<section [formGroup]="assignCustomerConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.customer-name-pattern</mat-label>\n    <input required matInput formControlName="customerNamePattern">\n    <mat-error *ngIf="assignCustomerConfigForm.get(\'customerNamePattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.customer-name-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.customer-name-pattern-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <mat-checkbox fxFlex formControlName="createCustomerIfNotExists" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.create-customer-if-not-exists\' | translate }}\n  </mat-checkbox>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.customer-cache-expiration</mat-label>\n    <input required type="number" min="0" step="1" matInput formControlName="customerCacheExpiration">\n    <mat-error *ngIf="assignCustomerConfigForm.get(\'customerCacheExpiration\').hasError(\'required\')">\n      {{ \'tb.rulenode.customer-cache-expiration-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="assignCustomerConfigForm.get(\'customerCacheExpiration\').hasError(\'min\')">\n      {{ \'tb.rulenode.customer-cache-expiration-range\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.customer-cache-expiration-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),k=function(e){function n(t,n,r,a){var o=e.call(this,t)||this;return o.store=t,o.fb=n,o.nodeScriptTestService=r,o.translate=a,o}return C(n,e),n.prototype.configForm=function(){return this.clearAlarmConfigForm},n.prototype.onConfigurationSet=function(e){this.clearAlarmConfigForm=this.fb.group({alarmDetailsBuildJs:[e?e.alarmDetailsBuildJs:null,[i.Validators.required]],alarmType:[e?e.alarmType:null,[i.Validators.required]]})},n.prototype.testScript=function(){var e=this,t=this.clearAlarmConfigForm.get("alarmDetailsBuildJs").value;this.nodeScriptTestService.testNodeScript(t,"json",this.translate.instant("tb.rulenode.details"),"Details",["msg","metadata","msgType"],this.ruleNodeId).subscribe((function(t){t&&e.clearAlarmConfigForm.get("alarmDetailsBuildJs").setValue(t)}))},n.prototype.onValidate=function(){this.jsFuncComponent.validateOnSubmit()},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder},{type:s.NodeScriptTestService},{type:r.TranslateService}]},v([t.ViewChild("jsFuncComponent",{static:!0}),x("design:type",a.JsFuncComponent)],n.prototype,"jsFuncComponent",void 0),n=v([t.Component({selector:"tb-action-node-clear-alarm-config",template:'<section [formGroup]="clearAlarmConfigForm" fxLayout="column">\n  <label translate class="tb-title no-padding">tb.rulenode.alarm-details-builder</label>\n  <tb-js-func #jsFuncComponent\n              formControlName="alarmDetailsBuildJs"\n              functionName="Details"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              noValidate="true">\n  </tb-js-func>\n  <div fxLayout="row" style="padding-bottom: 16px;">\n    <button mat-button mat-raised-button color="primary" (click)="testScript()">\n      {{ \'tb.rulenode.test-details-function\' | translate }}\n    </button>\n  </div>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.alarm-type</mat-label>\n    <input required matInput formControlName="alarmType">\n    <mat-error *ngIf="clearAlarmConfigForm.get(\'alarmType\').hasError(\'required\')">\n      {{ \'tb.rulenode.alarm-type-required\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.entity-type-pattern-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder,s.NodeScriptTestService,r.TranslateService])],n)}(a.RuleNodeConfigurationComponent),L=function(e){function n(t,n,r,o){var i=e.call(this,t)||this;return i.store=t,i.fb=n,i.nodeScriptTestService=r,i.translate=o,i.alarmSeverities=Object.keys(a.AlarmSeverity),i.alarmSeverityTranslationMap=a.alarmSeverityTranslations,i.separatorKeysCodes=[m.ENTER,m.COMMA,m.SEMICOLON],i}return C(n,e),n.prototype.configForm=function(){return this.createAlarmConfigForm},n.prototype.onConfigurationSet=function(e){this.createAlarmConfigForm=this.fb.group({alarmDetailsBuildJs:[e?e.alarmDetailsBuildJs:null,[i.Validators.required]],useMessageAlarmData:[!!e&&e.useMessageAlarmData,[]],alarmType:[e?e.alarmType:null,[]],severity:[e?e.severity:null,[]],propagate:[!!e&&e.propagate,[]],relationTypes:[e?e.relationTypes:null,[]]})},n.prototype.validatorTriggers=function(){return["useMessageAlarmData"]},n.prototype.updateValidators=function(e){this.createAlarmConfigForm.get("useMessageAlarmData").value?(this.createAlarmConfigForm.get("alarmType").setValidators([]),this.createAlarmConfigForm.get("severity").setValidators([])):(this.createAlarmConfigForm.get("alarmType").setValidators([i.Validators.required]),this.createAlarmConfigForm.get("severity").setValidators([i.Validators.required])),this.createAlarmConfigForm.get("alarmType").updateValueAndValidity({emitEvent:e}),this.createAlarmConfigForm.get("severity").updateValueAndValidity({emitEvent:e})},n.prototype.testScript=function(){var e=this,t=this.createAlarmConfigForm.get("alarmDetailsBuildJs").value;this.nodeScriptTestService.testNodeScript(t,"json",this.translate.instant("tb.rulenode.details"),"Details",["msg","metadata","msgType"],this.ruleNodeId).subscribe((function(t){t&&e.createAlarmConfigForm.get("alarmDetailsBuildJs").setValue(t)}))},n.prototype.removeKey=function(e,t){var n=this.createAlarmConfigForm.get(t).value,r=n.indexOf(e);r>=0&&(n.splice(r,1),this.createAlarmConfigForm.get(t).setValue(n,{emitEvent:!0}))},n.prototype.addKey=function(e,t){var n=e.input,r=e.value;if((r||"").trim()){r=r.trim();var a=this.createAlarmConfigForm.get(t).value;a&&-1!==a.indexOf(r)||(a||(a=[]),a.push(r),this.createAlarmConfigForm.get(t).setValue(a,{emitEvent:!0}))}n&&(n.value="")},n.prototype.onValidate=function(){this.jsFuncComponent.validateOnSubmit()},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder},{type:s.NodeScriptTestService},{type:r.TranslateService}]},v([t.ViewChild("jsFuncComponent",{static:!0}),x("design:type",a.JsFuncComponent)],n.prototype,"jsFuncComponent",void 0),n=v([t.Component({selector:"tb-action-node-create-alarm-config",template:'<section [formGroup]="createAlarmConfigForm" fxLayout="column">\n  <label translate class="tb-title no-padding">tb.rulenode.alarm-details-builder</label>\n  <tb-js-func #jsFuncComponent\n              formControlName="alarmDetailsBuildJs"\n              functionName="Details"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              noValidate="true">\n  </tb-js-func>\n  <div fxLayout="row" style="padding-bottom: 16px;">\n    <button mat-button mat-raised-button color="primary" (click)="testScript()">\n      {{ \'tb.rulenode.test-details-function\' | translate }}\n    </button>\n  </div>\n  <mat-checkbox formControlName="useMessageAlarmData" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.use-message-alarm-data\' | translate }}\n  </mat-checkbox>\n  <section fxLayout="column" *ngIf="createAlarmConfigForm.get(\'useMessageAlarmData\').value === false">\n    <section fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n      <mat-form-field fxFlex class="mat-block" style="padding-bottom: 16px;">\n        <mat-label translate>tb.rulenode.alarm-type</mat-label>\n        <input required matInput formControlName="alarmType">\n        <mat-error *ngIf="createAlarmConfigForm.get(\'alarmType\').hasError(\'required\')">\n          {{ \'tb.rulenode.alarm-type-required\' | translate }}\n        </mat-error>\n        <mat-hint innerHTML="{{ \'tb.rulenode.entity-type-pattern-hint\' | translate }}"></mat-hint>\n      </mat-form-field>\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.alarm-severity</mat-label>\n        <mat-select formControlName="severity" required>\n          <mat-option *ngFor="let severity of alarmSeverities" [value]="severity">\n            {{ alarmSeverityTranslationMap.get(severity) | translate }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf="createAlarmConfigForm.get(\'severity\').hasError(\'required\')">\n          {{ \'tb.rulenode.alarm-severity-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </section>\n    <mat-checkbox formControlName="propagate" style="padding-bottom: 16px;">\n      {{ \'tb.rulenode.propagate\' | translate }}\n    </mat-checkbox>\n    <section *ngIf="createAlarmConfigForm.get(\'propagate\').value === true">\n      <mat-form-field floatLabel="always" class="mat-block">\n        <mat-label translate>tb.rulenode.relation-types-list</mat-label>\n        <mat-chip-list #relationTypesChipList>\n          <mat-chip\n            *ngFor="let key of createAlarmConfigForm.get(\'relationTypes\').value;"\n            (removed)="removeKey(key, \'relationTypes\')">\n            {{key}}\n            <mat-icon matChipRemove>close</mat-icon>\n          </mat-chip>\n          <input matInput type="text" placeholder="{{\'tb.rulenode.relation-types-list\' | translate}}"\n                 style="max-width: 200px;"\n                 [matChipInputFor]="relationTypesChipList"\n                 [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                 (matChipInputTokenEnd)="addKey($event, \'relationTypes\')"\n                 [matChipInputAddOnBlur]="true">\n        </mat-chip-list>\n        <mat-hint innerHTML="{{ \'tb.rulenode.relation-types-list-hint\' | translate }}"></mat-hint>\n      </mat-form-field>\n    </section>\n  </section>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder,s.NodeScriptTestService,r.TranslateService])],n)}(a.RuleNodeConfigurationComponent),M=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.directionTypes=Object.keys(a.EntitySearchDirection),r.directionTypeTranslations=a.entitySearchDirectionTranslations,r.entityType=a.EntityType,r}return C(n,e),n.prototype.configForm=function(){return this.createRelationConfigForm},n.prototype.onConfigurationSet=function(e){this.createRelationConfigForm=this.fb.group({direction:[e?e.direction:null,[i.Validators.required]],entityType:[e?e.entityType:null,[i.Validators.required]],entityNamePattern:[e?e.entityNamePattern:null,[]],entityTypePattern:[e?e.entityTypePattern:null,[]],relationType:[e?e.relationType:null,[i.Validators.required]],createEntityIfNotExists:[!!e&&e.createEntityIfNotExists,[]],removeCurrentRelations:[!!e&&e.removeCurrentRelations,[]],changeOriginatorToRelatedEntity:[!!e&&e.changeOriginatorToRelatedEntity,[]],entityCacheExpiration:[e?e.entityCacheExpiration:null,[i.Validators.required,i.Validators.min(0)]]})},n.prototype.validatorTriggers=function(){return["entityType"]},n.prototype.updateValidators=function(e){var t=this.createRelationConfigForm.get("entityType").value;t?this.createRelationConfigForm.get("entityNamePattern").setValidators([i.Validators.required]):this.createRelationConfigForm.get("entityNamePattern").setValidators([]),!t||t!==a.EntityType.DEVICE&&t!==a.EntityType.ASSET?this.createRelationConfigForm.get("entityTypePattern").setValidators([]):this.createRelationConfigForm.get("entityTypePattern").setValidators([i.Validators.required]),this.createRelationConfigForm.get("entityNamePattern").updateValueAndValidity({emitEvent:e}),this.createRelationConfigForm.get("entityTypePattern").updateValueAndValidity({emitEvent:e})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-create-relation-config",template:'<section [formGroup]="createRelationConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" style="min-width: 100px;">\n    <mat-label translate>relation.direction</mat-label>\n    <mat-select required matInput formControlName="direction">\n      <mat-option *ngFor="let type of directionTypes" [value]="type">\n        {{ directionTypeTranslations.get(type) | translate }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <div fxLayout="row" fxLayoutGap="8px">\n    <tb-entity-type-select\n      showLabel\n      style="min-width: 100px;"\n      required\n      formControlName="entityType">\n    </tb-entity-type-select>\n    <mat-form-field *ngIf="createRelationConfigForm.get(\'entityType\').value" fxFlex class="mat-block" style="padding-bottom: 32px;">\n      <mat-label translate>tb.rulenode.entity-name-pattern</mat-label>\n      <input required matInput formControlName="entityNamePattern">\n      <mat-error *ngIf="createRelationConfigForm.get(\'entityNamePattern\').hasError(\'required\')">\n        {{ \'tb.rulenode.entity-name-pattern-required\' | translate }}\n      </mat-error>\n      <mat-hint innerHTML="{{ \'tb.rulenode.entity-name-pattern-hint\' | translate }}"></mat-hint>\n    </mat-form-field>\n    <mat-form-field *ngIf="createRelationConfigForm.get(\'entityType\').value === entityType.DEVICE ||\n                           createRelationConfigForm.get(\'entityType\').value === entityType.ASSET"\n                    fxFlex class="mat-block" style="padding-bottom: 32px;">\n      <mat-label translate>tb.rulenode.entity-type-pattern</mat-label>\n      <input required matInput formControlName="entityTypePattern">\n      <mat-error *ngIf="createRelationConfigForm.get(\'entityTypePattern\').hasError(\'required\')">\n        {{ \'tb.rulenode.entity-type-pattern-required\' | translate }}\n      </mat-error>\n      <mat-hint innerHTML="{{ \'tb.rulenode.entity-type-pattern-hint\' | translate }}"></mat-hint>\n    </mat-form-field>\n  </div>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.relation-type-pattern</mat-label>\n    <input required matInput formControlName="relationType">\n    <mat-error *ngIf="createRelationConfigForm.get(\'relationType\').hasError(\'required\')">\n      {{ \'tb.rulenode.relation-type-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.relation-type-pattern-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <section *ngIf="createRelationConfigForm.get(\'entityType\').value === entityType.CUSTOMER ||\n                  createRelationConfigForm.get(\'entityType\').value === entityType.DEVICE ||\n                  createRelationConfigForm.get(\'entityType\').value === entityType.ASSET">\n    <mat-checkbox formControlName="createEntityIfNotExists">\n      {{ \'tb.rulenode.create-entity-if-not-exists\' | translate }}\n    </mat-checkbox>\n    <div class="tb-hint" style="padding-bottom: 16px;" translate>tb.rulenode.create-entity-if-not-exists-hint</div>\n  </section>\n  <mat-checkbox formControlName="removeCurrentRelations">\n    {{ \'tb.rulenode.remove-current-relations\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" style="padding-bottom: 16px;" translate>tb.rulenode.remove-current-relations-hint</div>\n  <mat-checkbox formControlName="changeOriginatorToRelatedEntity">\n    {{ \'tb.rulenode.change-originator-to-related-entity\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" style="padding-bottom: 16px;" translate>tb.rulenode.change-originator-to-related-entity-hint</div>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.entity-cache-expiration</mat-label>\n    <input required type="number" min="0" step="1" matInput formControlName="entityCacheExpiration">\n    <mat-error *ngIf="createRelationConfigForm.get(\'entityCacheExpiration\').hasError(\'required\')">\n      {{ \'tb.rulenode.entity-cache-expiration-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="createRelationConfigForm.get(\'entityCacheExpiration\').hasError(\'min\')">\n      {{ \'tb.rulenode.entity-cache-expiration-range\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.entity-cache-expiration-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),P=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.msgDelayConfigForm},n.prototype.onConfigurationSet=function(e){this.msgDelayConfigForm=this.fb.group({useMetadataPeriodInSecondsPatterns:[!!e&&e.useMetadataPeriodInSecondsPatterns,[]],periodInSeconds:[e?e.periodInSeconds:null,[]],periodInSecondsPattern:[e?e.periodInSecondsPattern:null,[]],maxPendingMsgs:[e?e.maxPendingMsgs:null,[i.Validators.required,i.Validators.min(1),i.Validators.max(1e5)]]})},n.prototype.validatorTriggers=function(){return["useMetadataPeriodInSecondsPatterns"]},n.prototype.updateValidators=function(e){this.msgDelayConfigForm.get("useMetadataPeriodInSecondsPatterns").value?(this.msgDelayConfigForm.get("periodInSecondsPattern").setValidators([i.Validators.required]),this.msgDelayConfigForm.get("periodInSeconds").setValidators([])):(this.msgDelayConfigForm.get("periodInSecondsPattern").setValidators([]),this.msgDelayConfigForm.get("periodInSeconds").setValidators([i.Validators.required,i.Validators.min(0)])),this.msgDelayConfigForm.get("periodInSecondsPattern").updateValueAndValidity({emitEvent:e}),this.msgDelayConfigForm.get("periodInSeconds").updateValueAndValidity({emitEvent:e})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-msg-delay-config",template:'<section [formGroup]="msgDelayConfigForm" fxLayout="column">\n  <mat-checkbox formControlName="useMetadataPeriodInSecondsPatterns">\n    {{ \'tb.rulenode.use-metadata-period-in-seconds-patterns\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" style="padding-bottom: 16px;" translate>tb.rulenode.use-metadata-period-in-seconds-patterns-hint</div>\n  <mat-form-field *ngIf="msgDelayConfigForm.get(\'useMetadataPeriodInSecondsPatterns\').value !== true; else periodInSecondsPattern"\n                  class="mat-block">\n    <mat-label translate>tb.rulenode.period-seconds</mat-label>\n    <input required type="number" min="0" step="1" matInput formControlName="periodInSeconds">\n    <mat-error *ngIf="msgDelayConfigForm.get(\'periodInSeconds\').hasError(\'required\')">\n      {{ \'tb.rulenode.period-seconds-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="msgDelayConfigForm.get(\'periodInSeconds\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-period-0-seconds-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <ng-template #periodInSecondsPattern>\n    <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n      <mat-label translate>tb.rulenode.period-in-seconds-pattern</mat-label>\n      <input required matInput formControlName="periodInSecondsPattern">\n      <mat-error *ngIf="msgDelayConfigForm.get(\'periodInSecondsPattern\').hasError(\'required\')">\n        {{ \'tb.rulenode.period-in-seconds-pattern-required\' | translate }}\n      </mat-error>\n      <mat-hint innerHTML="{{ \'tb.rulenode.period-in-seconds-pattern-hint\' | translate }}"></mat-hint>\n    </mat-form-field>\n  </ng-template>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.max-pending-messages</mat-label>\n    <input required type="number" min="1" max="100000" step="1" matInput formControlName="maxPendingMsgs">\n    <mat-error *ngIf="msgDelayConfigForm.get(\'maxPendingMsgs\').hasError(\'required\')">\n      {{ \'tb.rulenode.max-pending-messages-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="msgDelayConfigForm.get(\'maxPendingMsgs\').hasError(\'min\')">\n      {{ \'tb.rulenode.max-pending-messages-range\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="msgDelayConfigForm.get(\'maxPendingMsgs\').hasError(\'max\')">\n      {{ \'tb.rulenode.max-pending-messages-range\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),R=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.directionTypes=Object.keys(a.EntitySearchDirection),r.directionTypeTranslations=a.entitySearchDirectionTranslations,r.entityType=a.EntityType,r}return C(n,e),n.prototype.configForm=function(){return this.deleteRelationConfigForm},n.prototype.onConfigurationSet=function(e){this.deleteRelationConfigForm=this.fb.group({deleteForSingleEntity:[!!e&&e.deleteForSingleEntity,[]],direction:[e?e.direction:null,[i.Validators.required]],entityType:[e?e.entityType:null,[]],entityNamePattern:[e?e.entityNamePattern:null,[]],relationType:[e?e.relationType:null,[i.Validators.required]],entityCacheExpiration:[e?e.entityCacheExpiration:null,[i.Validators.required,i.Validators.min(0)]]})},n.prototype.validatorTriggers=function(){return["deleteForSingleEntity","entityType"]},n.prototype.updateValidators=function(e){var t=this.deleteRelationConfigForm.get("deleteForSingleEntity").value,n=this.deleteRelationConfigForm.get("entityType").value;t?this.deleteRelationConfigForm.get("entityType").setValidators([i.Validators.required]):this.deleteRelationConfigForm.get("entityType").setValidators([]),t&&n?this.deleteRelationConfigForm.get("entityNamePattern").setValidators([i.Validators.required]):this.deleteRelationConfigForm.get("entityNamePattern").setValidators([]),this.deleteRelationConfigForm.get("entityType").updateValueAndValidity({emitEvent:!1}),this.deleteRelationConfigForm.get("entityNamePattern").updateValueAndValidity({emitEvent:e})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-delete-relation-config",template:'<section [formGroup]="deleteRelationConfigForm" fxLayout="column">\n  <mat-checkbox formControlName="deleteForSingleEntity">\n    {{ \'tb.rulenode.delete-relation-to-specific-entity\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" style="padding-bottom: 16px;" translate>tb.rulenode.delete-relation-hint</div>\n  <mat-form-field class="mat-block" style="min-width: 100px;">\n    <mat-label translate>relation.direction</mat-label>\n    <mat-select required matInput formControlName="direction">\n      <mat-option *ngFor="let type of directionTypes" [value]="type">\n        {{ directionTypeTranslations.get(type) | translate }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <div *ngIf="deleteRelationConfigForm.get(\'deleteForSingleEntity\').value" fxLayout="row" fxLayoutGap="8px">\n    <tb-entity-type-select\n      showLabel\n      style="min-width: 100px;"\n      required\n      formControlName="entityType">\n    </tb-entity-type-select>\n    <mat-form-field *ngIf="deleteRelationConfigForm.get(\'entityType\').value" fxFlex class="mat-block" style="padding-bottom: 32px;">\n      <mat-label translate>tb.rulenode.entity-name-pattern</mat-label>\n      <input required matInput formControlName="entityNamePattern">\n      <mat-error *ngIf="deleteRelationConfigForm.get(\'entityNamePattern\').hasError(\'required\')">\n        {{ \'tb.rulenode.entity-name-pattern-required\' | translate }}\n      </mat-error>\n      <mat-hint innerHTML="{{ \'tb.rulenode.entity-name-pattern-hint\' | translate }}"></mat-hint>\n    </mat-form-field>\n  </div>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.relation-type-pattern</mat-label>\n    <input required matInput formControlName="relationType">\n    <mat-error *ngIf="deleteRelationConfigForm.get(\'relationType\').hasError(\'required\')">\n      {{ \'tb.rulenode.relation-type-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.relation-type-pattern-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.entity-cache-expiration</mat-label>\n    <input required type="number" min="0" step="1" matInput formControlName="entityCacheExpiration">\n    <mat-error *ngIf="deleteRelationConfigForm.get(\'entityCacheExpiration\').hasError(\'required\')">\n      {{ \'tb.rulenode.entity-cache-expiration-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="deleteRelationConfigForm.get(\'entityCacheExpiration\').hasError(\'min\')">\n      {{ \'tb.rulenode.entity-cache-expiration-range\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.entity-cache-expiration-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),O=function(e){function n(t,n,r,a){var o=e.call(this,t)||this;return o.store=t,o.fb=n,o.nodeScriptTestService=r,o.translate=a,o}return C(n,e),n.prototype.configForm=function(){return this.generatorConfigForm},n.prototype.onConfigurationSet=function(e){this.generatorConfigForm=this.fb.group({msgCount:[e?e.msgCount:null,[i.Validators.required,i.Validators.min(0)]],periodInSeconds:[e?e.periodInSeconds:null,[i.Validators.required,i.Validators.min(1)]],originator:[e?e.originator:null,[]],jsScript:[e?e.jsScript:null,[i.Validators.required]]})},n.prototype.prepareInputConfig=function(e){return e&&(e.originatorId&&e.originatorType?e.originator={id:e.originatorId,entityType:e.originatorType}:e.originator=null,delete e.originatorId,delete e.originatorType),e},n.prototype.prepareOutputConfig=function(e){return e.originator?(e.originatorId=e.originator.id,e.originatorType=e.originator.entityType):(e.originatorId=null,e.originatorType=null),delete e.originator,e},n.prototype.testScript=function(){var e=this,t=this.generatorConfigForm.get("jsScript").value;this.nodeScriptTestService.testNodeScript(t,"generate",this.translate.instant("tb.rulenode.generator"),"Generate",["prevMsg","prevMetadata","prevMsgType"],this.ruleNodeId).subscribe((function(t){t&&e.generatorConfigForm.get("jsScript").setValue(t)}))},n.prototype.onValidate=function(){this.jsFuncComponent.validateOnSubmit()},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder},{type:s.NodeScriptTestService},{type:r.TranslateService}]},v([t.ViewChild("jsFuncComponent",{static:!0}),x("design:type",a.JsFuncComponent)],n.prototype,"jsFuncComponent",void 0),n=v([t.Component({selector:"tb-action-node-generator-config",template:'<section [formGroup]="generatorConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.message-count</mat-label>\n    <input required type="number" min="0" step="1" matInput formControlName="msgCount">\n    <mat-error *ngIf="generatorConfigForm.get(\'msgCount\').hasError(\'required\')">\n      {{ \'tb.rulenode.message-count-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="generatorConfigForm.get(\'msgCount\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-message-count-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.period-seconds</mat-label>\n    <input required type="number" min="1" step="1" matInput formControlName="periodInSeconds">\n    <mat-error *ngIf="generatorConfigForm.get(\'periodInSeconds\').hasError(\'required\')">\n      {{ \'tb.rulenode.period-seconds-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="generatorConfigForm.get(\'periodInSeconds\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-period-seconds-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <div fxLayout="column">\n    <label class="tb-small">{{ \'tb.rulenode.originator\' | translate }}</label>\n    <tb-entity-select\n      required="false"\n      formControlName="originator">\n    </tb-entity-select>\n  </div>\n  <label translate class="tb-title no-padding">tb.rulenode.generate</label>\n  <tb-js-func #jsFuncComponent\n              formControlName="jsScript"\n              functionName="Generate"\n              [functionArgs]="[\'prevMsg\', \'prevMetadata\', \'prevMsgType\']"\n              noValidate="true">\n  </tb-js-func>\n  <div fxLayout="row" style="padding-bottom: 16px;">\n    <button mat-button mat-raised-button color="primary" (click)="testScript()">\n      {{ \'tb.rulenode.test-generator-function\' | translate }}\n    </button>\n  </div>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder,s.NodeScriptTestService,r.TranslateService])],n)}(a.RuleNodeConfigurationComponent);!function(e){e.CUSTOMER="CUSTOMER",e.TENANT="TENANT",e.RELATED="RELATED",e.ALARM_ORIGINATOR="ALARM_ORIGINATOR"}(I||(I={}));var w,D=new Map([[I.CUSTOMER,"tb.rulenode.originator-customer"],[I.TENANT,"tb.rulenode.originator-tenant"],[I.RELATED,"tb.rulenode.originator-related"],[I.ALARM_ORIGINATOR,"tb.rulenode.originator-alarm-originator"]]);!function(e){e.CIRCLE="CIRCLE",e.POLYGON="POLYGON"}(w||(w={}));var G,U=new Map([[w.CIRCLE,"tb.rulenode.perimeter-circle"],[w.POLYGON,"tb.rulenode.perimeter-polygon"]]);!function(e){e.MILLISECONDS="MILLISECONDS",e.SECONDS="SECONDS",e.MINUTES="MINUTES",e.HOURS="HOURS",e.DAYS="DAYS"}(G||(G={}));var K,B=new Map([[G.MILLISECONDS,"tb.rulenode.time-unit-milliseconds"],[G.SECONDS,"tb.rulenode.time-unit-seconds"],[G.MINUTES,"tb.rulenode.time-unit-minutes"],[G.HOURS,"tb.rulenode.time-unit-hours"],[G.DAYS,"tb.rulenode.time-unit-days"]]);!function(e){e.METER="METER",e.KILOMETER="KILOMETER",e.FOOT="FOOT",e.MILE="MILE",e.NAUTICAL_MILE="NAUTICAL_MILE"}(K||(K={}));var H,Q=new Map([[K.METER,"tb.rulenode.range-unit-meter"],[K.KILOMETER,"tb.rulenode.range-unit-kilometer"],[K.FOOT,"tb.rulenode.range-unit-foot"],[K.MILE,"tb.rulenode.range-unit-mile"],[K.NAUTICAL_MILE,"tb.rulenode.range-unit-nautical-mile"]]);!function(e){e.TITLE="TITLE",e.COUNTRY="COUNTRY",e.STATE="STATE",e.ZIP="ZIP",e.ADDRESS="ADDRESS",e.ADDRESS2="ADDRESS2",e.PHONE="PHONE",e.EMAIL="EMAIL",e.ADDITIONAL_INFO="ADDITIONAL_INFO"}(H||(H={}));var j,_,$,z=new Map([[H.TITLE,"tb.rulenode.entity-details-title"],[H.COUNTRY,"tb.rulenode.entity-details-country"],[H.STATE,"tb.rulenode.entity-details-state"],[H.ZIP,"tb.rulenode.entity-details-zip"],[H.ADDRESS,"tb.rulenode.entity-details-address"],[H.ADDRESS2,"tb.rulenode.entity-details-address2"],[H.PHONE,"tb.rulenode.entity-details-phone"],[H.EMAIL,"tb.rulenode.entity-details-email"],[H.ADDITIONAL_INFO,"tb.rulenode.entity-details-additional_info"]]);!function(e){e.FIRST="FIRST",e.LAST="LAST",e.ALL="ALL"}(j||(j={})),function(e){e.ASC="ASC",e.DESC="DESC"}(_||(_={})),function(e){e.STANDARD="STANDARD",e.FIFO="FIFO"}($||($={}));var Y,W,J=new Map([[$.STANDARD,"tb.rulenode.sqs-queue-standard"],[$.FIFO,"tb.rulenode.sqs-queue-fifo"]]),Z=["anonymous","basic","cert.PEM"],X=new Map([["anonymous","tb.rulenode.credentials-anonymous"],["basic","tb.rulenode.credentials-basic"],["cert.PEM","tb.rulenode.credentials-pem"]]),ee=["sas","cert.PEM"],te=new Map([["sas","tb.rulenode.credentials-sas"],["cert.PEM","tb.rulenode.credentials-pem"]]);!function(e){e.GET="GET",e.POST="POST",e.PUT="PUT",e.DELETE="DELETE"}(Y||(Y={})),function(e){e.TENANT="TENANT",e.CUSTOMER="CUSTOMER"}(W||(W={}));var ne,re=new Map([[W.TENANT,"tb.rulenode.originator-tenant"],[W.CUSTOMER,"tb.rulenode.originator-customer"]]);!function(e){e.MIN="MIN",e.MAX="MAX",e.SUM="SUM",e.AVG="AVG",e.COUNT="COUNT",e.COUNT_UNIQUE="COUNT_UNIQUE"}(ne||(ne={}));var ae,oe=new Map([[ne.MIN,"tb.rulenode.func-min"],[ne.MAX,"tb.rulenode.func-max"],[ne.SUM,"tb.rulenode.func-sum"],[ne.AVG,"tb.rulenode.func-avg"],[ne.COUNT,"tb.rulenode.func-count"],[ne.COUNT_UNIQUE,"tb.rulenode.func-count-unique"]]);!function(e){e.HOUR="HOUR",e.DAY="DAY",e.WEEK="WEEK",e.MONTH="MONTH",e.YEAR="YEAR",e.CUSTOM="CUSTOM"}(ae||(ae={}));var ie,le=new Map([[ae.HOUR,"tb.rulenode.aggregate-period-hour"],[ae.DAY,"tb.rulenode.aggregate-period-day"],[ae.WEEK,"tb.rulenode.aggregate-period-week"],[ae.MONTH,"tb.rulenode.aggregate-period-month"],[ae.YEAR,"tb.rulenode.aggregate-period-year"],[ae.CUSTOM,"tb.rulenode.aggregate-period-custom"]]);!function(e){e.ON_EACH_CHECK="ON_EACH_CHECK",e.ON_EACH_CHECK_AFTER_INTERVAL_END="ON_EACH_CHECK_AFTER_INTERVAL_END"}(ie||(ie={}));var se,me=new Map([[ie.ON_EACH_CHECK,"tb.rulenode.interval-persist-policy-on-each-check"],[ie.ON_EACH_CHECK_AFTER_INTERVAL_END,"tb.rulenode.interval-persist-policy-on-each-check-after-interval-end"]]);!function(e){e.ON_EACH_CHANGE="ON_EACH_CHANGE",e.PERIODICALLY="PERIODICALLY"}(se||(se={}));var ue=new Map([[se.ON_EACH_CHANGE,"tb.rulenode.state-persist-policy-on-each-change"],[se.PERIODICALLY,"tb.rulenode.state-persist-policy-periodically"]]),pe=["US-ASCII","ISO-8859-1","UTF-8","UTF-16BE","UTF-16LE","UTF-16"],de=new Map([["US-ASCII","tb.rulenode.charset-us-ascii"],["ISO-8859-1","tb.rulenode.charset-iso-8859-1"],["UTF-8","tb.rulenode.charset-utf-8"],["UTF-16BE","tb.rulenode.charset-utf-16be"],["UTF-16LE","tb.rulenode.charset-utf-16le"],["UTF-16","tb.rulenode.charset-utf-16"]]),ce={fetchLastLevelOnly:!1,direction:a.EntitySearchDirection.FROM,maxLevel:1,filters:[{relationType:a.CONTAINS_TYPE,entityTypes:[]}]};function ge(e){if(e&&e.type){var t=e.type,n={type:t};switch(t){case"single":n.entityId=e.entityId,e.childRelationsQuery&&(n.childRelationsQuery=e.childRelationsQuery);break;case"group":n.entityGroupId=e.entityGroupId;break;case"relationsQuery":n.rootEntityId=e.rootEntityId,n.relationsQuery=e.relationsQuery,e.childRelationsQuery&&(n.childRelationsQuery=e.childRelationsQuery)}return n}return e}var fe=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.perimeterType=w,r.perimeterTypes=Object.keys(w),r.perimeterTypeTranslationMap=U,r.rangeUnits=Object.keys(K),r.rangeUnitTranslationMap=Q,r.timeUnits=Object.keys(G),r.timeUnitsTranslationMap=B,r}return C(n,e),n.prototype.configForm=function(){return this.geoActionConfigForm},n.prototype.onConfigurationSet=function(e){this.geoActionConfigForm=this.fb.group({latitudeKeyName:[e?e.latitudeKeyName:null,[i.Validators.required]],longitudeKeyName:[e?e.longitudeKeyName:null,[i.Validators.required]],fetchPerimeterInfoFromMessageMetadata:[!!e&&e.fetchPerimeterInfoFromMessageMetadata,[]],perimeterType:[e?e.perimeterType:null,[]],centerLatitude:[e?e.centerLatitude:null,[]],centerLongitude:[e?e.centerLatitude:null,[]],range:[e?e.range:null,[]],rangeUnit:[e?e.rangeUnit:null,[]],polygonsDefinition:[e?e.polygonsDefinition:null,[]],minInsideDuration:[e?e.minInsideDuration:null,[i.Validators.required,i.Validators.min(1),i.Validators.max(2147483647)]],minInsideDurationTimeUnit:[e?e.minInsideDurationTimeUnit:null,[i.Validators.required]],minOutsideDuration:[e?e.minOutsideDuration:null,[i.Validators.required,i.Validators.min(1),i.Validators.max(2147483647)]],minOutsideDurationTimeUnit:[e?e.minOutsideDurationTimeUnit:null,[i.Validators.required]]})},n.prototype.validatorTriggers=function(){return["fetchPerimeterInfoFromMessageMetadata","perimeterType"]},n.prototype.updateValidators=function(e){var t=this.geoActionConfigForm.get("fetchPerimeterInfoFromMessageMetadata").value,n=this.geoActionConfigForm.get("perimeterType").value;t?this.geoActionConfigForm.get("perimeterType").setValidators([]):this.geoActionConfigForm.get("perimeterType").setValidators([i.Validators.required]),t||n!==w.CIRCLE?(this.geoActionConfigForm.get("centerLatitude").setValidators([]),this.geoActionConfigForm.get("centerLongitude").setValidators([]),this.geoActionConfigForm.get("range").setValidators([]),this.geoActionConfigForm.get("rangeUnit").setValidators([])):(this.geoActionConfigForm.get("centerLatitude").setValidators([i.Validators.required,i.Validators.min(-90),i.Validators.max(90)]),this.geoActionConfigForm.get("centerLongitude").setValidators([i.Validators.required,i.Validators.min(-180),i.Validators.max(180)]),this.geoActionConfigForm.get("range").setValidators([i.Validators.required,i.Validators.min(0)]),this.geoActionConfigForm.get("rangeUnit").setValidators([i.Validators.required])),t||n!==w.POLYGON?this.geoActionConfigForm.get("polygonsDefinition").setValidators([]):this.geoActionConfigForm.get("polygonsDefinition").setValidators([i.Validators.required]),this.geoActionConfigForm.get("perimeterType").updateValueAndValidity({emitEvent:!1}),this.geoActionConfigForm.get("centerLatitude").updateValueAndValidity({emitEvent:e}),this.geoActionConfigForm.get("centerLongitude").updateValueAndValidity({emitEvent:e}),this.geoActionConfigForm.get("range").updateValueAndValidity({emitEvent:e}),this.geoActionConfigForm.get("rangeUnit").updateValueAndValidity({emitEvent:e}),this.geoActionConfigForm.get("polygonsDefinition").updateValueAndValidity({emitEvent:e})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-gps-geofencing-config",template:'<section [formGroup]="geoActionConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.latitude-key-name</mat-label>\n    <input matInput formControlName="latitudeKeyName" required>\n    <mat-error *ngIf="geoActionConfigForm.get(\'latitudeKeyName\').hasError(\'required\')">\n      {{ \'tb.rulenode.latitude-key-name-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.longitude-key-name</mat-label>\n    <input matInput formControlName="longitudeKeyName" required>\n    <mat-error *ngIf="geoActionConfigForm.get(\'longitudeKeyName\').hasError(\'required\')">\n      {{ \'tb.rulenode.longitude-key-name-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-checkbox fxFlex formControlName="fetchPerimeterInfoFromMessageMetadata" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.fetch-perimeter-info-from-message-metadata\' | translate }}\n  </mat-checkbox>\n  <div fxLayout="row" *ngIf="!geoActionConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value">\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.perimeter-type</mat-label>\n      <mat-select formControlName="perimeterType" required>\n        <mat-option *ngFor="let type of perimeterTypes" [value]="type">\n          {{ perimeterTypeTranslationMap.get(type) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div fxLayout="column"\n       *ngIf="geoActionConfigForm.get(\'perimeterType\').value === perimeterType.CIRCLE &&\n       !geoActionConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value">\n    <div fxLayout="row" fxLayoutGap="8px">\n      <mat-form-field fxFlex>\n        <mat-label translate>tb.rulenode.circle-center-latitude</mat-label>\n        <input type="number" min="-90" max="90" step="0.1" matInput formControlName="centerLatitude" required>\n        <mat-error *ngIf="geoActionConfigForm.get(\'centerLatitude\').hasError(\'required\')">\n          {{ \'tb.rulenode.circle-center-latitude-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex>\n        <mat-label translate>tb.rulenode.circle-center-longitude</mat-label>\n        <input type="number" min="-180" max="180" step="0.1" matInput formControlName="centerLongitude" required>\n        <mat-error *ngIf="geoActionConfigForm.get(\'centerLongitude\').hasError(\'required\')">\n          {{ \'tb.rulenode.circle-center-longitude-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <div fxLayout="row" fxLayoutGap="8px">\n      <mat-form-field fxFlex>\n        <mat-label translate>tb.rulenode.range</mat-label>\n        <input type="number" min="0" step="0.1" matInput formControlName="range" required>\n        <mat-error *ngIf="geoActionConfigForm.get(\'range\').hasError(\'required\')">\n          {{ \'tb.rulenode.range-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex>\n        <mat-label translate>tb.rulenode.range-units</mat-label>\n        <mat-select formControlName="rangeUnit" required>\n          <mat-option *ngFor="let type of rangeUnits" [value]="type">\n            {{ rangeUnitTranslationMap.get(type) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n  </div>\n  <div fxLayout="column" *ngIf="geoActionConfigForm.get(\'perimeterType\').value === perimeterType.POLYGON &&\n                             !geoActionConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value">\n    <mat-form-field class="mat-block" hintLabel="{{\'tb.rulenode.polygon-definition-hint\' | translate}}" style="padding-bottom: 16px;">\n      <mat-label translate>tb.rulenode.polygon-definition</mat-label>\n      <input matInput formControlName="polygonsDefinition" required>\n      <mat-error *ngIf="geoActionConfigForm.get(\'polygonsDefinition\').hasError(\'required\')">\n        {{ \'tb.rulenode.polygon-definition-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.min-inside-duration</mat-label>\n      <input type="number" step="1" min="1" max="2147483647" matInput formControlName="minInsideDuration" required>\n      <mat-error *ngIf="geoActionConfigForm.get(\'minInsideDuration\').hasError(\'required\')">\n        {{ \'tb.rulenode.min-inside-duration-value-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="geoActionConfigForm.get(\'minInsideDuration\').hasError(\'min\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="geoActionConfigForm.get(\'minInsideDuration\').hasError(\'max\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.min-inside-duration-time-unit</mat-label>\n      <mat-select formControlName="minInsideDurationTimeUnit" required>\n        <mat-option *ngFor="let timeUnit of timeUnits" [value]="timeUnit">\n          {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.min-outside-duration</mat-label>\n      <input type="number" step="1" min="1" max="2147483647" matInput formControlName="minOutsideDuration" required>\n      <mat-error *ngIf="geoActionConfigForm.get(\'minOutsideDuration\').hasError(\'required\')">\n        {{ \'tb.rulenode.min-outside-duration-value-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="geoActionConfigForm.get(\'minOutsideDuration\').hasError(\'min\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="geoActionConfigForm.get(\'minOutsideDuration\').hasError(\'max\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.min-outside-duration-time-unit</mat-label>\n      <mat-select formControlName="minOutsideDurationTimeUnit" required>\n        <mat-option *ngFor="let timeUnit of timeUnits" [value]="timeUnit">\n          {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),ye=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.msgCountConfigForm},n.prototype.onConfigurationSet=function(e){this.msgCountConfigForm=this.fb.group({interval:[e?e.interval:null,[i.Validators.required,i.Validators.min(1)]],telemetryPrefix:[e?e.telemetryPrefix:null,[i.Validators.required]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-msg-count-config",template:'<section [formGroup]="msgCountConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.interval-seconds</mat-label>\n    <input required type="number" min="1" step="1" matInput formControlName="interval">\n    <mat-error *ngIf="msgCountConfigForm.get(\'interval\').hasError(\'required\')">\n      {{ \'tb.rulenode.interval-seconds-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="msgCountConfigForm.get(\'interval\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-interval-seconds-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.output-timeseries-key-prefix</mat-label>\n    <input required matInput formControlName="telemetryPrefix">\n    <mat-error *ngIf="msgCountConfigForm.get(\'telemetryPrefix\').hasError(\'required\')">\n      {{ \'tb.rulenode.output-timeseries-key-prefix-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),be=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.rpcReplyConfigForm},n.prototype.onConfigurationSet=function(e){this.rpcReplyConfigForm=this.fb.group({requestIdMetaDataAttribute:[e?e.requestIdMetaDataAttribute:null,[]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-rpc-reply-config",template:'<section [formGroup]="rpcReplyConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.request-id-metadata-attribute</mat-label>\n    <input matInput formControlName="requestIdMetaDataAttribute">\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),he=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.saveToCustomTableConfigForm},n.prototype.onConfigurationSet=function(e){this.saveToCustomTableConfigForm=this.fb.group({tableName:[e?e.tableName:null,[i.Validators.required]],fieldsMapping:[e?e.fieldsMapping:null,[i.Validators.required]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-custom-table-config",template:'<section [formGroup]="saveToCustomTableConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.custom-table-name</mat-label>\n    <input required matInput formControlName="tableName">\n    <mat-error *ngIf="saveToCustomTableConfigForm.get(\'tableName\').hasError(\'required\')">\n      {{ \'tb.rulenode.custom-table-name-required\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.custom-table-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <label translate class="tb-title tb-required">tb.rulenode.fields-mapping</label>\n  <tb-kv-map-config\n    required\n    formControlName="fieldsMapping"\n    requiredText="tb.rulenode.fields-mapping-required"\n    keyText="tb.rulenode.message-field"\n    keyRequiredText="tb.rulenode.message-field-required"\n    valText="tb.rulenode.table-col"\n    valRequiredText="tb.rulenode.table-col-required">\n  </tb-kv-map-config>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Ce=function(e){function n(t,n,r,a){var o=e.call(this,t)||this;return o.store=t,o.translate=n,o.injector=r,o.fb=a,o.propagateChange=null,o.valueChangeSubscription=null,o}var a;return C(n,e),a=n,Object.defineProperty(n.prototype,"required",{get:function(){return this.requiredValue},set:function(e){this.requiredValue=u.coerceBooleanProperty(e)},enumerable:!0,configurable:!0}),n.prototype.ngOnInit=function(){this.ngControl=this.injector.get(i.NgControl),null!=this.ngControl&&(this.ngControl.valueAccessor=this),this.kvListFormGroup=this.fb.group({}),this.kvListFormGroup.addControl("keyVals",this.fb.array([]))},n.prototype.keyValsFormArray=function(){return this.kvListFormGroup.get("keyVals")},n.prototype.registerOnChange=function(e){this.propagateChange=e},n.prototype.registerOnTouched=function(e){},n.prototype.setDisabledState=function(e){this.disabled=e,this.disabled?this.kvListFormGroup.disable({emitEvent:!1}):this.kvListFormGroup.enable({emitEvent:!1})},n.prototype.writeValue=function(e){var t,n,r=this;this.valueChangeSubscription&&this.valueChangeSubscription.unsubscribe();var a=[];if(e)try{for(var o=T(Object.keys(e)),l=o.next();!l.done;l=o.next()){var s=l.value;Object.prototype.hasOwnProperty.call(e,s)&&a.push(this.fb.group({key:[s,[i.Validators.required]],value:[e[s],[i.Validators.required]]}))}}catch(e){t={error:e}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}this.kvListFormGroup.setControl("keyVals",this.fb.array(a)),this.valueChangeSubscription=this.kvListFormGroup.valueChanges.subscribe((function(){r.updateModel()}))},n.prototype.removeKeyVal=function(e){this.kvListFormGroup.get("keyVals").removeAt(e)},n.prototype.addKeyVal=function(){this.kvListFormGroup.get("keyVals").push(this.fb.group({key:["",[i.Validators.required]],value:["",[i.Validators.required]]}))},n.prototype.validate=function(e){return!this.kvListFormGroup.get("keyVals").value.length&&this.required?{kvMapRequired:!0}:this.kvListFormGroup.valid?null:{kvFieldsRequired:!0}},n.prototype.updateModel=function(){var e=this.kvListFormGroup.get("keyVals").value;if(this.required&&!e.length||!this.kvListFormGroup.valid)this.propagateChange(null);else{var t={};e.forEach((function(e){t[e.key]=e.value})),this.propagateChange(t)}},n.ctorParameters=function(){return[{type:o.Store},{type:r.TranslateService},{type:t.Injector},{type:i.FormBuilder}]},v([t.Input(),x("design:type",Boolean)],n.prototype,"disabled",void 0),v([t.Input(),x("design:type",String)],n.prototype,"requiredText",void 0),v([t.Input(),x("design:type",String)],n.prototype,"keyText",void 0),v([t.Input(),x("design:type",String)],n.prototype,"keyRequiredText",void 0),v([t.Input(),x("design:type",String)],n.prototype,"valText",void 0),v([t.Input(),x("design:type",String)],n.prototype,"valRequiredText",void 0),v([t.Input(),x("design:type",Boolean),x("design:paramtypes",[Boolean])],n.prototype,"required",null),n=a=v([t.Component({selector:"tb-kv-map-config",template:'<section fxLayout="column" class="tb-kv-map-config" [formGroup]="kvListFormGroup">\n  <div class="header" fxFlex fxLayout="row" fxLayoutGap="8px">\n    <span class="cell" fxFlex translate>{{ keyText }}</span>\n    <span class="cell" fxFlex translate>{{ valText }}</span>\n    <span [fxShow]="!disabled" style="width: 52px;" innerHTML="&nbsp"></span>\n  </div>\n  <div class="body">\n    <div class="row" fxLayout="row" fxLayoutAlign="start center" fxLayoutGap="8px"\n         formArrayName="keyVals"\n         *ngFor="let keyValControl of keyValsFormArray().controls; let $index = index">\n      <mat-form-field fxFlex floatLabel="always" hideRequiredMarker class="cell mat-block">\n        <mat-label></mat-label>\n        <input [formControl]="keyValControl.get(\'key\')" matInput required\n               placeholder="{{ keyText | translate }}"/>\n        <mat-error *ngIf="keyValControl.get(\'key\').hasError(\'required\')">\n          {{ keyRequiredText | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex floatLabel="always" hideRequiredMarker class="cell mat-block">\n        <mat-label></mat-label>\n        <input [formControl]="keyValControl.get(\'value\')" matInput required\n               placeholder="{{ valText | translate }}"/>\n        <mat-error *ngIf="keyValControl.get(\'value\').hasError(\'required\')">\n          {{ valRequiredText | translate }}\n        </mat-error>\n      </mat-form-field>\n      <button mat-button mat-icon-button color="primary"\n              [fxShow]="!disabled"\n              type="button"\n              (click)="removeKeyVal($index)"\n              [disabled]="isLoading$ | async"\n              matTooltip="{{ \'tb.key-val.remove-entry\' | translate }}"\n              matTooltipPosition="above">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n  </div>\n  <tb-error [error]="ngControl.hasError(\'kvMapRequired\')\n                  ? translate.instant(requiredText) : \'\'"></tb-error>\n  <div style="margin-top: 8px;">\n    <button mat-button mat-raised-button color="primary"\n            [fxShow]="!disabled"\n            [disabled]="isLoading$ | async"\n            (click)="addKeyVal()"\n            type="button"\n            matTooltip="{{ \'tb.key-val.add-entry\' | translate }}"\n            matTooltipPosition="above">\n      <mat-icon>add</mat-icon>\n      {{ \'action.add\' | translate }}\n    </button>\n  </div>\n</section>\n',providers:[{provide:i.NG_VALUE_ACCESSOR,useExisting:t.forwardRef((function(){return a})),multi:!0},{provide:i.NG_VALIDATORS,useExisting:t.forwardRef((function(){return a})),multi:!0}],styles:[":host .tb-kv-map-config{margin-bottom:16px}:host .tb-kv-map-config .header{padding-left:5px;padding-right:5px;padding-bottom:5px}:host .tb-kv-map-config .header .cell{padding-left:5px;padding-right:5px;color:rgba(0,0,0,.54);font-size:12px;font-weight:700;white-space:nowrap}:host .tb-kv-map-config .body{padding-left:5px;padding-right:5px;padding-bottom:20px;max-height:300px;overflow:auto}:host .tb-kv-map-config .body .row{padding-top:5px;max-height:40px}:host .tb-kv-map-config .body .cell{padding-left:5px;padding-right:5px}:host ::ng-deep .tb-kv-map-config .body mat-form-field.cell{margin:0;max-height:40px}:host ::ng-deep .tb-kv-map-config .body mat-form-field.cell .mat-form-field-infix{border-top:0}:host ::ng-deep .tb-kv-map-config .body button.mat-button{margin:0}"]}),x("design:paramtypes",[o.Store,r.TranslateService,t.Injector,i.FormBuilder])],n)}(a.PageComponent),ve=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.directionTypes=Object.keys(a.EntitySearchDirection),r.directionTypeTranslations=a.entitySearchDirectionTranslations,r.entityType=a.EntityType,r.propagateChange=null,r}var r;return C(n,e),r=n,Object.defineProperty(n.prototype,"required",{get:function(){return this.requiredValue},set:function(e){this.requiredValue=u.coerceBooleanProperty(e)},enumerable:!0,configurable:!0}),n.prototype.ngOnInit=function(){var e=this;this.deviceRelationsQueryFormGroup=this.fb.group({fetchLastLevelOnly:[!1,[]],direction:[null,[i.Validators.required]],maxLevel:[null,[]],relationType:[null],deviceTypes:[null,[i.Validators.required]]}),this.deviceRelationsQueryFormGroup.valueChanges.subscribe((function(t){e.deviceRelationsQueryFormGroup.valid?e.propagateChange(t):e.propagateChange(null)}))},n.prototype.registerOnChange=function(e){this.propagateChange=e},n.prototype.registerOnTouched=function(e){},n.prototype.setDisabledState=function(e){this.disabled=e,this.disabled?this.deviceRelationsQueryFormGroup.disable({emitEvent:!1}):this.deviceRelationsQueryFormGroup.enable({emitEvent:!1})},n.prototype.writeValue=function(e){this.deviceRelationsQueryFormGroup.reset(e,{emitEvent:!1})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},v([t.Input(),x("design:type",Boolean)],n.prototype,"disabled",void 0),v([t.Input(),x("design:type",Boolean),x("design:paramtypes",[Boolean])],n.prototype,"required",null),n=r=v([t.Component({selector:"tb-device-relations-query-config",template:'<section fxLayout="column" [formGroup]="deviceRelationsQueryFormGroup">\n  <mat-checkbox formControlName="fetchLastLevelOnly" style="padding-bottom: 16px;">\n    {{ \'alias.last-level-relation\' | translate }}\n  </mat-checkbox>\n  <div fxLayoutGap="8px" fxLayout="row">\n    <mat-form-field class="mat-block" style="min-width: 100px;">\n      <mat-label translate>relation.direction</mat-label>\n      <mat-select required matInput formControlName="direction">\n        <mat-option *ngFor="let type of directionTypes" [value]="type">\n          {{ directionTypeTranslations.get(type) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field fxFlex floatLabel="always" class="mat-block">\n      <mat-label translate>tb.rulenode.max-relation-level</mat-label>\n      <input matInput\n             type="number"\n             min="1"\n             step="1"\n             placeholder="{{ \'tb.rulenode.unlimited-level\' | translate }}"\n             formControlName="maxLevel">\n    </mat-form-field>\n  </div>\n  <div class="mat-caption" style="color: rgba(0,0,0,0.57);" translate>relation.relation-type</div>\n  <tb-relation-type-autocomplete\n    fxFlex\n    formControlName="relationType">\n  </tb-relation-type-autocomplete>\n  <div class="mat-caption tb-required" style="color: rgba(0,0,0,0.57);" translate>device.device-types</div>\n  <tb-entity-subtype-list\n    required\n    [entityType]="entityType.DEVICE"\n    formControlName="deviceTypes">\n  </tb-entity-subtype-list>\n</section>\n',providers:[{provide:i.NG_VALUE_ACCESSOR,useExisting:t.forwardRef((function(){return r})),multi:!0}]}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.PageComponent),Fe=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.directionTypes=Object.keys(a.EntitySearchDirection),r.directionTypeTranslations=a.entitySearchDirectionTranslations,r.propagateChange=null,r}var r;return C(n,e),r=n,Object.defineProperty(n.prototype,"required",{get:function(){return this.requiredValue},set:function(e){this.requiredValue=u.coerceBooleanProperty(e)},enumerable:!0,configurable:!0}),n.prototype.ngOnInit=function(){var e=this;this.relationsQueryFormGroup=this.fb.group({fetchLastLevelOnly:[!1,[]],direction:[null,[i.Validators.required]],maxLevel:[null,[]],filters:[null]}),this.relationsQueryFormGroup.valueChanges.subscribe((function(t){e.relationsQueryFormGroup.valid?e.propagateChange(t):e.propagateChange(null)}))},n.prototype.registerOnChange=function(e){this.propagateChange=e},n.prototype.registerOnTouched=function(e){},n.prototype.setDisabledState=function(e){this.disabled=e,this.disabled?this.relationsQueryFormGroup.disable({emitEvent:!1}):this.relationsQueryFormGroup.enable({emitEvent:!1})},n.prototype.writeValue=function(e){this.relationsQueryFormGroup.reset(e||{},{emitEvent:!1})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},v([t.Input(),x("design:type",Boolean)],n.prototype,"disabled",void 0),v([t.Input(),x("design:type",Boolean),x("design:paramtypes",[Boolean])],n.prototype,"required",null),n=r=v([t.Component({selector:"tb-relations-query-config",template:'<section fxLayout="column" [formGroup]="relationsQueryFormGroup">\n  <mat-checkbox formControlName="fetchLastLevelOnly" style="padding-bottom: 16px;">\n    {{ \'alias.last-level-relation\' | translate }}\n  </mat-checkbox>\n  <div fxLayoutGap="8px" fxLayout="row">\n    <mat-form-field class="mat-block" style="min-width: 100px;">\n      <mat-label translate>relation.direction</mat-label>\n      <mat-select required matInput formControlName="direction">\n        <mat-option *ngFor="let type of directionTypes" [value]="type">\n          {{ directionTypeTranslations.get(type) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field fxFlex floatLabel="always" class="mat-block">\n      <mat-label translate>tb.rulenode.max-relation-level</mat-label>\n      <input matInput\n             type="number"\n             min="1"\n             step="1"\n             placeholder="{{ \'tb.rulenode.unlimited-level\' | translate }}"\n             formControlName="maxLevel">\n    </mat-form-field>\n  </div>\n  <div class="mat-caption" style="color: rgba(0,0,0,0.57);" translate>relation.relation-filters</div>\n  <tb-relation-filters\n    formControlName="filters"\n  ></tb-relation-filters>\n</section>\n',providers:[{provide:i.NG_VALUE_ACCESSOR,useExisting:t.forwardRef((function(){return r})),multi:!0}]}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.PageComponent),xe=function(e){function n(t,n,r,o){var i,l,s=e.call(this,t)||this;s.store=t,s.translate=n,s.truncate=r,s.fb=o,s.placeholder="tb.rulenode.message-type",s.separatorKeysCodes=[m.ENTER,m.COMMA,m.SEMICOLON],s.messageTypes=[],s.messageTypesList=[],s.searchText="",s.propagateChange=function(e){},s.messageTypeConfigForm=s.fb.group({messageType:[null]});try{for(var u=T(Object.keys(a.MessageType)),p=u.next();!p.done;p=u.next()){var d=p.value;s.messageTypesList.push({name:a.messageTypeNames.get(a.MessageType[d]),value:d})}}catch(e){i={error:e}}finally{try{p&&!p.done&&(l=u.return)&&l.call(u)}finally{if(i)throw i.error}}return s}var l;return C(n,e),l=n,Object.defineProperty(n.prototype,"required",{get:function(){return this.requiredValue},set:function(e){this.requiredValue=u.coerceBooleanProperty(e)},enumerable:!0,configurable:!0}),n.prototype.registerOnChange=function(e){this.propagateChange=e},n.prototype.registerOnTouched=function(e){},n.prototype.ngOnInit=function(){var e=this;this.filteredMessageTypes=this.messageTypeConfigForm.get("messageType").valueChanges.pipe(g.startWith(""),g.map((function(e){return e||""})),g.mergeMap((function(t){return e.fetchMessageTypes(t)})),g.share())},n.prototype.ngAfterViewInit=function(){},n.prototype.setDisabledState=function(e){this.disabled=e,this.disabled?this.messageTypeConfigForm.disable({emitEvent:!1}):this.messageTypeConfigForm.enable({emitEvent:!1})},n.prototype.writeValue=function(e){var t=this;this.searchText="",this.messageTypes.length=0,e&&e.forEach((function(e){var n=t.messageTypesList.find((function(t){return t.value===e}));n?t.messageTypes.push({name:n.name,value:n.value}):t.messageTypes.push({name:e,value:e})}))},n.prototype.displayMessageTypeFn=function(e){return e?e.name:void 0},n.prototype.textIsNotEmpty=function(e){return!!(e&&null!=e&&e.length>0)},n.prototype.createMessageType=function(e,t){e.preventDefault(),this.transformMessageType(t)},n.prototype.add=function(e){this.transformMessageType(e.value)},n.prototype.fetchMessageTypes=function(e){if(this.searchText=e,this.searchText&&this.searchText.length){var t=this.searchText.toUpperCase();return c.of(this.messageTypesList.filter((function(e){return e.name.toUpperCase().includes(t)})))}return c.of(this.messageTypesList)},n.prototype.transformMessageType=function(e){if((e||"").trim()){var t=null,n=e.trim(),r=this.messageTypesList.find((function(e){return e.name===n}));(t=r?{name:r.name,value:r.value}:{name:n,value:n})&&this.addMessageType(t)}this.clear("")},n.prototype.remove=function(e){var t=this.messageTypes.indexOf(e);t>=0&&(this.messageTypes.splice(t,1),this.updateModel())},n.prototype.selected=function(e){this.addMessageType(e.option.value),this.clear("")},n.prototype.addMessageType=function(e){-1===this.messageTypes.findIndex((function(t){return t.value===e.value}))&&(this.messageTypes.push(e),this.updateModel())},n.prototype.onFocus=function(){this.messageTypeConfigForm.get("messageType").updateValueAndValidity({onlySelf:!0,emitEvent:!0})},n.prototype.clear=function(e){var t=this;void 0===e&&(e=""),this.messageTypeInput.nativeElement.value=e,this.messageTypeConfigForm.get("messageType").patchValue(null,{emitEvent:!0}),setTimeout((function(){t.messageTypeInput.nativeElement.blur(),t.messageTypeInput.nativeElement.focus()}),0)},n.prototype.updateModel=function(){var e=this.messageTypes.map((function(e){return e.value}));this.required?(this.chipList.errorState=!e.length,this.propagateChange(e.length>0?e:null)):(this.chipList.errorState=!1,this.propagateChange(e))},n.ctorParameters=function(){return[{type:o.Store},{type:r.TranslateService},{type:a.TruncatePipe},{type:i.FormBuilder}]},v([t.Input(),x("design:type",Boolean),x("design:paramtypes",[Boolean])],n.prototype,"required",null),v([t.Input(),x("design:type",String)],n.prototype,"label",void 0),v([t.Input(),x("design:type",Object)],n.prototype,"placeholder",void 0),v([t.Input(),x("design:type",Boolean)],n.prototype,"disabled",void 0),v([t.ViewChild("chipList",{static:!1}),x("design:type",p.MatChipList)],n.prototype,"chipList",void 0),v([t.ViewChild("messageTypeAutocomplete",{static:!1}),x("design:type",d.MatAutocomplete)],n.prototype,"matAutocomplete",void 0),v([t.ViewChild("messageTypeInput",{static:!1}),x("design:type",t.ElementRef)],n.prototype,"messageTypeInput",void 0),n=l=v([t.Component({selector:"tb-message-types-config",template:'<mat-form-field [formGroup]="messageTypeConfigForm" style="width: 100%;">\n  <mat-label *ngIf="label" translate>{{ label }}</mat-label>\n  <mat-chip-list #chipList [required]="required">\n    <mat-chip\n      *ngFor="let messageType of messageTypes"\n      [selectable]="true"\n      [removable]="true"\n      (removed)="remove(messageType)">\n      {{messageType.name}}\n      <mat-icon matChipRemove>close</mat-icon>\n    </mat-chip>\n    <input matInput type="text" placeholder="{{ placeholder | translate }}"\n           style="max-width: 200px;"\n           #messageTypeInput\n           (focusin)="onFocus()"\n           formControlName="messageType"\n           matAutocompleteOrigin\n           #origin="matAutocompleteOrigin"\n           [matAutocompleteConnectedTo]="origin"\n           [matAutocomplete]="messageTypeAutocomplete"\n           [matChipInputFor]="chipList"\n           [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n           (matChipInputTokenEnd)="add($event)">\n  </mat-chip-list>\n  <mat-autocomplete #messageTypeAutocomplete="matAutocomplete"\n                    class="tb-autocomplete"\n                    (optionSelected)="selected($event)"\n                    [displayWith]="displayMessageTypeFn">\n    <mat-option *ngFor="let messageType of filteredMessageTypes | async" [value]="messageType">\n      <span [innerHTML]="messageType.name | highlight:searchText"></span>\n    </mat-option>\n    <mat-option *ngIf="(filteredMessageTypes | async)?.length === 0" [value]="null" class="tb-not-found">\n      <div class="tb-not-found-content" (click)="$event.stopPropagation()">\n        <div *ngIf="!textIsNotEmpty(searchText); else searchNotEmpty">\n          <span translate>tb.rulenode.no-message-types-found</span>\n        </div>\n        <ng-template #searchNotEmpty>\n                <span>\n                  {{ translate.get(\'tb.rulenode.no-message-type-matching\',\n                  {messageType: truncate.transform(searchText, true, 6, &apos;...&apos;)}) | async }}\n                </span>\n        </ng-template>\n        <span>\n          <a translate (click)="createMessageType($event, searchText)">tb.rulenode.create-new-message-type</a>\n        </span>\n      </div>\n    </mat-option>\n  </mat-autocomplete>\n  <mat-error *ngIf="chipList.errorState">\n    {{ \'tb.rulenode.message-types-required\' | translate }}\n  </mat-error>\n</mat-form-field>\n',providers:[{provide:i.NG_VALUE_ACCESSOR,useExisting:t.forwardRef((function(){return l})),multi:!0}]}),x("design:paramtypes",[o.Store,r.TranslateService,a.TruncatePipe,i.FormBuilder])],n)}(a.PageComponent),Te=function(){function e(){}return e=v([t.NgModule({declarations:[Ce,ve,Fe,xe],imports:[n.CommonModule,a.SharedModule,l.HomeComponentsModule],exports:[Ce,ve,Fe,xe]})],e)}(),Ie=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.unassignCustomerConfigForm},n.prototype.onConfigurationSet=function(e){this.unassignCustomerConfigForm=this.fb.group({customerNamePattern:[e?e.customerNamePattern:null,[i.Validators.required]],customerCacheExpiration:[e?e.customerCacheExpiration:null,[i.Validators.required,i.Validators.min(0)]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-un-assign-to-customer-config",template:'<section [formGroup]="unassignCustomerConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.customer-name-pattern</mat-label>\n    <input required matInput formControlName="customerNamePattern">\n    <mat-error *ngIf="unassignCustomerConfigForm.get(\'customerNamePattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.customer-name-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.customer-name-pattern-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.customer-cache-expiration</mat-label>\n    <input required type="number" min="0" step="1" matInput formControlName="customerCacheExpiration">\n    <mat-error *ngIf="unassignCustomerConfigForm.get(\'customerCacheExpiration\').hasError(\'required\')">\n      {{ \'tb.rulenode.customer-cache-expiration-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="unassignCustomerConfigForm.get(\'customerCacheExpiration\').hasError(\'min\')">\n      {{ \'tb.rulenode.customer-cache-expiration-range\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.customer-cache-expiration-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),qe=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.snsConfigForm},n.prototype.onConfigurationSet=function(e){this.snsConfigForm=this.fb.group({topicArnPattern:[e?e.topicArnPattern:null,[i.Validators.required]],accessKeyId:[e?e.accessKeyId:null,[i.Validators.required]],secretAccessKey:[e?e.secretAccessKey:null,[i.Validators.required]],region:[e?e.region:null,[i.Validators.required]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-sns-config",template:'<section [formGroup]="snsConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.topic-arn-pattern</mat-label>\n    <input required matInput formControlName="topicArnPattern">\n    <mat-error *ngIf="snsConfigForm.get(\'topicArnPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.topic-arn-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.topic-arn-pattern-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-access-key-id</mat-label>\n    <input required matInput formControlName="accessKeyId">\n    <mat-error *ngIf="snsConfigForm.get(\'accessKeyId\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-access-key-id-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-secret-access-key</mat-label>\n    <input required matInput formControlName="secretAccessKey">\n    <mat-error *ngIf="snsConfigForm.get(\'secretAccessKey\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-secret-access-key-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-region</mat-label>\n    <input required matInput formControlName="region">\n    <mat-error *ngIf="snsConfigForm.get(\'region\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-region-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Se=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.sqsQueueType=$,r.sqsQueueTypes=Object.keys($),r.sqsQueueTypeTranslationsMap=J,r}return C(n,e),n.prototype.configForm=function(){return this.sqsConfigForm},n.prototype.onConfigurationSet=function(e){this.sqsConfigForm=this.fb.group({queueType:[e?e.queueType:null,[i.Validators.required]],queueUrlPattern:[e?e.queueUrlPattern:null,[i.Validators.required]],delaySeconds:[e?e.delaySeconds:null,[i.Validators.min(0),i.Validators.max(900)]],messageAttributes:[e?e.messageAttributes:null,[]],accessKeyId:[e?e.accessKeyId:null,[i.Validators.required]],secretAccessKey:[e?e.secretAccessKey:null,[i.Validators.required]],region:[e?e.region:null,[i.Validators.required]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-sqs-config",template:'<section [formGroup]="sqsConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.queue-type</mat-label>\n    <mat-select formControlName="queueType" required>\n      <mat-option *ngFor="let type of sqsQueueTypes" [value]="type">\n        {{ sqsQueueTypeTranslationsMap.get(type) | translate }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.queue-url-pattern</mat-label>\n    <input required matInput formControlName="queueUrlPattern">\n    <mat-error *ngIf="sqsConfigForm.get(\'queueUrlPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.queue-url-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.queue-url-pattern-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <mat-form-field *ngIf="sqsConfigForm.get(\'queueType\').value === sqsQueueType.STANDARD" class="mat-block">\n    <mat-label translate>tb.rulenode.delay-seconds</mat-label>\n    <input required type="number" min="0" max="900" step="1" matInput formControlName="delaySeconds">\n    <mat-error *ngIf="sqsConfigForm.get(\'delaySeconds\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-delay-seconds-message\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="sqsConfigForm.get(\'delaySeconds\').hasError(\'max\')">\n      {{ \'tb.rulenode.max-delay-seconds-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <label translate class="tb-title">tb.rulenode.message-attributes</label>\n  <div class="tb-hint" innerHTML="{{ \'tb.rulenode.message-attributes-hint\' | translate}}}"></div>\n  <tb-kv-map-config\n    required="false"\n    formControlName="messageAttributes"\n    keyText="tb.rulenode.name"\n    keyRequiredText="tb.rulenode.name-required"\n    valText="tb.rulenode.value"\n    valRequiredText="tb.rulenode.value-required">\n  </tb-kv-map-config>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-access-key-id</mat-label>\n    <input required matInput formControlName="accessKeyId">\n    <mat-error *ngIf="sqsConfigForm.get(\'accessKeyId\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-access-key-id-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-secret-access-key</mat-label>\n    <input required matInput formControlName="secretAccessKey">\n    <mat-error *ngIf="sqsConfigForm.get(\'secretAccessKey\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-secret-access-key-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-region</mat-label>\n    <input required matInput formControlName="region">\n    <mat-error *ngIf="sqsConfigForm.get(\'region\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-region-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Ee=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.pubSubConfigForm},n.prototype.onConfigurationSet=function(e){this.pubSubConfigForm=this.fb.group({projectId:[e?e.projectId:null,[i.Validators.required]],topicName:[e?e.topicName:null,[i.Validators.required]],serviceAccountKey:[e?e.serviceAccountKey:null,[i.Validators.required]],serviceAccountKeyFileName:[e?e.serviceAccountKeyFileName:null,[i.Validators.required]],messageAttributes:[e?e.messageAttributes:null,[]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-pub-sub-config",template:'<section [formGroup]="pubSubConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.gcp-project-id</mat-label>\n    <input required matInput formControlName="projectId">\n    <mat-error *ngIf="pubSubConfigForm.get(\'projectId\').hasError(\'required\')">\n      {{ \'tb.rulenode.gcp-project-id-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.pubsub-topic-name</mat-label>\n    <input required matInput formControlName="topicName">\n    <mat-error *ngIf="pubSubConfigForm.get(\'topicName\').hasError(\'required\')">\n      {{ \'tb.rulenode.pubsub-topic-name-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <tb-file-input style="padding-bottom: 24px;"\n                 formControlName="serviceAccountKey"\n                 [existingFileName]="pubSubConfigForm.get(\'serviceAccountKeyFileName\').value"\n                 (fileNameChanged)="pubSubConfigForm.get(\'serviceAccountKeyFileName\').setValue($event)"\n                 required\n                 requiredAsError\n                 label="{{\'tb.rulenode.gcp-service-account-key\' | translate}}"\n                 noFileText="tb.rulenode.no-file"\n                 dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n  </tb-file-input>\n  <label translate class="tb-title">tb.rulenode.message-attributes</label>\n  <div class="tb-hint" innerHTML="{{ \'tb.rulenode.message-attributes-hint\' | translate}}"></div>\n  <tb-kv-map-config\n    required="false"\n    formControlName="messageAttributes"\n    keyText="tb.rulenode.name"\n    keyRequiredText="tb.rulenode.name-required"\n    valText="tb.rulenode.value"\n    valRequiredText="tb.rulenode.value-required">\n  </tb-kv-map-config>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Ne=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.ackValues=["all","-1","0","1"],r.ToByteStandartCharsetTypesValues=pe,r.ToByteStandartCharsetTypeTranslationMap=de,r}return C(n,e),n.prototype.configForm=function(){return this.kafkaConfigForm},n.prototype.onConfigurationSet=function(e){this.kafkaConfigForm=this.fb.group({topicPattern:[e?e.topicPattern:null,[i.Validators.required]],bootstrapServers:[e?e.bootstrapServers:null,[i.Validators.required]],retries:[e?e.retries:null,[i.Validators.min(0)]],batchSize:[e?e.batchSize:null,[i.Validators.min(0)]],linger:[e?e.linger:null,[i.Validators.min(0)]],bufferMemory:[e?e.bufferMemory:null,[i.Validators.min(0)]],acks:[e?e.acks:null,[i.Validators.required]],keySerializer:[e?e.keySerializer:null,[i.Validators.required]],valueSerializer:[e?e.valueSerializer:null,[i.Validators.required]],otherProperties:[e?e.otherProperties:null,[]],addMetadataKeyValuesAsKafkaHeaders:[!!e&&e.addMetadataKeyValuesAsKafkaHeaders,[]],kafkaHeadersCharset:[e?e.kafkaHeadersCharset:null,[]]})},n.prototype.validatorTriggers=function(){return["addMetadataKeyValuesAsKafkaHeaders"]},n.prototype.updateValidators=function(e){this.kafkaConfigForm.get("addMetadataKeyValuesAsKafkaHeaders").value?this.kafkaConfigForm.get("kafkaHeadersCharset").setValidators([i.Validators.required]):this.kafkaConfigForm.get("kafkaHeadersCharset").setValidators([]),this.kafkaConfigForm.get("kafkaHeadersCharset").updateValueAndValidity({emitEvent:e})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-kafka-config",template:'<section [formGroup]="kafkaConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.topic-pattern</mat-label>\n    <input required matInput formControlName="topicPattern">\n    <mat-error *ngIf="kafkaConfigForm.get(\'topicPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.topic-pattern-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.bootstrap-servers</mat-label>\n    <input required matInput formControlName="bootstrapServers">\n    <mat-error *ngIf="kafkaConfigForm.get(\'bootstrapServers\').hasError(\'required\')">\n      {{ \'tb.rulenode.bootstrap-servers-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.retries</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="retries">\n    <mat-error *ngIf="kafkaConfigForm.get(\'retries\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-retries-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.batch-size-bytes</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="batchSize">\n    <mat-error *ngIf="kafkaConfigForm.get(\'batchSize\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-batch-size-bytes-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.linger-ms</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="linger">\n    <mat-error *ngIf="kafkaConfigForm.get(\'linger\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-linger-ms-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.buffer-memory-bytes</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="bufferMemory">\n    <mat-error *ngIf="kafkaConfigForm.get(\'bufferMemory\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-buffer-memory-bytes-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.acks</mat-label>\n    <mat-select formControlName="acks" required>\n      <mat-option *ngFor="let ackValue of ackValues" [value]="ackValue">\n        {{ ackValue }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.key-serializer</mat-label>\n    <input required matInput formControlName="keySerializer">\n    <mat-error *ngIf="kafkaConfigForm.get(\'keySerializer\').hasError(\'required\')">\n      {{ \'tb.rulenode.key-serializer-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.value-serializer</mat-label>\n    <input required matInput formControlName="valueSerializer">\n    <mat-error *ngIf="kafkaConfigForm.get(\'valueSerializer\').hasError(\'required\')">\n      {{ \'tb.rulenode.value-serializer-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <label translate class="tb-title">tb.rulenode.other-properties</label>\n  <tb-kv-map-config\n    required="false"\n    formControlName="otherProperties"\n    keyText="tb.rulenode.key"\n    keyRequiredText="tb.rulenode.key-required"\n    valText="tb.rulenode.value"\n    valRequiredText="tb.rulenode.value-required">\n  </tb-kv-map-config>\n  <mat-checkbox fxFlex formControlName="addMetadataKeyValuesAsKafkaHeaders" style="padding-top: 16px;">\n    {{ \'tb.rulenode.add-metadata-key-values-as-kafka-headers\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" translate>tb.rulenode.add-metadata-key-values-as-kafka-headers-hint</div>\n  <mat-form-field fxFlex class="mat-block" *ngIf="kafkaConfigForm.get(\'addMetadataKeyValuesAsKafkaHeaders\').value">\n    <mat-label translate>tb.rulenode.charset-encoding</mat-label>\n    <mat-select formControlName="kafkaHeadersCharset" required>\n      <mat-option *ngFor="let charset of ToByteStandartCharsetTypesValues" [value]="charset">\n        {{ ToByteStandartCharsetTypeTranslationMap.get(charset) | translate }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Ve=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.allMqttCredentialsTypes=Z,r.mqttCredentialsTypeTranslationsMap=X,r}return C(n,e),n.prototype.configForm=function(){return this.mqttConfigForm},n.prototype.onConfigurationSet=function(e){this.mqttConfigForm=this.fb.group({topicPattern:[e?e.topicPattern:null,[i.Validators.required]],host:[e?e.host:null,[i.Validators.required]],port:[e?e.port:null,[i.Validators.required,i.Validators.min(1),i.Validators.max(65535)]],connectTimeoutSec:[e?e.connectTimeoutSec:null,[i.Validators.required,i.Validators.min(1),i.Validators.max(200)]],clientId:[e?e.clientId:null,[]],cleanSession:[!!e&&e.cleanSession,[]],ssl:[!!e&&e.ssl,[]],credentials:this.fb.group({type:[e&&e.credentials?e.credentials.type:null,[i.Validators.required]],username:[e&&e.credentials?e.credentials.username:null,[]],password:[e&&e.credentials?e.credentials.password:null,[]],caCert:[e&&e.credentials?e.credentials.caCert:null,[]],caCertFileName:[e&&e.credentials?e.credentials.caCertFileName:null,[]],privateKey:[e&&e.credentials?e.credentials.privateKey:null,[]],privateKeyFileName:[e&&e.credentials?e.credentials.privateKeyFileName:null,[]],cert:[e&&e.credentials?e.credentials.cert:null,[]],certFileName:[e&&e.credentials?e.credentials.certFileName:null,[]]})})},n.prototype.prepareOutputConfig=function(e){var t=e.credentials.type;switch(t){case"anonymous":e.credentials={type:t};break;case"basic":e.credentials={type:t,username:e.credentials.username,password:e.credentials.password};break;case"cert.PEM":delete e.credentials.username}return e},n.prototype.validatorTriggers=function(){return["credentials.type"]},n.prototype.updateValidators=function(e){var t=this.mqttConfigForm.get("credentials"),n=t.get("type").value;switch(e&&t.reset({type:n},{emitEvent:!1}),t.get("username").setValidators([]),t.get("password").setValidators([]),t.get("caCert").setValidators([]),t.get("caCertFileName").setValidators([]),t.get("privateKey").setValidators([]),t.get("privateKeyFileName").setValidators([]),t.get("cert").setValidators([]),t.get("certFileName").setValidators([]),n){case"anonymous":break;case"basic":t.get("username").setValidators([i.Validators.required]),t.get("password").setValidators([i.Validators.required]);break;case"cert.PEM":t.get("caCert").setValidators([i.Validators.required]),t.get("caCertFileName").setValidators([i.Validators.required]),t.get("privateKey").setValidators([i.Validators.required]),t.get("privateKeyFileName").setValidators([i.Validators.required]),t.get("cert").setValidators([i.Validators.required]),t.get("certFileName").setValidators([i.Validators.required])}t.get("username").updateValueAndValidity({emitEvent:e}),t.get("password").updateValueAndValidity({emitEvent:e}),t.get("caCert").updateValueAndValidity({emitEvent:e}),t.get("caCertFileName").updateValueAndValidity({emitEvent:e}),t.get("privateKey").updateValueAndValidity({emitEvent:e}),t.get("privateKeyFileName").updateValueAndValidity({emitEvent:e}),t.get("cert").updateValueAndValidity({emitEvent:e}),t.get("certFileName").updateValueAndValidity({emitEvent:e})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-mqtt-config",template:'<section [formGroup]="mqttConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.topic-pattern</mat-label>\n    <input required matInput formControlName="topicPattern">\n    <mat-error *ngIf="mqttConfigForm.get(\'topicPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.topic-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.mqtt-topic-pattern-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <div fxFlex fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex="60" class="mat-block">\n      <mat-label translate>tb.rulenode.host</mat-label>\n      <input required matInput formControlName="host">\n      <mat-error *ngIf="mqttConfigForm.get(\'host\').hasError(\'required\')">\n        {{ \'tb.rulenode.host-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex="40" class="mat-block">\n      <mat-label translate>tb.rulenode.port</mat-label>\n      <input required type="number" step="1" min="1" max="65535" matInput formControlName="port">\n      <mat-error *ngIf="mqttConfigForm.get(\'port\').hasError(\'required\')">\n        {{ \'tb.rulenode.port-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="mqttConfigForm.get(\'port\').hasError(\'min\')">\n        {{ \'tb.rulenode.port-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="mqttConfigForm.get(\'port\').hasError(\'max\')">\n        {{ \'tb.rulenode.port-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex="40" class="mat-block">\n      <mat-label translate>tb.rulenode.connect-timeout</mat-label>\n      <input required type="number" step="1" min="1" max="200" matInput formControlName="connectTimeoutSec">\n      <mat-error *ngIf="mqttConfigForm.get(\'connectTimeoutSec\').hasError(\'required\')">\n        {{ \'tb.rulenode.connect-timeout-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="mqttConfigForm.get(\'connectTimeoutSec\').hasError(\'min\')">\n        {{ \'tb.rulenode.connect-timeout-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="mqttConfigForm.get(\'connectTimeoutSec\').hasError(\'max\')">\n        {{ \'tb.rulenode.connect-timeout-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.client-id</mat-label>\n    <input matInput formControlName="clientId">\n  </mat-form-field>\n  <mat-checkbox formControlName="cleanSession" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.clean-session\' | translate }}\n  </mat-checkbox>\n  <mat-checkbox formControlName="ssl" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.enable-ssl\' | translate }}\n  </mat-checkbox>\n  <mat-expansion-panel class="tb-mqtt-credentials-panel-group">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.credentials</mat-panel-title>\n      <mat-panel-description>\n        {{ mqttCredentialsTypeTranslationsMap.get(mqttConfigForm.get(\'credentials\').get(\'type\').value) | translate }}\n      </mat-panel-description>\n    </mat-expansion-panel-header>\n    <section formGroupName="credentials" fxLayout="column">\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.credentials-type</mat-label>\n        <mat-select formControlName="type" required>\n          <mat-option *ngFor="let credentialsType of allMqttCredentialsTypes" [value]="credentialsType">\n            {{ mqttCredentialsTypeTranslationsMap.get(credentialsType) | translate }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf="mqttConfigForm.get(\'credentials\').get(\'type\').hasError(\'required\')">\n          {{ \'tb.rulenode.credentials-type-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <section fxLayout="column" [ngSwitch]="mqttConfigForm.get(\'credentials\').get(\'type\').value">\n        <ng-template ngSwitchCase="anonymous">\n        </ng-template>\n        <ng-template ngSwitchCase="basic">\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.username</mat-label>\n            <input required matInput formControlName="username">\n            <mat-error *ngIf="mqttConfigForm.get(\'credentials\').get(\'username\').hasError(\'required\')">\n              {{ \'tb.rulenode.username-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.password</mat-label>\n            <input type="password" required matInput formControlName="password">\n            <mat-error *ngIf="mqttConfigForm.get(\'credentials\').get(\'password\').hasError(\'required\')">\n              {{ \'tb.rulenode.password-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n        </ng-template>\n        <ng-template ngSwitchCase="cert.PEM">\n          <tb-file-input formControlName="caCert"\n                         inputId="caCertSelect"\n                         [existingFileName]="mqttConfigForm.get(\'credentials\').get(\'caCertFileName\').value"\n                         (fileNameChanged)="mqttConfigForm.get(\'credentials\').get(\'caCertFileName\').setValue($event)"\n                         required\n                         requiredAsError\n                         label="{{\'tb.rulenode.ca-cert\' | translate}}"\n                         noFileText="tb.rulenode.no-file"\n                         dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n          </tb-file-input>\n          <tb-file-input formControlName="cert"\n                         inputId="CertSelect"\n                         [existingFileName]="mqttConfigForm.get(\'credentials\').get(\'certFileName\').value"\n                         (fileNameChanged)="mqttConfigForm.get(\'credentials\').get(\'certFileName\').setValue($event)"\n                         required\n                         requiredAsError\n                         label="{{\'tb.rulenode.cert\' | translate}}"\n                         noFileText="tb.rulenode.no-file"\n                         dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n          </tb-file-input>\n          <tb-file-input style="padding-bottom: 8px;"\n                         formControlName="privateKey"\n                         inputId="privateKeySelect"\n                         [existingFileName]="mqttConfigForm.get(\'credentials\').get(\'privateKeyFileName\').value"\n                         (fileNameChanged)="mqttConfigForm.get(\'credentials\').get(\'privateKeyFileName\').setValue($event)"\n                         required\n                         requiredAsError\n                         label="{{\'tb.rulenode.private-key\' | translate}}"\n                         noFileText="tb.rulenode.no-file"\n                         dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n          </tb-file-input>\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.private-key-password</mat-label>\n            <input type="password" matInput formControlName="password">\n          </mat-form-field>\n        </ng-template>\n      </section>\n    </section>\n  </mat-expansion-panel>\n</section>\n',styles:[":host .tb-mqtt-credentials-panel-group{margin:0 6px}"]}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Ae=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.messageProperties=[null,"BASIC","TEXT_PLAIN","MINIMAL_BASIC","MINIMAL_PERSISTENT_BASIC","PERSISTENT_BASIC","PERSISTENT_TEXT_PLAIN"],r}return C(n,e),n.prototype.configForm=function(){return this.rabbitMqConfigForm},n.prototype.onConfigurationSet=function(e){this.rabbitMqConfigForm=this.fb.group({exchangeNamePattern:[e?e.exchangeNamePattern:null,[]],routingKeyPattern:[e?e.routingKeyPattern:null,[]],messageProperties:[e?e.messageProperties:null,[]],host:[e?e.host:null,[i.Validators.required]],port:[e?e.port:null,[i.Validators.required,i.Validators.min(1),i.Validators.max(65535)]],virtualHost:[e?e.virtualHost:null,[]],username:[e?e.username:null,[]],password:[e?e.password:null,[]],automaticRecoveryEnabled:[!!e&&e.automaticRecoveryEnabled,[]],connectionTimeout:[e?e.connectionTimeout:null,[i.Validators.min(0)]],handshakeTimeout:[e?e.handshakeTimeout:null,[i.Validators.min(0)]],clientProperties:[e?e.clientProperties:null,[]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-rabbit-mq-config",template:'<section [formGroup]="rabbitMqConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.exchange-name-pattern</mat-label>\n    <input matInput formControlName="exchangeNamePattern">\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.routing-key-pattern</mat-label>\n    <input matInput formControlName="routingKeyPattern">\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.message-properties</mat-label>\n    <mat-select formControlName="messageProperties">\n      <mat-option *ngFor="let property of messageProperties" [value]="property">\n        {{ property }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <div fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex="100" fxFlex.gt-sm="60" class="mat-block">\n      <mat-label translate>tb.rulenode.host</mat-label>\n      <input required matInput formControlName="host">\n      <mat-error *ngIf="rabbitMqConfigForm.get(\'host\').hasError(\'required\')">\n        {{ \'tb.rulenode.host-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex="100" fxFlex.gt-sm="40" class="mat-block">\n      <mat-label translate>tb.rulenode.port</mat-label>\n      <input required type="number" step="1" min="1" max="65535" matInput formControlName="port">\n      <mat-error *ngIf="rabbitMqConfigForm.get(\'port\').hasError(\'required\')">\n        {{ \'tb.rulenode.port-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="rabbitMqConfigForm.get(\'port\').hasError(\'min\')">\n        {{ \'tb.rulenode.port-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="rabbitMqConfigForm.get(\'port\').hasError(\'max\')">\n        {{ \'tb.rulenode.port-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.virtual-host</mat-label>\n    <input matInput formControlName="virtualHost">\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.username</mat-label>\n    <input matInput formControlName="username">\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.password</mat-label>\n    <input type="password" matInput formControlName="password">\n  </mat-form-field>\n  <mat-checkbox formControlName="automaticRecoveryEnabled" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.automatic-recovery\' | translate }}\n  </mat-checkbox>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.connection-timeout-ms</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="connectionTimeout">\n    <mat-error *ngIf="rabbitMqConfigForm.get(\'connectionTimeout\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-connection-timeout-ms-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.handshake-timeout-ms</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="handshakeTimeout">\n    <mat-error *ngIf="rabbitMqConfigForm.get(\'handshakeTimeout\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-handshake-timeout-ms-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <label translate class="tb-title">tb.rulenode.client-properties</label>\n  <tb-kv-map-config\n    required="false"\n    formControlName="clientProperties"\n    keyText="tb.rulenode.key"\n    keyRequiredText="tb.rulenode.key-required"\n    valText="tb.rulenode.value"\n    valRequiredText="tb.rulenode.value-required">\n  </tb-kv-map-config>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),ke=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.proxySchemes=["http","https"],r.httpRequestTypes=Object.keys(Y),r}return C(n,e),n.prototype.configForm=function(){return this.restApiCallConfigForm},n.prototype.onConfigurationSet=function(e){this.restApiCallConfigForm=this.fb.group({restEndpointUrlPattern:[e?e.restEndpointUrlPattern:null,[i.Validators.required]],requestMethod:[e?e.requestMethod:null,[i.Validators.required]],useSimpleClientHttpFactory:[!!e&&e.useSimpleClientHttpFactory,[]],enableProxy:[!!e&&e.enableProxy,[]],useSystemProxyProperties:[!!e&&e.enableProxy,[]],proxyScheme:[e?e.proxyHost:null,[]],proxyHost:[e?e.proxyHost:null,[]],proxyPort:[e?e.proxyPort:null,[]],proxyUser:[e?e.proxyUser:null,[]],proxyPassword:[e?e.proxyPassword:null,[]],readTimeoutMs:[e?e.readTimeoutMs:null,[]],maxParallelRequestsCount:[e?e.maxParallelRequestsCount:null,[i.Validators.min(0)]],headers:[e?e.headers:null,[]],useRedisQueueForMsgPersistence:[!!e&&e.useRedisQueueForMsgPersistence,[]],trimQueue:[!!e&&e.trimQueue,[]],maxQueueSize:[e?e.maxQueueSize:null,[]]})},n.prototype.validatorTriggers=function(){return["useSimpleClientHttpFactory","useRedisQueueForMsgPersistence","enableProxy","useSystemProxyProperties"]},n.prototype.updateValidators=function(e){var t=this.restApiCallConfigForm.get("useSimpleClientHttpFactory").value,n=this.restApiCallConfigForm.get("useRedisQueueForMsgPersistence").value,r=this.restApiCallConfigForm.get("enableProxy").value,a=this.restApiCallConfigForm.get("useSystemProxyProperties").value;r&&!a?(this.restApiCallConfigForm.get("proxyHost").setValidators(r?[i.Validators.required]:[]),this.restApiCallConfigForm.get("proxyPort").setValidators(r?[i.Validators.required,i.Validators.min(1),i.Validators.max(65535)]:[])):(this.restApiCallConfigForm.get("proxyHost").setValidators([]),this.restApiCallConfigForm.get("proxyPort").setValidators([]),t?this.restApiCallConfigForm.get("readTimeoutMs").setValidators([]):this.restApiCallConfigForm.get("readTimeoutMs").setValidators([i.Validators.min(0)])),n?this.restApiCallConfigForm.get("maxQueueSize").setValidators([i.Validators.min(0)]):this.restApiCallConfigForm.get("maxQueueSize").setValidators([]),this.restApiCallConfigForm.get("readTimeoutMs").updateValueAndValidity({emitEvent:e}),this.restApiCallConfigForm.get("maxQueueSize").updateValueAndValidity({emitEvent:e}),this.restApiCallConfigForm.get("proxyHost").updateValueAndValidity({emitEvent:e}),this.restApiCallConfigForm.get("proxyPort").updateValueAndValidity({emitEvent:e})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-rest-api-call-config",template:'<section [formGroup]="restApiCallConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.endpoint-url-pattern</mat-label>\n    <input required matInput formControlName="restEndpointUrlPattern">\n    <mat-error *ngIf="restApiCallConfigForm.get(\'restEndpointUrlPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.endpoint-url-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.endpoint-url-pattern-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.request-method</mat-label>\n    <mat-select formControlName="requestMethod">\n      <mat-option *ngFor="let requestType of httpRequestTypes" [value]="requestType">\n        {{ requestType }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-checkbox formControlName="enableProxy" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.enable-proxy\' | translate }}\n  </mat-checkbox>\n  <mat-checkbox *ngIf="!restApiCallConfigForm.get(\'enableProxy\').value" formControlName="useSimpleClientHttpFactory" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.use-simple-client-http-factory\' | translate }}\n  </mat-checkbox>\n  <div *ngIf="restApiCallConfigForm.get(\'enableProxy\').value">\n    <mat-checkbox formControlName="useSystemProxyProperties" style="padding-bottom: 16px;">\n      {{ \'tb.rulenode.use-system-proxy-properties\' | translate }}\n    </mat-checkbox>\n    <div *ngIf="!restApiCallConfigForm.get(\'useSystemProxyProperties\').value">\n      <div fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n        <mat-form-field class="mat-block" fxFlex="100" fxFlex.gt-sm="10">\n          <mat-label translate>tb.rulenode.proxy-scheme</mat-label>\n          <mat-select formControlName="proxyScheme">\n            <mat-option *ngFor="let proxyScheme of proxySchemes" [value]="proxyScheme">\n              {{ proxyScheme }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field class="md-block" fxFlex="100" fxFlex.gt-sm="50">\n          <mat-label translate>tb.rulenode.proxy-host</mat-label>\n          <input matInput required formControlName="proxyHost">\n          <mat-error *ngIf="restApiCallConfigForm.get(\'proxyHost\').hasError(\'required\')">\n            {{ \'tb.rulenode.proxy-host-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class="mat-block" fxFlex="100" fxFlex.gt-sm="40">\n          <mat-label translate>tb.rulenode.proxy-port</mat-label>\n          <input matInput required formControlName="proxyPort" type="number" step="1">\n          <mat-error *ngIf="restApiCallConfigForm.get(\'proxyPort\').hasError(\'required\')">\n            {{ \'tb.rulenode.proxy-port-required\' | translate }}\n          </mat-error>\n          <mat-error\n            *ngIf="restApiCallConfigForm.get(\'proxyPort\').hasError(\'min\') || restApiCallConfigForm.get(\'proxyPort\').hasError(\'max\')">\n            {{ \'tb.rulenode.proxy-port-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.proxy-user</mat-label>\n        <input matInput formControlName="proxyUser">\n      </mat-form-field>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.proxy-password</mat-label>\n        <input matInput formControlName="proxyPassword">\n      </mat-form-field>\n    </div>\n  </div>\n  <mat-form-field *ngIf="!restApiCallConfigForm.get(\'useSimpleClientHttpFactory\').value || restApiCallConfigForm.get(\'enableProxy\').value" class="mat-block"\n                  style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.read-timeout</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="readTimeoutMs">\n    <mat-hint innerHTML="{{ \'tb.rulenode.read-timeout-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.max-parallel-requests-count</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="maxParallelRequestsCount">\n    <mat-hint innerHTML="{{ \'tb.rulenode.max-parallel-requests-count-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <label translate class="tb-title">tb.rulenode.headers</label>\n  <div class="tb-hint" innerHTML="{{ \'tb.rulenode.headers-hint\' | translate }}"></div>\n  <tb-kv-map-config\n    required="false"\n    formControlName="headers"\n    keyText="tb.rulenode.header"\n    keyRequiredText="tb.rulenode.header-required"\n    valText="tb.rulenode.value"\n    valRequiredText="tb.rulenode.value-required">\n  </tb-kv-map-config>\n  <mat-checkbox formControlName="useRedisQueueForMsgPersistence" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.use-redis-queue\' | translate }}\n  </mat-checkbox>\n  <div fxLayout="column" *ngIf="restApiCallConfigForm.get(\'useRedisQueueForMsgPersistence\').value === true">\n    <mat-checkbox formControlName="trimQueue" style="padding-bottom: 16px;">\n      {{ \'tb.rulenode.trim-redis-queue\' | translate }}\n    </mat-checkbox>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.rulenode.redis-queue-max-size</mat-label>\n      <input type="number" step="1" min="0" matInput formControlName="maxQueueSize">\n    </mat-form-field>\n  </div>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Le=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.smtpProtocols=["smtp","smtps"],r.tlsVersions=["TLSv1","TLSv1.1","TLSv1.2","TLSv1.3"],r}return C(n,e),n.prototype.configForm=function(){return this.sendEmailConfigForm},n.prototype.onConfigurationSet=function(e){this.sendEmailConfigForm=this.fb.group({useSystemSmtpSettings:[!!e&&e.useSystemSmtpSettings,[]],smtpProtocol:[e?e.smtpProtocol:null,[]],smtpHost:[e?e.smtpHost:null,[]],smtpPort:[e?e.smtpPort:null,[]],timeout:[e?e.timeout:null,[]],enableTls:[!!e&&e.enableTls,[]],tlsVersion:[e?e.tlsVersion:null,[]],enableProxy:[!!e&&e.enableProxy,[]],proxyHost:[e?e.proxyHost:null,[]],proxyPort:[e?e.proxyPort:null,[]],proxyUser:[e?e.proxyUser:null,[]],proxyPassword:[e?e.proxyPassword:null,[]],username:[e?e.username:null,[]],password:[e?e.password:null,[]]})},n.prototype.validatorTriggers=function(){return["useSystemSmtpSettings","enableProxy"]},n.prototype.updateValidators=function(e){var t=this.sendEmailConfigForm.get("useSystemSmtpSettings").value,n=this.sendEmailConfigForm.get("enableProxy").value;t?(this.sendEmailConfigForm.get("smtpProtocol").setValidators([]),this.sendEmailConfigForm.get("smtpHost").setValidators([]),this.sendEmailConfigForm.get("smtpPort").setValidators([]),this.sendEmailConfigForm.get("timeout").setValidators([]),this.sendEmailConfigForm.get("proxyHost").setValidators([]),this.sendEmailConfigForm.get("proxyPort").setValidators([])):(this.sendEmailConfigForm.get("smtpProtocol").setValidators([i.Validators.required]),this.sendEmailConfigForm.get("smtpHost").setValidators([i.Validators.required]),this.sendEmailConfigForm.get("smtpPort").setValidators([i.Validators.required,i.Validators.min(1),i.Validators.max(65535)]),this.sendEmailConfigForm.get("timeout").setValidators([i.Validators.required,i.Validators.min(0)]),this.sendEmailConfigForm.get("proxyHost").setValidators(n?[i.Validators.required]:[]),this.sendEmailConfigForm.get("proxyPort").setValidators(n?[i.Validators.required,i.Validators.min(1),i.Validators.max(65535)]:[])),this.sendEmailConfigForm.get("smtpProtocol").updateValueAndValidity({emitEvent:e}),this.sendEmailConfigForm.get("smtpHost").updateValueAndValidity({emitEvent:e}),this.sendEmailConfigForm.get("smtpPort").updateValueAndValidity({emitEvent:e}),this.sendEmailConfigForm.get("timeout").updateValueAndValidity({emitEvent:e}),this.sendEmailConfigForm.get("proxyHost").updateValueAndValidity({emitEvent:e}),this.sendEmailConfigForm.get("proxyPort").updateValueAndValidity({emitEvent:e})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-send-email-config",template:'<section [formGroup]="sendEmailConfigForm" fxLayout="column">\n  <mat-checkbox formControlName="useSystemSmtpSettings" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.use-system-smtp-settings\' | translate }}\n  </mat-checkbox>\n  <section fxLayout="column" *ngIf="sendEmailConfigForm.get(\'useSystemSmtpSettings\').value === false">\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.rulenode.smtp-protocol</mat-label>\n      <mat-select formControlName="smtpProtocol">\n        <mat-option *ngFor="let smtpProtocol of smtpProtocols" [value]="smtpProtocol">\n          {{ smtpProtocol.toUpperCase() }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <div fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n      <mat-form-field fxFlex="100" fxFlex.gt-sm="60" class="mat-block">\n        <mat-label translate>tb.rulenode.smtp-host</mat-label>\n        <input required matInput formControlName="smtpHost">\n        <mat-error *ngIf="sendEmailConfigForm.get(\'smtpHost\').hasError(\'required\')">\n          {{ \'tb.rulenode.smtp-host-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex="100" fxFlex.gt-sm="40" class="mat-block">\n        <mat-label translate>tb.rulenode.smtp-port</mat-label>\n        <input required type="number" step="1" min="1" max="65535" matInput formControlName="smtpPort">\n        <mat-error *ngIf="sendEmailConfigForm.get(\'smtpPort\').hasError(\'required\')">\n          {{ \'tb.rulenode.smtp-port-required\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="sendEmailConfigForm.get(\'smtpPort\').hasError(\'min\')">\n          {{ \'tb.rulenode.smtp-port-range\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="sendEmailConfigForm.get(\'smtpPort\').hasError(\'max\')">\n          {{ \'tb.rulenode.smtp-port-range\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.rulenode.timeout-msec</mat-label>\n      <input required type="number" step="1" min="0" matInput formControlName="timeout">\n      <mat-error *ngIf="sendEmailConfigForm.get(\'timeout\').hasError(\'required\')">\n        {{ \'tb.rulenode.timeout-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="sendEmailConfigForm.get(\'timeout\').hasError(\'min\')">\n        {{ \'tb.rulenode.min-timeout-msec-message\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-checkbox formControlName="enableTls" style="padding-bottom: 16px;">\n      {{ \'tb.rulenode.enable-tls\' | translate }}\n    </mat-checkbox>\n    <mat-form-field class="mat-block" *ngIf="sendEmailConfigForm.get(\'enableTls\').value === true">\n      <mat-label translate>tb.rulenode.tls-version</mat-label>\n      <mat-select formControlName="tlsVersion">\n        <mat-option *ngFor="let tlsVersion of tlsVersions" [value]="tlsVersion">\n          {{ tlsVersion }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <tb-checkbox formControlName="enableProxy" style="display: block; padding-bottom: 16px;">\n      {{ \'tb.rulenode.enable-proxy\' | translate }}\n    </tb-checkbox>\n    <div *ngIf="sendEmailConfigForm.get(\'enableProxy\').value">\n      <div fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n        <mat-form-field class="mat-block" fxFlex="100" fxFlex.gt-sm="60">\n          <mat-label translate>tb.rulenode.proxy-host</mat-label>\n          <input matInput required formControlName="proxyHost">\n          <mat-error *ngIf="sendEmailConfigForm.get(\'proxyHost\').hasError(\'required\')">\n            {{ \'tb.rulenode.proxy-host-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class="mat-block" fxFlex="100" fxFlex.gt-sm="40">\n          <mat-label translate>tb.rulenode.proxy-port</mat-label>\n          <input matInput required formControlName="proxyPort" type="number" step="1" min="1" max="65535">\n          <mat-error *ngIf="sendEmailConfigForm.get(\'proxyPort\').hasError(\'required\')">\n            {{ \'tb.rulenode.proxy-port-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="sendEmailConfigForm.get(\'proxyPort\').hasError(\'min\') || sendEmailConfigForm.get(\'proxyPort\').hasError(\'max\')">\n            {{ \'tb.rulenode.proxy-port-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.proxy-user</mat-label>\n        <input matInput formControlName="proxyUser">\n      </mat-form-field>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.proxy-password</mat-label>\n        <input matInput formControlName="proxyPassword">\n      </mat-form-field>\n    </div>\n    <mat-form-field class="mat-block" floatLabel="always">\n      <mat-label translate>tb.rulenode.username</mat-label>\n      <input matInput placeholder="{{ \'tb.rulenode.enter-username\' | translate }}" formControlName="username">\n    </mat-form-field>\n    <mat-form-field class="mat-block" floatLabel="always">\n      <mat-label translate>tb.rulenode.password</mat-label>\n      <input matInput type="password" placeholder="{{ \'tb.rulenode.enter-password\' | translate }}" formControlName="password">\n    </mat-form-field>\n  </section>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Me=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.addToGroupConfigForm},n.prototype.onConfigurationSet=function(e){this.addToGroupConfigForm=this.fb.group({groupNamePattern:[e?e.groupNamePattern:null,[i.Validators.required]],createGroupIfNotExists:[!!e&&e.createGroupIfNotExists,[]],removeFromCurrentGroups:[!!e&&e.removeFromCurrentGroups,[]],groupCacheExpiration:[e?e.customerCacheExpiration:null,[i.Validators.required,i.Validators.min(0)]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-add-to-group-config",template:'<section [formGroup]="addToGroupConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.group-name-pattern</mat-label>\n    <input required matInput formControlName="groupNamePattern">\n    <mat-error *ngIf="addToGroupConfigForm.get(\'groupNamePattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.group-name-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.group-name-pattern-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <mat-checkbox fxFlex formControlName="createGroupIfNotExists" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.create-group-if-not-exists\' | translate }}\n  </mat-checkbox>\n  <mat-checkbox fxFlex formControlName="removeFromCurrentGroups" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.remove-from-current-groups\' | translate }}\n  </mat-checkbox>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.group-cache-expiration</mat-label>\n    <input required type="number" min="0" step="1" matInput formControlName="groupCacheExpiration">\n    <mat-error *ngIf="addToGroupConfigForm.get(\'groupCacheExpiration\').hasError(\'required\')">\n      {{ \'tb.rulenode.group-cache-expiration-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="addToGroupConfigForm.get(\'groupCacheExpiration\').hasError(\'min\')">\n      {{ \'tb.rulenode.group-cache-expiration-range\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.group-cache-expiration-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Pe=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.ownerType=W,r.ownerTypes=Object.keys(W),r.ownerTypeTranslationsMap=re,r}return C(n,e),n.prototype.configForm=function(){return this.changeOwnerConfigForm},n.prototype.onConfigurationSet=function(e){this.changeOwnerConfigForm=this.fb.group({ownerType:[e?e.ownerType:null,[i.Validators.required]],ownerNamePattern:[e?e.ownerNamePattern:null,[]],createOwnerIfNotExists:[!!e&&e.createOwnerIfNotExists,[]],ownerCacheExpiration:[e?e.ownerCacheExpiration:null,[]]})},n.prototype.validatorTriggers=function(){return["ownerType"]},n.prototype.updateValidators=function(e){this.changeOwnerConfigForm.get("ownerType").value===W.CUSTOMER?(this.changeOwnerConfigForm.get("ownerNamePattern").setValidators([i.Validators.required]),this.changeOwnerConfigForm.get("ownerCacheExpiration").setValidators([i.Validators.required,i.Validators.min(0)])):(this.changeOwnerConfigForm.get("ownerNamePattern").setValidators([]),this.changeOwnerConfigForm.get("ownerCacheExpiration").setValidators([])),this.changeOwnerConfigForm.get("ownerNamePattern").updateValueAndValidity({emitEvent:e}),this.changeOwnerConfigForm.get("ownerCacheExpiration").updateValueAndValidity({emitEvent:e})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-change-owner-config",template:'<section [formGroup]="changeOwnerConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.owner-type</mat-label>\n    <mat-select formControlName="ownerType" required>\n      <mat-option *ngFor="let ownerType of ownerTypes" [value]="ownerType">\n        {{ ownerTypeTranslationsMap.get(ownerType) | translate }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <section fxLayout="column" *ngIf="changeOwnerConfigForm.get(\'ownerType\').value === ownerType.CUSTOMER">\n    <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n      <mat-label translate>tb.rulenode.owner-name-pattern</mat-label>\n      <input required matInput formControlName="ownerNamePattern">\n      <mat-error *ngIf="changeOwnerConfigForm.get(\'ownerNamePattern\').hasError(\'required\')">\n        {{ \'tb.rulenode.owner-name-pattern-required\' | translate }}\n      </mat-error>\n      <mat-hint innerHTML="{{ \'tb.rulenode.owner-name-pattern-hint\' | translate }}"></mat-hint>\n    </mat-form-field>\n    <mat-checkbox fxFlex formControlName="createOwnerIfNotExists" style="padding-bottom: 16px;">\n      {{ \'tb.rulenode.create-owner-if-not-exists\' | translate }}\n    </mat-checkbox>\n    <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n      <mat-label translate>tb.rulenode.owner-cache-expiration</mat-label>\n      <input required type="number" min="0" step="1" matInput formControlName="ownerCacheExpiration">\n      <mat-error *ngIf="changeOwnerConfigForm.get(\'ownerCacheExpiration\').hasError(\'required\')">\n        {{ \'tb.rulenode.owner-cache-expiration-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="changeOwnerConfigForm.get(\'ownerCacheExpiration\').hasError(\'min\')">\n        {{ \'tb.rulenode.owner-cache-expiration-range\' | translate }}\n      </mat-error>\n      <mat-hint innerHTML="{{ \'tb.rulenode.owner-cache-expiration-hint\' | translate }}"></mat-hint>\n    </mat-form-field>\n  </section>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Re=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.generateReportConfigForm},n.prototype.onConfigurationSet=function(e){this.generateReportConfigForm=this.fb.group({useSystemReportsServer:[!!e&&e.useSystemReportsServer,[]],reportsServerEndpointUrl:[e?e.reportsServerEndpointUrl:null,[]],useReportConfigFromMessage:[!!e&&e.useReportConfigFromMessage,[]],reportConfig:[e?e.reportConfig:null,[]]})},n.prototype.validatorTriggers=function(){return["useSystemReportsServer","useReportConfigFromMessage"]},n.prototype.updateValidators=function(e){var t=this.generateReportConfigForm.get("useSystemReportsServer").value,n=this.generateReportConfigForm.get("useReportConfigFromMessage").value;if(e){var r=this.generateReportConfigForm.get("reportsServerEndpointUrl").value;t?this.generateReportConfigForm.get("reportsServerEndpointUrl").reset(null,{emitEvent:!1}):r&&r.length||this.generateReportConfigForm.get("reportsServerEndpointUrl").reset("http://localhost:8383",{emitEvent:!1})}t?this.generateReportConfigForm.get("reportsServerEndpointUrl").setValidators([]):this.generateReportConfigForm.get("reportsServerEndpointUrl").setValidators([i.Validators.required]),n?this.generateReportConfigForm.get("reportConfig").setValidators([]):this.generateReportConfigForm.get("reportConfig").setValidators([i.Validators.required]),this.generateReportConfigForm.get("reportsServerEndpointUrl").updateValueAndValidity({emitEvent:e}),this.generateReportConfigForm.get("reportConfig").updateValueAndValidity({emitEvent:e})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-generate-report-config",template:'<section [formGroup]="generateReportConfigForm" fxLayout="column">\n  <mat-checkbox fxFlex formControlName="useSystemReportsServer" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.use-system-reports-server\' | translate }}\n  </mat-checkbox>\n  <mat-form-field class="mat-block" *ngIf="!generateReportConfigForm.get(\'useSystemReportsServer\').value">\n    <mat-label translate>tb.rulenode.reports-server-endpoint-url</mat-label>\n    <input required matInput formControlName="reportsServerEndpointUrl">\n    <mat-error *ngIf="generateReportConfigForm.get(\'reportsServerEndpointUrl\').hasError(\'required\')">\n      {{ \'tb.rulenode.reports-server-endpoint-url-is-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-checkbox fxFlex formControlName="useReportConfigFromMessage" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.use-report-config-from-message\' | translate }}\n  </mat-checkbox>\n  <tb-report-config\n    *ngIf="!generateReportConfigForm.get(\'useReportConfigFromMessage\').value"\n    formControlName="reportConfig"\n    [reportsServerEndpointUrl]="generateReportConfigForm.get(\'reportsServerEndpointUrl\').value">\n  </tb-report-config>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Oe=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.entityType=a.EntityType,r}return C(n,e),n.prototype.configForm=function(){return this.integrationDownlinkConfigForm},n.prototype.onConfigurationSet=function(e){this.integrationDownlinkConfigForm=this.fb.group({integrationId:[e?e.integrationId:null,[i.Validators.required]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-integration-downlink-config",template:'<section [formGroup]="integrationDownlinkConfigForm" fxLayout="column">\n  <tb-entity-autocomplete\n    required\n    [entityType]="entityType.INTEGRATION"\n    formControlName="integrationId">\n  </tb-entity-autocomplete>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),we=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.removeFromGroupConfigForm},n.prototype.onConfigurationSet=function(e){this.removeFromGroupConfigForm=this.fb.group({groupNamePattern:[e?e.groupNamePattern:null,[i.Validators.required]],groupCacheExpiration:[e?e.groupCacheExpiration:null,[i.Validators.required,i.Validators.min(0)]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-remove-from-group-config",template:'<section [formGroup]="removeFromGroupConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.group-name-pattern</mat-label>\n    <input required matInput formControlName="groupNamePattern">\n    <mat-error *ngIf="removeFromGroupConfigForm.get(\'groupNamePattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.group-name-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.group-name-pattern-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.group-cache-expiration</mat-label>\n    <input required type="number" min="0" step="1" matInput formControlName="groupCacheExpiration">\n    <mat-error *ngIf="removeFromGroupConfigForm.get(\'groupCacheExpiration\').hasError(\'required\')">\n      {{ \'tb.rulenode.group-cache-expiration-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="removeFromGroupConfigForm.get(\'groupCacheExpiration\').hasError(\'min\')">\n      {{ \'tb.rulenode.group-cache-expiration-range\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.group-cache-expiration-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),De=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.sendRestApiCallReplyConfigForm},n.prototype.onConfigurationSet=function(e){this.sendRestApiCallReplyConfigForm=this.fb.group({requestIdMetaDataAttribute:[e?e.requestIdMetaDataAttribute:null,[]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-send-rest-api-call-reply-config",template:'<section [formGroup]="sendRestApiCallReplyConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.request-id-metadata-attribute</mat-label>\n    <input matInput formControlName="requestIdMetaDataAttribute">\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Ge=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.serviceType=a.ServiceType.TB_RULE_ENGINE,r}return C(n,e),n.prototype.configForm=function(){return this.checkPointConfigForm},n.prototype.onConfigurationSet=function(e){this.checkPointConfigForm=this.fb.group({queueName:[e?e.queueName:null,[i.Validators.required]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-check-point-config",template:'<section [formGroup]="checkPointConfigForm" fxLayout="column">\n  <tb-queue-type-list\n    required\n    [queueType]="serviceType"\n    formControlName="queueName">\n  </tb-queue-type-list>\n  <div class="tb-hint" translate>tb.rulenode.select-queue-hint</div>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Ue=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.allAzureIotHubCredentialsTypes=ee,r.azureIotHubCredentialsTypeTranslationsMap=te,r}return C(n,e),n.prototype.configForm=function(){return this.azureIotHubConfigForm},n.prototype.onConfigurationSet=function(e){this.azureIotHubConfigForm=this.fb.group({topicPattern:[e?e.topicPattern:null,[i.Validators.required]],host:[e?e.host:null,[i.Validators.required]],port:[e?e.port:null,[i.Validators.required,i.Validators.min(1),i.Validators.max(65535)]],connectTimeoutSec:[e?e.connectTimeoutSec:null,[i.Validators.required,i.Validators.min(1),i.Validators.max(200)]],clientId:[e?e.clientId:null,[i.Validators.required]],cleanSession:[!!e&&e.cleanSession,[]],ssl:[!!e&&e.ssl,[]],credentials:this.fb.group({type:[e&&e.credentials?e.credentials.type:null,[i.Validators.required]],sasKey:[e&&e.credentials?e.credentials.sasKey:null,[]],caCert:[e&&e.credentials?e.credentials.caCert:null,[]],caCertFileName:[e&&e.credentials?e.credentials.caCertFileName:null,[]],privateKey:[e&&e.credentials?e.credentials.privateKey:null,[]],privateKeyFileName:[e&&e.credentials?e.credentials.privateKeyFileName:null,[]],cert:[e&&e.credentials?e.credentials.cert:null,[]],certFileName:[e&&e.credentials?e.credentials.certFileName:null,[]],password:[e&&e.credentials?e.credentials.password:null,[]]})})},n.prototype.prepareOutputConfig=function(e){var t=e.credentials.type;return"sas"===t&&(e.credentials={type:t,sasKey:e.credentials.sasKey,caCert:e.credentials.caCert,caCertFileName:e.credentials.caCertFileName}),e},n.prototype.validatorTriggers=function(){return["credentials.type"]},n.prototype.updateValidators=function(e){var t=this.azureIotHubConfigForm.get("credentials"),n=t.get("type").value;switch(e&&t.reset({type:n},{emitEvent:!1}),t.get("sasKey").setValidators([]),t.get("privateKey").setValidators([]),t.get("privateKeyFileName").setValidators([]),t.get("cert").setValidators([]),t.get("certFileName").setValidators([]),n){case"sas":t.get("sasKey").setValidators([i.Validators.required]);break;case"cert.PEM":t.get("privateKey").setValidators([i.Validators.required]),t.get("privateKeyFileName").setValidators([i.Validators.required]),t.get("cert").setValidators([i.Validators.required]),t.get("certFileName").setValidators([i.Validators.required])}t.get("sasKey").updateValueAndValidity({emitEvent:e}),t.get("privateKey").updateValueAndValidity({emitEvent:e}),t.get("privateKeyFileName").updateValueAndValidity({emitEvent:e}),t.get("cert").updateValueAndValidity({emitEvent:e}),t.get("certFileName").updateValueAndValidity({emitEvent:e})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-action-node-azure-iot-hub-config",template:'<section [formGroup]="azureIotHubConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.topic</mat-label>\n    <input required matInput formControlName="topicPattern">\n    <mat-error *ngIf="azureIotHubConfigForm.get(\'topicPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.topic-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.hostname</mat-label>\n    <input required matInput formControlName="host">\n    <mat-error *ngIf="azureIotHubConfigForm.get(\'host\').hasError(\'required\')">\n      {{ \'tb.rulenode.hostname-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.device-id</mat-label>\n    <input required matInput formControlName="clientId" autocomplete="new-clientId">\n    <mat-error *ngIf="azureIotHubConfigForm.get(\'clientId\').hasError(\'required\')">\n      {{ \'tb.rulenode.device-id-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-accordion multi>\n    <mat-expansion-panel class="tb-mqtt-credentials-panel-group">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.credentials</mat-panel-title>\n        <mat-panel-description>\n          {{ azureIotHubCredentialsTypeTranslationsMap.get(azureIotHubConfigForm.get(\'credentials.type\').value) | translate }}\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n      <section formGroupName="credentials" fxLayout="column">\n        <mat-form-field class="mat-block">\n          <mat-label translate>tb.rulenode.credentials-type</mat-label>\n          <mat-select formControlName="type" required>\n            <mat-option *ngFor="let credentialsType of allAzureIotHubCredentialsTypes" [value]="credentialsType">\n              {{ azureIotHubCredentialsTypeTranslationsMap.get(credentialsType) | translate }}\n            </mat-option>\n          </mat-select>\n          <mat-error *ngIf="azureIotHubConfigForm.get(\'credentials.type\').hasError(\'required\')">\n            {{ \'tb.rulenode.credentials-type-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <section fxLayout="column" [ngSwitch]="azureIotHubConfigForm.get(\'credentials.type\').value">\n          <ng-template ngSwitchCase="anonymous">\n          </ng-template>\n          <ng-template ngSwitchCase="sas">\n            <mat-form-field class="mat-block">\n              <mat-label translate>tb.rulenode.sas-key</mat-label>\n              <input type="password" required matInput formControlName="sasKey" autocomplete="new-password">\n              <mat-error *ngIf="azureIotHubConfigForm.get(\'credentials.sasKey\').hasError(\'required\')">\n                {{ \'tb.rulenode.sas-key-required\' | translate }}\n              </mat-error>\n            </mat-form-field>\n            <tb-file-input formControlName="caCert"\n                           inputId="caCertSelect"\n                           [existingFileName]="azureIotHubConfigForm.get(\'credentials.caCertFileName\').value"\n                           (fileNameChanged)="azureIotHubConfigForm.get(\'credentials.caCertFileName\').setValue($event)"\n                           label="{{\'tb.rulenode.azure-ca-cert\' | translate}}"\n                           noFileText="tb.rulenode.no-file"\n                           dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n            </tb-file-input>\n          </ng-template>\n          <ng-template ngSwitchCase="cert.PEM">\n            <tb-file-input formControlName="caCert"\n                           inputId="caCertSelect"\n                           [existingFileName]="azureIotHubConfigForm.get(\'credentials.caCertFileName\').value"\n                           (fileNameChanged)="azureIotHubConfigForm.get(\'credentials.caCertFileName\').setValue($event)"\n                           label="{{\'tb.rulenode.azure-ca-cert\' | translate}}"\n                           noFileText="tb.rulenode.no-file"\n                           dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n            </tb-file-input>\n            <tb-file-input formControlName="cert"\n                           inputId="CertSelect"\n                           [existingFileName]="azureIotHubConfigForm.get(\'credentials.certFileName\').value"\n                           (fileNameChanged)="azureIotHubConfigForm.get(\'credentials.certFileName\').setValue($event)"\n                           required\n                           requiredAsError\n                           label="{{\'tb.rulenode.cert\' | translate}}"\n                           noFileText="tb.rulenode.no-file"\n                           dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n            </tb-file-input>\n            <tb-file-input style="padding-bottom: 8px;"\n                           formControlName="privateKey"\n                           inputId="privateKeySelect"\n                           [existingFileName]="azureIotHubConfigForm.get(\'credentials.privateKeyFileName\').value"\n                           (fileNameChanged)="azureIotHubConfigForm.get(\'credentials.privateKeyFileName\').setValue($event)"\n                           required\n                           requiredAsError\n                           label="{{\'tb.rulenode.private-key\' | translate}}"\n                           noFileText="tb.rulenode.no-file"\n                           dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n            </tb-file-input>\n            <mat-form-field class="mat-block">\n              <mat-label translate>tb.rulenode.private-key-password</mat-label>\n              <input type="password" matInput formControlName="password" autocomplete="new-password">\n            </mat-form-field>\n          </ng-template>\n        </section>\n      </section>\n    </mat-expansion-panel>\n    </mat-accordion>\n</section>\n',styles:[":host .tb-mqtt-credentials-panel-group{margin:0 6px}"]}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Ke=function(){function e(){}return e=v([t.NgModule({declarations:[S,E,N,V,A,k,L,M,P,R,O,fe,ye,be,he,Ie,qe,Se,Ee,Ne,Ve,Ae,ke,Le,Me,Pe,Re,Oe,we,De,Ge,Ue],imports:[n.CommonModule,a.SharedModule,l.HomeComponentsModule,Te],exports:[S,E,N,V,A,k,L,M,P,R,O,fe,ye,be,he,Ie,qe,Se,Ee,Ne,Ve,Ae,ke,Le,Me,Pe,Re,Oe,we,De,Ge,Ue]})],e)}(),Be=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.separatorKeysCodes=[m.ENTER,m.COMMA,m.SEMICOLON],r}return C(n,e),n.prototype.configForm=function(){return this.checkMessageConfigForm},n.prototype.onConfigurationSet=function(e){this.checkMessageConfigForm=this.fb.group({messageNames:[e?e.messageNames:null,[]],metadataNames:[e?e.metadataNames:null,[]],checkAllKeys:[!!e&&e.checkAllKeys,[]]})},n.prototype.validateConfig=function(){var e=this.checkMessageConfigForm.get("messageNames").value,t=this.checkMessageConfigForm.get("metadataNames").value;return e.length>0||t.length>0},n.prototype.removeMessageName=function(e){var t=this.checkMessageConfigForm.get("messageNames").value,n=t.indexOf(e);n>=0&&(t.splice(n,1),this.checkMessageConfigForm.get("messageNames").setValue(t,{emitEvent:!0}))},n.prototype.removeMetadataName=function(e){var t=this.checkMessageConfigForm.get("metadataNames").value,n=t.indexOf(e);n>=0&&(t.splice(n,1),this.checkMessageConfigForm.get("metadataNames").setValue(t,{emitEvent:!0}))},n.prototype.addMessageName=function(e){var t=e.input,n=e.value;if((n||"").trim()){n=n.trim();var r=this.checkMessageConfigForm.get("messageNames").value;r&&-1!==r.indexOf(n)||(r||(r=[]),r.push(n),this.checkMessageConfigForm.get("messageNames").setValue(r,{emitEvent:!0}))}t&&(t.value="")},n.prototype.addMetadataName=function(e){var t=e.input,n=e.value;if((n||"").trim()){n=n.trim();var r=this.checkMessageConfigForm.get("metadataNames").value;r&&-1!==r.indexOf(n)||(r||(r=[]),r.push(n),this.checkMessageConfigForm.get("metadataNames").setValue(r,{emitEvent:!0}))}t&&(t.value="")},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-filter-node-check-message-config",template:'<section [formGroup]="checkMessageConfigForm" fxLayout="column">\n  <label translate class="tb-title no-padding tb-required">tb.rulenode.data-keys</label>\n  <mat-form-field floatLabel="always" class="mat-block">\n    <mat-label></mat-label>\n    <mat-chip-list #messageNamesChipList>\n      <mat-chip\n        *ngFor="let messageName of checkMessageConfigForm.get(\'messageNames\').value;"\n        (removed)="removeMessageName(messageName)">\n        {{messageName}}\n        <mat-icon matChipRemove>close</mat-icon>\n      </mat-chip>\n      <input matInput type="text" placeholder="{{\'tb.rulenode.data-keys\' | translate}}"\n             style="max-width: 200px;"\n             [matChipInputFor]="messageNamesChipList"\n             [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n             (matChipInputTokenEnd)="addMessageName($event)"\n             [matChipInputAddOnBlur]="true">\n    </mat-chip-list>\n  </mat-form-field>\n  <div class="tb-hint" translate>tb.rulenode.separator-hint</div>\n  <label translate class="tb-title no-padding tb-required">tb.rulenode.metadata-keys</label>\n  <mat-form-field floatLabel="always" class="mat-block">\n    <mat-label></mat-label>\n    <mat-chip-list #metadataNamesChipList>\n      <mat-chip\n        *ngFor="let metadataName of checkMessageConfigForm.get(\'metadataNames\').value;"\n        (removed)="removeMetadataName(metadataName)">\n        {{metadataName}}\n        <mat-icon matChipRemove>close</mat-icon>\n      </mat-chip>\n      <input matInput type="text" placeholder="{{\'tb.rulenode.metadata-keys\' | translate}}"\n             style="max-width: 200px;"\n             [matChipInputFor]="metadataNamesChipList"\n             [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n             (matChipInputTokenEnd)="addMetadataName($event)"\n             [matChipInputAddOnBlur]="true">\n    </mat-chip-list>\n  </mat-form-field>\n  <div class="tb-hint" translate>tb.rulenode.separator-hint</div>\n  <mat-checkbox fxFlex formControlName="checkAllKeys" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.check-all-keys\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" translate>tb.rulenode.check-all-keys-hint</div>\n</section>\n',styles:[":host label.tb-title{margin-bottom:-10px}"]}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),He=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.entitySearchDirection=Object.keys(a.EntitySearchDirection),r.entitySearchDirectionTranslationsMap=a.entitySearchDirectionTranslations,r}return C(n,e),n.prototype.configForm=function(){return this.checkRelationConfigForm},n.prototype.onConfigurationSet=function(e){this.checkRelationConfigForm=this.fb.group({checkForSingleEntity:[!!e&&e.checkForSingleEntity,[]],direction:[e?e.direction:null,[]],entityType:[e?e.entityType:null,e&&e.checkForSingleEntity?[i.Validators.required]:[]],entityId:[e?e.entityId:null,e&&e.checkForSingleEntity?[i.Validators.required]:[]],relationType:[e?e.relationType:null,[i.Validators.required]]})},n.prototype.validatorTriggers=function(){return["checkForSingleEntity"]},n.prototype.updateValidators=function(e){var t=this.checkRelationConfigForm.get("checkForSingleEntity").value;this.checkRelationConfigForm.get("entityType").setValidators(t?[i.Validators.required]:[]),this.checkRelationConfigForm.get("entityType").updateValueAndValidity({emitEvent:e}),this.checkRelationConfigForm.get("entityId").setValidators(t?[i.Validators.required]:[]),this.checkRelationConfigForm.get("entityId").updateValueAndValidity({emitEvent:e})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-filter-node-check-relation-config",template:'<section [formGroup]="checkRelationConfigForm" fxLayout="column">\n  <mat-checkbox fxFlex formControlName="checkForSingleEntity" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.check-relation-to-specific-entity\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" translate>tb.rulenode.check-relation-hint</div>\n  <mat-form-field class="mat-block" style="min-width: 100px;">\n    <mat-label translate>relation.direction</mat-label>\n    <mat-select formControlName="direction" required>\n      <mat-option *ngFor="let direction of entitySearchDirection" [value]="direction">\n        {{ entitySearchDirectionTranslationsMap.get(direction) | translate }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <div fxLayout="row" *ngIf="checkRelationConfigForm.get(\'checkForSingleEntity\').value" style="padding-top: 20px">\n    <tb-entity-type-select\n      style="min-width: 100px; padding-bottom: 20px; padding-right: 8px;"\n      showLabel\n      required\n      formControlName="entityType">\n    </tb-entity-type-select>\n    <tb-entity-autocomplete\n      fxFlex\n      required\n      *ngIf="checkRelationConfigForm.get(\'entityType\').value"\n      [entityType]="checkRelationConfigForm.get(\'entityType\').value"\n      formControlName="entityId">\n    </tb-entity-autocomplete>\n  </div>\n  <tb-relation-type-autocomplete\n    required\n    formControlName="relationType">\n  </tb-relation-type-autocomplete>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Qe=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.perimeterType=w,r.perimeterTypes=Object.keys(w),r.perimeterTypeTranslationMap=U,r.rangeUnits=Object.keys(K),r.rangeUnitTranslationMap=Q,r}return C(n,e),n.prototype.configForm=function(){return this.geoFilterConfigForm},n.prototype.onConfigurationSet=function(e){this.geoFilterConfigForm=this.fb.group({latitudeKeyName:[e?e.latitudeKeyName:null,[i.Validators.required]],longitudeKeyName:[e?e.longitudeKeyName:null,[i.Validators.required]],fetchPerimeterInfoFromMessageMetadata:[!!e&&e.fetchPerimeterInfoFromMessageMetadata,[]],perimeterType:[e?e.perimeterType:null,[]],centerLatitude:[e?e.centerLatitude:null,[]],centerLongitude:[e?e.centerLatitude:null,[]],range:[e?e.range:null,[]],rangeUnit:[e?e.rangeUnit:null,[]],polygonsDefinition:[e?e.polygonsDefinition:null,[]]})},n.prototype.validatorTriggers=function(){return["fetchPerimeterInfoFromMessageMetadata","perimeterType"]},n.prototype.updateValidators=function(e){var t=this.geoFilterConfigForm.get("fetchPerimeterInfoFromMessageMetadata").value,n=this.geoFilterConfigForm.get("perimeterType").value;t?this.geoFilterConfigForm.get("perimeterType").setValidators([]):this.geoFilterConfigForm.get("perimeterType").setValidators([i.Validators.required]),t||n!==w.CIRCLE?(this.geoFilterConfigForm.get("centerLatitude").setValidators([]),this.geoFilterConfigForm.get("centerLongitude").setValidators([]),this.geoFilterConfigForm.get("range").setValidators([]),this.geoFilterConfigForm.get("rangeUnit").setValidators([])):(this.geoFilterConfigForm.get("centerLatitude").setValidators([i.Validators.required,i.Validators.min(-90),i.Validators.max(90)]),this.geoFilterConfigForm.get("centerLongitude").setValidators([i.Validators.required,i.Validators.min(-180),i.Validators.max(180)]),this.geoFilterConfigForm.get("range").setValidators([i.Validators.required,i.Validators.min(0)]),this.geoFilterConfigForm.get("rangeUnit").setValidators([i.Validators.required])),t||n!==w.POLYGON?this.geoFilterConfigForm.get("polygonsDefinition").setValidators([]):this.geoFilterConfigForm.get("polygonsDefinition").setValidators([i.Validators.required]),this.geoFilterConfigForm.get("perimeterType").updateValueAndValidity({emitEvent:!1}),this.geoFilterConfigForm.get("centerLatitude").updateValueAndValidity({emitEvent:e}),this.geoFilterConfigForm.get("centerLongitude").updateValueAndValidity({emitEvent:e}),this.geoFilterConfigForm.get("range").updateValueAndValidity({emitEvent:e}),this.geoFilterConfigForm.get("rangeUnit").updateValueAndValidity({emitEvent:e}),this.geoFilterConfigForm.get("polygonsDefinition").updateValueAndValidity({emitEvent:e})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-filter-node-gps-geofencing-config",template:'<section [formGroup]="geoFilterConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.latitude-key-name</mat-label>\n    <input matInput formControlName="latitudeKeyName" required>\n    <mat-error *ngIf="geoFilterConfigForm.get(\'latitudeKeyName\').hasError(\'required\')">\n      {{ \'tb.rulenode.latitude-key-name-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.longitude-key-name</mat-label>\n    <input matInput formControlName="longitudeKeyName" required>\n    <mat-error *ngIf="geoFilterConfigForm.get(\'longitudeKeyName\').hasError(\'required\')">\n      {{ \'tb.rulenode.longitude-key-name-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-checkbox fxFlex formControlName="fetchPerimeterInfoFromMessageMetadata" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.fetch-perimeter-info-from-message-metadata\' | translate }}\n  </mat-checkbox>\n  <div fxLayout="row" *ngIf="!geoFilterConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value">\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.perimeter-type</mat-label>\n      <mat-select formControlName="perimeterType" required>\n        <mat-option *ngFor="let type of perimeterTypes" [value]="type">\n          {{ perimeterTypeTranslationMap.get(type) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div fxLayout="column"\n       *ngIf="geoFilterConfigForm.get(\'perimeterType\').value === perimeterType.CIRCLE &&\n       !geoFilterConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value">\n    <div fxLayout="row" fxLayoutGap="8px">\n      <mat-form-field fxFlex>\n        <mat-label translate>tb.rulenode.circle-center-latitude</mat-label>\n        <input type="number" min="-90" max="90" step="0.1" matInput formControlName="centerLatitude" required>\n        <mat-error *ngIf="geoFilterConfigForm.get(\'centerLatitude\').hasError(\'required\')">\n          {{ \'tb.rulenode.circle-center-latitude-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex>\n        <mat-label translate>tb.rulenode.circle-center-longitude</mat-label>\n        <input type="number" min="-180" max="180" step="0.1" matInput formControlName="centerLongitude" required>\n        <mat-error *ngIf="geoFilterConfigForm.get(\'centerLongitude\').hasError(\'required\')">\n          {{ \'tb.rulenode.circle-center-longitude-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <div fxLayout="row" fxLayoutGap="8px">\n      <mat-form-field fxFlex>\n        <mat-label translate>tb.rulenode.range</mat-label>\n        <input type="number" min="0" step="0.1" matInput formControlName="range" required>\n        <mat-error *ngIf="geoFilterConfigForm.get(\'range\').hasError(\'required\')">\n          {{ \'tb.rulenode.range-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex>\n        <mat-label translate>tb.rulenode.range-units</mat-label>\n        <mat-select formControlName="rangeUnit" required>\n          <mat-option *ngFor="let type of rangeUnits" [value]="type">\n            {{ rangeUnitTranslationMap.get(type) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n  </div>\n  <div fxLayout="row" *ngIf="geoFilterConfigForm.get(\'perimeterType\').value === perimeterType.POLYGON &&\n                             !geoFilterConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value">\n    <div fxLayout="column" fxFlex="100">\n      <mat-form-field class="mat-block" hintLabel="{{\'tb.rulenode.polygon-definition-hint\' | translate}}">\n        <mat-label translate>tb.rulenode.polygon-definition</mat-label>\n        <input matInput formControlName="polygonsDefinition" required>\n        <mat-error *ngIf="geoFilterConfigForm.get(\'polygonsDefinition\').hasError(\'required\')">\n          {{ \'tb.rulenode.polygon-definition-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </div>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),je=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.messageTypeConfigForm},n.prototype.onConfigurationSet=function(e){this.messageTypeConfigForm=this.fb.group({messageTypes:[e?e.messageTypes:null,[i.Validators.required]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-filter-node-message-type-config",template:'<section [formGroup]="messageTypeConfigForm" fxLayout="column">\n  <tb-message-types-config\n    required\n    label="tb.rulenode.message-types-filter"\n    formControlName="messageTypes"\n  ></tb-message-types-config>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),_e=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.allowedEntityTypes=[a.EntityType.DEVICE,a.EntityType.ASSET,a.EntityType.ENTITY_VIEW,a.EntityType.TENANT,a.EntityType.CUSTOMER,a.EntityType.USER,a.EntityType.DASHBOARD,a.EntityType.RULE_CHAIN,a.EntityType.RULE_NODE,a.EntityType.ENTITY_GROUP,a.EntityType.CONVERTER,a.EntityType.INTEGRATION,a.EntityType.SCHEDULER_EVENT,a.EntityType.BLOB_ENTITY],r}return C(n,e),n.prototype.configForm=function(){return this.originatorTypeConfigForm},n.prototype.onConfigurationSet=function(e){this.originatorTypeConfigForm=this.fb.group({originatorTypes:[e?e.originatorTypes:null,[i.Validators.required]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-filter-node-originator-type-config",template:'<section [formGroup]="originatorTypeConfigForm" fxLayout="column">\n  <label translate class="tb-title no-padding tb-required">tb.rulenode.originator-types-filter</label>\n  <tb-entity-type-list fxFlex\n                       formControlName="originatorTypes"\n                       [allowedEntityTypes]="allowedEntityTypes"\n                       [ignoreAuthorityFilter]="true"\n                       required>\n  </tb-entity-type-list>\n</section>\n',styles:[":host ::ng-deep tb-entity-type-list .mat-form-field-flex{padding-top:0}:host ::ng-deep tb-entity-type-list .mat-form-field-infix{border-top:0}"]}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),$e=function(e){function n(t,n,r,a){var o=e.call(this,t)||this;return o.store=t,o.fb=n,o.nodeScriptTestService=r,o.translate=a,o}return C(n,e),n.prototype.configForm=function(){return this.scriptConfigForm},n.prototype.onConfigurationSet=function(e){this.scriptConfigForm=this.fb.group({jsScript:[e?e.jsScript:null,[i.Validators.required]]})},n.prototype.testScript=function(){var e=this,t=this.scriptConfigForm.get("jsScript").value;this.nodeScriptTestService.testNodeScript(t,"filter",this.translate.instant("tb.rulenode.filter"),"Filter",["msg","metadata","msgType"],this.ruleNodeId).subscribe((function(t){t&&e.scriptConfigForm.get("jsScript").setValue(t)}))},n.prototype.onValidate=function(){this.jsFuncComponent.validateOnSubmit()},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder},{type:s.NodeScriptTestService},{type:r.TranslateService}]},v([t.ViewChild("jsFuncComponent",{static:!0}),x("design:type",a.JsFuncComponent)],n.prototype,"jsFuncComponent",void 0),n=v([t.Component({selector:"tb-filter-node-script-config",template:'<section [formGroup]="scriptConfigForm" fxLayout="column">\n  <label translate class="tb-title no-padding">tb.rulenode.filter</label>\n  <tb-js-func #jsFuncComponent\n              formControlName="jsScript"\n              functionName="Filter"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              noValidate="true">\n  </tb-js-func>\n  <div fxLayout="row">\n    <button mat-button mat-raised-button color="primary" (click)="testScript()">\n      {{ \'tb.rulenode.test-filter-function\' | translate }}\n    </button>\n  </div>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder,s.NodeScriptTestService,r.TranslateService])],n)}(a.RuleNodeConfigurationComponent),ze=function(e){function n(t,n,r,a){var o=e.call(this,t)||this;return o.store=t,o.fb=n,o.nodeScriptTestService=r,o.translate=a,o}return C(n,e),n.prototype.configForm=function(){return this.switchConfigForm},n.prototype.onConfigurationSet=function(e){this.switchConfigForm=this.fb.group({jsScript:[e?e.jsScript:null,[i.Validators.required]]})},n.prototype.testScript=function(){var e=this,t=this.switchConfigForm.get("jsScript").value;this.nodeScriptTestService.testNodeScript(t,"switch",this.translate.instant("tb.rulenode.switch"),"Switch",["msg","metadata","msgType"],this.ruleNodeId).subscribe((function(t){t&&e.switchConfigForm.get("jsScript").setValue(t)}))},n.prototype.onValidate=function(){this.jsFuncComponent.validateOnSubmit()},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder},{type:s.NodeScriptTestService},{type:r.TranslateService}]},v([t.ViewChild("jsFuncComponent",{static:!0}),x("design:type",a.JsFuncComponent)],n.prototype,"jsFuncComponent",void 0),n=v([t.Component({selector:"tb-filter-node-switch-config",template:'<section [formGroup]="switchConfigForm" fxLayout="column">\n  <label translate class="tb-title no-padding">tb.rulenode.switch</label>\n  <tb-js-func #jsFuncComponent\n              formControlName="jsScript"\n              functionName="Switch"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              noValidate="true">\n  </tb-js-func>\n  <div fxLayout="row">\n    <button mat-button mat-raised-button color="primary" (click)="testScript()">\n      {{ \'tb.rulenode.test-switch-function\' | translate }}\n    </button>\n  </div>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder,s.NodeScriptTestService,r.TranslateService])],n)}(a.RuleNodeConfigurationComponent),Ye=function(e){function n(t,n,r){var o,l,s=e.call(this,t)||this;s.store=t,s.translate=n,s.fb=r,s.alarmStatusTranslationsMap=a.alarmStatusTranslations,s.alarmStatusList=[],s.searchText="",s.displayStatusFn=s.displayStatus.bind(s);try{for(var m=T(Object.keys(a.AlarmStatus)),u=m.next();!u.done;u=m.next()){var p=u.value;s.alarmStatusList.push(a.AlarmStatus[p])}}catch(e){o={error:e}}finally{try{u&&!u.done&&(l=m.return)&&l.call(m)}finally{if(o)throw o.error}}return s.statusFormControl=new i.FormControl(""),s.filteredAlarmStatus=s.statusFormControl.valueChanges.pipe(g.startWith(""),g.map((function(e){return e||""})),g.mergeMap((function(e){return s.fetchAlarmStatus(e)})),g.share()),s}return C(n,e),n.prototype.ngOnInit=function(){e.prototype.ngOnInit.call(this)},n.prototype.configForm=function(){return this.alarmStatusConfigForm},n.prototype.prepareInputConfig=function(e){return this.searchText="",this.statusFormControl.patchValue("",{emitEvent:!0}),e},n.prototype.onConfigurationSet=function(e){this.alarmStatusConfigForm=this.fb.group({alarmStatusList:[e?e.alarmStatusList:null,[i.Validators.required]]})},n.prototype.displayStatus=function(e){return e?this.translate.instant(a.alarmStatusTranslations.get(e)):void 0},n.prototype.fetchAlarmStatus=function(e){var t=this,n=this.getAlarmStatusList();if(this.searchText=e,this.searchText&&this.searchText.length){var r=this.searchText.toUpperCase();return c.of(n.filter((function(e){return t.translate.instant(a.alarmStatusTranslations.get(a.AlarmStatus[e])).toUpperCase().includes(r)})))}return c.of(n)},n.prototype.alarmStatusSelected=function(e){this.addAlarmStatus(e.option.value),this.clear("")},n.prototype.removeAlarmStatus=function(e){var t=this.alarmStatusConfigForm.get("alarmStatusList").value;if(t){var n=t.indexOf(e);n>=0&&(t.splice(n,1),this.alarmStatusConfigForm.get("alarmStatusList").setValue(t))}},n.prototype.addAlarmStatus=function(e){var t=this.alarmStatusConfigForm.get("alarmStatusList").value;t||(t=[]),-1===t.indexOf(e)&&(t.push(e),this.alarmStatusConfigForm.get("alarmStatusList").setValue(t))},n.prototype.getAlarmStatusList=function(){var e=this;return this.alarmStatusList.filter((function(t){return-1===e.alarmStatusConfigForm.get("alarmStatusList").value.indexOf(t)}))},n.prototype.onAlarmStatusInputFocus=function(){this.statusFormControl.updateValueAndValidity({onlySelf:!0,emitEvent:!0})},n.prototype.clear=function(e){var t=this;void 0===e&&(e=""),this.alarmStatusInput.nativeElement.value=e,this.statusFormControl.patchValue(null,{emitEvent:!0}),setTimeout((function(){t.alarmStatusInput.nativeElement.blur(),t.alarmStatusInput.nativeElement.focus()}),0)},n.ctorParameters=function(){return[{type:o.Store},{type:r.TranslateService},{type:i.FormBuilder}]},v([t.ViewChild("alarmStatusInput",{static:!1}),x("design:type",t.ElementRef)],n.prototype,"alarmStatusInput",void 0),n=v([t.Component({selector:"tb-filter-node-check-alarm-status-config",template:'<section [formGroup]="alarmStatusConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" class="alarm-status-list">\n  <mat-label translate>tb.rulenode.alarm-status-filter</mat-label>\n  <mat-chip-list #alarmStatusChipList required>\n    <mat-chip\n      *ngFor="let alarmStatus of alarmStatusConfigForm.get(\'alarmStatusList\').value;"\n      (removed)="removeAlarmStatus(alarmStatus)">\n        <span>\n          <strong>{{alarmStatusTranslationsMap.get(alarmStatus) | translate}}</strong>\n        </span>\n      <mat-icon matChipRemove>close</mat-icon>\n    </mat-chip>\n    <input matInput type="text"\n           style="max-width: 200px;"\n           #alarmStatusInput\n           (focusin)="onAlarmStatusInputFocus()"\n           [formControl]="statusFormControl"\n           matAutocompleteOrigin\n           #origin="matAutocompleteOrigin"\n           [matAutocompleteConnectedTo]="origin"\n           [matAutocomplete]="alarmStatusAutocomplete"\n           [matChipInputFor]="alarmStatusChipList">\n  </mat-chip-list>\n  <mat-autocomplete #alarmStatusAutocomplete="matAutocomplete"\n                    class="tb-autocomplete"\n                    (optionSelected)="alarmStatusSelected($event)"\n                    [displayWith]="displayStatusFn">\n    <mat-option *ngFor="let status of filteredAlarmStatus | async" [value]="status">\n      <span [innerHTML]="alarmStatusTranslationsMap.get(status) | translate | highlight:searchText"></span>\n    </mat-option>\n    <mat-option *ngIf="(filteredAlarmStatus | async)?.length === 0" [value]="null" class="tb-not-found">\n      <div class="tb-not-found-content" (click)="$event.stopPropagation()">\n        <div>\n          <span translate>tb.rulenode.no-alarm-status-matching</span>\n        </div>\n      </div>\n    </mat-option>\n  </mat-autocomplete>\n  </mat-form-field>\n  <tb-error [error]="(statusFormControl.touched &&\n                     alarmStatusConfigForm.get(\'alarmStatusList\').hasError(\'required\'))\n                  ? translate.instant(\'tb.rulenode.alarm-status-list-empty\') : \'\'"></tb-error>\n  </section>\n\n\n\n'}),x("design:paramtypes",[o.Store,r.TranslateService,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),We=function(){function e(){}return e=v([t.NgModule({declarations:[Be,He,Qe,je,_e,$e,ze,Ye],imports:[n.CommonModule,a.SharedModule,Te],exports:[Be,He,Qe,je,_e,$e,ze,Ye]})],e)}(),Je=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.customerAttributesConfigForm},n.prototype.onConfigurationSet=function(e){this.customerAttributesConfigForm=this.fb.group({telemetry:[!!e&&e.telemetry,[]],attrMapping:[e?e.attrMapping:null,[i.Validators.required]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-enrichment-node-customer-attributes-config",template:'<section [formGroup]="customerAttributesConfigForm" fxLayout="column">\n  <label translate class="tb-title tb-required">tb.rulenode.attr-mapping</label>\n  <mat-checkbox fxFlex formControlName="telemetry" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.latest-telemetry\' | translate }}\n  </mat-checkbox>\n  <tb-kv-map-config\n    required\n    formControlName="attrMapping"\n    requiredText="tb.rulenode.attr-mapping-required"\n    keyText="{{ customerAttributesConfigForm.get(\'telemetry\').value ? \'tb.rulenode.source-telemetry\' : \'tb.rulenode.source-attribute\' }}"\n    keyRequiredText="{{ customerAttributesConfigForm.get(\'telemetry\').value ? \'tb.rulenode.source-telemetry-required\' : \'tb.rulenode.source-attribute-required\' }}"\n    valText="tb.rulenode.target-attribute"\n    valRequiredText="tb.rulenode.target-attribute-required">\n  </tb-kv-map-config>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Ze=function(e){function n(t,n,r){var a,o,l=e.call(this,t)||this;l.store=t,l.translate=n,l.fb=r,l.entityDetailsTranslationsMap=z,l.entityDetailsList=[],l.searchText="",l.displayDetailsFn=l.displayDetails.bind(l);try{for(var s=T(Object.keys(H)),m=s.next();!m.done;m=s.next()){var u=m.value;l.entityDetailsList.push(H[u])}}catch(e){a={error:e}}finally{try{m&&!m.done&&(o=s.return)&&o.call(s)}finally{if(a)throw a.error}}return l.detailsFormControl=new i.FormControl(""),l.filteredEntityDetails=l.detailsFormControl.valueChanges.pipe(g.startWith(""),g.map((function(e){return e||""})),g.mergeMap((function(e){return l.fetchEntityDetails(e)})),g.share()),l}return C(n,e),n.prototype.ngOnInit=function(){e.prototype.ngOnInit.call(this)},n.prototype.configForm=function(){return this.entityDetailsConfigForm},n.prototype.prepareInputConfig=function(e){return this.searchText="",this.detailsFormControl.patchValue("",{emitEvent:!0}),e},n.prototype.onConfigurationSet=function(e){this.entityDetailsConfigForm=this.fb.group({detailsList:[e?e.detailsList:null,[i.Validators.required]],addToMetadata:[!!e&&e.addToMetadata,[]]})},n.prototype.displayDetails=function(e){return e?this.translate.instant(z.get(e)):void 0},n.prototype.fetchEntityDetails=function(e){var t=this;if(this.searchText=e,this.searchText&&this.searchText.length){var n=this.searchText.toUpperCase();return c.of(this.entityDetailsList.filter((function(e){return t.translate.instant(z.get(H[e])).toUpperCase().includes(n)})))}return c.of(this.entityDetailsList)},n.prototype.detailsFieldSelected=function(e){this.addDetailsField(e.option.value),this.clear("")},n.prototype.removeDetailsField=function(e){var t=this.entityDetailsConfigForm.get("detailsList").value;if(t){var n=t.indexOf(e);n>=0&&(t.splice(n,1),this.entityDetailsConfigForm.get("detailsList").setValue(t))}},n.prototype.addDetailsField=function(e){var t=this.entityDetailsConfigForm.get("detailsList").value;t||(t=[]),-1===t.indexOf(e)&&(t.push(e),this.entityDetailsConfigForm.get("detailsList").setValue(t))},n.prototype.onEntityDetailsInputFocus=function(){this.detailsFormControl.updateValueAndValidity({onlySelf:!0,emitEvent:!0})},n.prototype.clear=function(e){var t=this;void 0===e&&(e=""),this.detailsInput.nativeElement.value=e,this.detailsFormControl.patchValue(null,{emitEvent:!0}),setTimeout((function(){t.detailsInput.nativeElement.blur(),t.detailsInput.nativeElement.focus()}),0)},n.ctorParameters=function(){return[{type:o.Store},{type:r.TranslateService},{type:i.FormBuilder}]},v([t.ViewChild("detailsInput",{static:!1}),x("design:type",t.ElementRef)],n.prototype,"detailsInput",void 0),n=v([t.Component({selector:"tb-enrichment-node-entity-details-config",template:'<section [formGroup]="entityDetailsConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" class="entity-fields-list">\n    <mat-label translate>tb.rulenode.entity-details</mat-label>\n    <mat-chip-list #detailsChipList required>\n      <mat-chip\n        *ngFor="let details of entityDetailsConfigForm.get(\'detailsList\').value;"\n        (removed)="removeDetailsField(details)">\n        <span>\n          <strong>{{entityDetailsTranslationsMap.get(details) | translate}}</strong>\n        </span>\n        <mat-icon matChipRemove>close</mat-icon>\n      </mat-chip>\n      <input matInput type="text"\n             style="max-width: 200px;"\n             #detailsInput\n             (focusin)="onEntityDetailsInputFocus()"\n             [formControl]="detailsFormControl"\n             matAutocompleteOrigin\n             #origin="matAutocompleteOrigin"\n             [matAutocompleteConnectedTo]="origin"\n             [matAutocomplete]="detailsAutocomplete"\n             [matChipInputFor]="detailsChipList">\n    </mat-chip-list>\n    <mat-autocomplete #detailsAutocomplete="matAutocomplete"\n                      class="tb-autocomplete"\n                      (optionSelected)="detailsFieldSelected($event)"\n                      [displayWith]="displayDetailsFn">\n      <mat-option *ngFor="let details of filteredEntityDetails | async" [value]="details">\n        <span [innerHTML]="entityDetailsTranslationsMap.get(details) | translate | highlight:searchText"></span>\n      </mat-option>\n      <mat-option *ngIf="(filteredEntityDetails | async)?.length === 0" [value]="null" class="tb-not-found">\n        <div class="tb-not-found-content" (click)="$event.stopPropagation()">\n          <div>\n            <span translate>tb.rulenode.no-entity-details-matching</span>\n          </div>\n        </div>\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n  <tb-error [error]="(detailsFormControl.touched &&\n                     entityDetailsConfigForm.get(\'detailsList\').hasError(\'required\'))\n                  ? translate.instant(\'tb.rulenode.entity-details-list-empty\') : \'\'"></tb-error>\n  <mat-checkbox fxFlex formControlName="addToMetadata" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.add-to-metadata\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" translate>tb.rulenode.add-to-metadata-hint</div>\n</section>\n',styles:[":host ::ng-deep mat-form-field.entity-fields-list .mat-form-field-wrapper{margin-bottom:-1.25em}"]}),x("design:paramtypes",[o.Store,r.TranslateService,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),Xe=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.separatorKeysCodes=[m.ENTER,m.COMMA,m.SEMICOLON],r}return C(n,e),n.prototype.configForm=function(){return this.deviceAttributesConfigForm},n.prototype.onConfigurationSet=function(e){this.deviceAttributesConfigForm=this.fb.group({deviceRelationsQuery:[e?e.deviceRelationsQuery:null,[i.Validators.required]],tellFailureIfAbsent:[!!e&&e.tellFailureIfAbsent,[]],clientAttributeNames:[e?e.clientAttributeNames:null,[]],sharedAttributeNames:[e?e.sharedAttributeNames:null,[]],serverAttributeNames:[e?e.serverAttributeNames:null,[]],latestTsKeyNames:[e?e.latestTsKeyNames:null,[]],getLatestValueWithTs:[!!e&&e.getLatestValueWithTs,[]]})},n.prototype.removeKey=function(e,t){var n=this.deviceAttributesConfigForm.get(t).value,r=n.indexOf(e);r>=0&&(n.splice(r,1),this.deviceAttributesConfigForm.get(t).setValue(n,{emitEvent:!0}))},n.prototype.addKey=function(e,t){var n=e.input,r=e.value;if((r||"").trim()){r=r.trim();var a=this.deviceAttributesConfigForm.get(t).value;a&&-1!==a.indexOf(r)||(a||(a=[]),a.push(r),this.deviceAttributesConfigForm.get(t).setValue(a,{emitEvent:!0}))}n&&(n.value="")},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-enrichment-node-device-attributes-config",template:'<section [formGroup]="deviceAttributesConfigForm" fxLayout="column">\n  <label translate class="tb-title tb-required">tb.rulenode.device-relations-query</label>\n  <tb-device-relations-query-config\n    required\n    formControlName="deviceRelationsQuery"\n    style="padding-bottom: 15px;">\n  </tb-device-relations-query-config>\n  <mat-checkbox fxFlex formControlName="tellFailureIfAbsent" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.tell-failure-if-absent\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" translate>tb.rulenode.tell-failure-if-absent-hint</div>\n  <label translate class="tb-title no-padding">tb.rulenode.client-attributes</label>\n  <mat-form-field floatLabel="always" class="mat-block">\n    <mat-label></mat-label>\n    <mat-chip-list #clientAttributesChipList>\n      <mat-chip\n        *ngFor="let key of deviceAttributesConfigForm.get(\'clientAttributeNames\').value;"\n        (removed)="removeKey(key, \'clientAttributeNames\')">\n        {{key}}\n        <mat-icon matChipRemove>close</mat-icon>\n      </mat-chip>\n      <input matInput type="text" placeholder="{{\'tb.rulenode.client-attributes\' | translate}}"\n             style="max-width: 200px;"\n             [matChipInputFor]="clientAttributesChipList"\n             [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n             (matChipInputTokenEnd)="addKey($event, \'clientAttributeNames\')"\n             [matChipInputAddOnBlur]="true">\n    </mat-chip-list>\n  </mat-form-field>\n  <label translate class="tb-title no-padding">tb.rulenode.shared-attributes</label>\n  <mat-form-field floatLabel="always" class="mat-block">\n    <mat-label></mat-label>\n    <mat-chip-list #sharedAttributesChipList>\n      <mat-chip\n        *ngFor="let key of deviceAttributesConfigForm.get(\'sharedAttributeNames\').value;"\n        (removed)="removeKey(key, \'sharedAttributeNames\')">\n        {{key}}\n        <mat-icon matChipRemove>close</mat-icon>\n      </mat-chip>\n      <input matInput type="text" placeholder="{{\'tb.rulenode.shared-attributes\' | translate}}"\n             style="max-width: 200px;"\n             [matChipInputFor]="sharedAttributesChipList"\n             [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n             (matChipInputTokenEnd)="addKey($event, \'sharedAttributeNames\')"\n             [matChipInputAddOnBlur]="true">\n    </mat-chip-list>\n  </mat-form-field>\n  <label translate class="tb-title no-padding">tb.rulenode.server-attributes</label>\n  <mat-form-field floatLabel="always" class="mat-block">\n    <mat-label></mat-label>\n    <mat-chip-list #serverAttributesChipList>\n      <mat-chip\n        *ngFor="let key of deviceAttributesConfigForm.get(\'serverAttributeNames\').value;"\n        (removed)="removeKey(key, \'serverAttributeNames\')">\n        {{key}}\n        <mat-icon matChipRemove>close</mat-icon>\n      </mat-chip>\n      <input matInput type="text" placeholder="{{\'tb.rulenode.server-attributes\' | translate}}"\n             style="max-width: 200px;"\n             [matChipInputFor]="serverAttributesChipList"\n             [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n             (matChipInputTokenEnd)="addKey($event, \'serverAttributeNames\')"\n             [matChipInputAddOnBlur]="true">\n    </mat-chip-list>\n  </mat-form-field>\n  <label translate class="tb-title no-padding">tb.rulenode.latest-timeseries</label>\n  <mat-form-field floatLabel="always" class="mat-block">\n    <mat-label></mat-label>\n    <mat-chip-list #latestTimeseriesChipList>\n      <mat-chip\n        *ngFor="let key of deviceAttributesConfigForm.get(\'latestTsKeyNames\').value;"\n        (removed)="removeKey(key, \'latestTsKeyNames\')">\n        {{key}}\n        <mat-icon matChipRemove>close</mat-icon>\n      </mat-chip>\n      <input matInput type="text" placeholder="{{\'tb.rulenode.latest-timeseries\' | translate}}"\n             style="max-width: 200px;"\n             [matChipInputFor]="latestTimeseriesChipList"\n             [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n             (matChipInputTokenEnd)="addKey($event, \'latestTsKeyNames\')"\n             [matChipInputAddOnBlur]="true">\n    </mat-chip-list>\n  </mat-form-field>\n  <mat-checkbox formControlName="getLatestValueWithTs" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.get-latest-value-with-ts\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" innerHTML="{{ \'tb.rulenode.get-latest-value-with-ts-hint\' | translate }}"></div>\n</section>\n',styles:[":host label.tb-title{margin-bottom:-10px}"]}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),et=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.separatorKeysCodes=[m.ENTER,m.COMMA,m.SEMICOLON],r}return C(n,e),n.prototype.configForm=function(){return this.originatorAttributesConfigForm},n.prototype.onConfigurationSet=function(e){this.originatorAttributesConfigForm=this.fb.group({tellFailureIfAbsent:[!!e&&e.tellFailureIfAbsent,[]],clientAttributeNames:[e?e.clientAttributeNames:null,[]],sharedAttributeNames:[e?e.sharedAttributeNames:null,[]],serverAttributeNames:[e?e.serverAttributeNames:null,[]],latestTsKeyNames:[e?e.latestTsKeyNames:null,[]],getLatestValueWithTs:[!!e&&e.getLatestValueWithTs,[]]})},n.prototype.removeKey=function(e,t){var n=this.originatorAttributesConfigForm.get(t).value,r=n.indexOf(e);r>=0&&(n.splice(r,1),this.originatorAttributesConfigForm.get(t).setValue(n,{emitEvent:!0}))},n.prototype.addKey=function(e,t){var n=e.input,r=e.value;if((r||"").trim()){r=r.trim();var a=this.originatorAttributesConfigForm.get(t).value;a&&-1!==a.indexOf(r)||(a||(a=[]),a.push(r),this.originatorAttributesConfigForm.get(t).setValue(a,{emitEvent:!0}))}n&&(n.value="")},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-enrichment-node-originator-attributes-config",template:'<section [formGroup]="originatorAttributesConfigForm" fxLayout="column">\n  <mat-checkbox fxFlex formControlName="tellFailureIfAbsent" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.tell-failure-if-absent\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" translate>tb.rulenode.tell-failure-if-absent-hint</div>\n  <label translate class="tb-title no-padding">tb.rulenode.client-attributes</label>\n  <mat-form-field floatLabel="always" class="mat-block">\n    <mat-label></mat-label>\n    <mat-chip-list #clientAttributesChipList>\n      <mat-chip\n        *ngFor="let key of originatorAttributesConfigForm.get(\'clientAttributeNames\').value;"\n        (removed)="removeKey(key, \'clientAttributeNames\')">\n        {{key}}\n        <mat-icon matChipRemove>close</mat-icon>\n      </mat-chip>\n      <input matInput type="text" placeholder="{{\'tb.rulenode.client-attributes\' | translate}}"\n             style="max-width: 200px;"\n             [matChipInputFor]="clientAttributesChipList"\n             [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n             (matChipInputTokenEnd)="addKey($event, \'clientAttributeNames\')"\n             [matChipInputAddOnBlur]="true">\n    </mat-chip-list>\n    <mat-hint innerHTML="{{ \'tb.rulenode.client-attributes-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <label translate class="tb-title no-padding">tb.rulenode.shared-attributes</label>\n  <mat-form-field floatLabel="always" class="mat-block">\n    <mat-label></mat-label>\n    <mat-chip-list #sharedAttributesChipList>\n      <mat-chip\n        *ngFor="let key of originatorAttributesConfigForm.get(\'sharedAttributeNames\').value;"\n        (removed)="removeKey(key, \'sharedAttributeNames\')">\n        {{key}}\n        <mat-icon matChipRemove>close</mat-icon>\n      </mat-chip>\n      <input matInput type="text" placeholder="{{\'tb.rulenode.shared-attributes\' | translate}}"\n             style="max-width: 200px;"\n             [matChipInputFor]="sharedAttributesChipList"\n             [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n             (matChipInputTokenEnd)="addKey($event, \'sharedAttributeNames\')"\n             [matChipInputAddOnBlur]="true">\n    </mat-chip-list>\n    <mat-hint innerHTML="{{ \'tb.rulenode.shared-attributes-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <label translate class="tb-title no-padding">tb.rulenode.server-attributes</label>\n  <mat-form-field floatLabel="always" class="mat-block">\n    <mat-label></mat-label>\n    <mat-chip-list #serverAttributesChipList>\n      <mat-chip\n        *ngFor="let key of originatorAttributesConfigForm.get(\'serverAttributeNames\').value;"\n        (removed)="removeKey(key, \'serverAttributeNames\')">\n        {{key}}\n        <mat-icon matChipRemove>close</mat-icon>\n      </mat-chip>\n      <input matInput type="text" placeholder="{{\'tb.rulenode.server-attributes\' | translate}}"\n             style="max-width: 200px;"\n             [matChipInputFor]="serverAttributesChipList"\n             [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n             (matChipInputTokenEnd)="addKey($event, \'serverAttributeNames\')"\n             [matChipInputAddOnBlur]="true">\n    </mat-chip-list>\n    <mat-hint innerHTML="{{ \'tb.rulenode.server-attributes-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <label translate class="tb-title no-padding">tb.rulenode.latest-timeseries</label>\n  <mat-form-field floatLabel="always" class="mat-block">\n    <mat-label></mat-label>\n    <mat-chip-list #latestTimeseriesChipList>\n      <mat-chip\n        *ngFor="let key of originatorAttributesConfigForm.get(\'latestTsKeyNames\').value;"\n        (removed)="removeKey(key, \'latestTsKeyNames\')">\n        {{key}}\n        <mat-icon matChipRemove>close</mat-icon>\n      </mat-chip>\n      <input matInput type="text" placeholder="{{\'tb.rulenode.latest-timeseries\' | translate}}"\n             style="max-width: 200px;"\n             [matChipInputFor]="latestTimeseriesChipList"\n             [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n             (matChipInputTokenEnd)="addKey($event, \'latestTsKeyNames\')"\n             [matChipInputAddOnBlur]="true">\n    </mat-chip-list>\n    <mat-hint innerHTML="{{ \'tb.rulenode.latest-timeseries-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <mat-checkbox formControlName="getLatestValueWithTs" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.get-latest-value-with-ts\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" innerHTML="{{ \'tb.rulenode.get-latest-value-with-ts-hint\' | translate }}"></div>\n</section>\n',styles:[":host label.tb-title{margin-bottom:-10px}"]}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),tt=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.originatorFieldsConfigForm},n.prototype.onConfigurationSet=function(e){this.originatorFieldsConfigForm=this.fb.group({fieldsMapping:[e?e.fieldsMapping:null,[i.Validators.required]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-enrichment-node-originator-fields-config",template:'<section [formGroup]="originatorFieldsConfigForm" fxLayout="column">\n  <label translate class="tb-title tb-required">tb.rulenode.fields-mapping</label>\n  <tb-kv-map-config\n    required\n    formControlName="fieldsMapping"\n    requiredText="tb.rulenode.fields-mapping-required"\n    keyText="tb.rulenode.source-field"\n    keyRequiredText="tb.rulenode.source-field-required"\n    valText="tb.rulenode.target-attribute"\n    valRequiredText="tb.rulenode.target-attribute-required">\n  </tb-kv-map-config>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),nt=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.separatorKeysCodes=[m.ENTER,m.COMMA,m.SEMICOLON],r.fetchMode=j,r.fetchModes=Object.keys(j),r.samplingOrders=Object.keys(_),r.timeUnits=Object.keys(G),r.timeUnitsTranslationMap=B,r}return C(n,e),n.prototype.configForm=function(){return this.getTelemetryFromDatabaseConfigForm},n.prototype.onConfigurationSet=function(e){this.getTelemetryFromDatabaseConfigForm=this.fb.group({latestTsKeyNames:[e?e.latestTsKeyNames:null,[]],fetchMode:[e?e.fetchMode:null,[i.Validators.required]],orderBy:[e?e.orderBy:null,[]],limit:[e?e.limit:null,[]],useMetadataIntervalPatterns:[!!e&&e.useMetadataIntervalPatterns,[]],startInterval:[e?e.startInterval:null,[]],startIntervalTimeUnit:[e?e.startIntervalTimeUnit:null,[]],endInterval:[e?e.endInterval:null,[]],endIntervalTimeUnit:[e?e.endIntervalTimeUnit:null,[]],startIntervalPattern:[e?e.startIntervalPattern:null,[]],endIntervalPattern:[e?e.endIntervalPattern:null,[]]})},n.prototype.validatorTriggers=function(){return["fetchMode","useMetadataIntervalPatterns"]},n.prototype.updateValidators=function(e){var t=this.getTelemetryFromDatabaseConfigForm.get("fetchMode").value,n=this.getTelemetryFromDatabaseConfigForm.get("useMetadataIntervalPatterns").value;t&&t===j.ALL?(this.getTelemetryFromDatabaseConfigForm.get("orderBy").setValidators([i.Validators.required]),this.getTelemetryFromDatabaseConfigForm.get("limit").setValidators([i.Validators.required,i.Validators.min(2),i.Validators.max(1e3)])):(this.getTelemetryFromDatabaseConfigForm.get("orderBy").setValidators([]),this.getTelemetryFromDatabaseConfigForm.get("limit").setValidators([])),n?(this.getTelemetryFromDatabaseConfigForm.get("startInterval").setValidators([]),this.getTelemetryFromDatabaseConfigForm.get("startIntervalTimeUnit").setValidators([]),this.getTelemetryFromDatabaseConfigForm.get("endInterval").setValidators([]),this.getTelemetryFromDatabaseConfigForm.get("endIntervalTimeUnit").setValidators([]),this.getTelemetryFromDatabaseConfigForm.get("startIntervalPattern").setValidators([i.Validators.required]),this.getTelemetryFromDatabaseConfigForm.get("endIntervalPattern").setValidators([i.Validators.required])):(this.getTelemetryFromDatabaseConfigForm.get("startInterval").setValidators([i.Validators.required,i.Validators.min(1),i.Validators.max(2147483647)]),this.getTelemetryFromDatabaseConfigForm.get("startIntervalTimeUnit").setValidators([i.Validators.required]),this.getTelemetryFromDatabaseConfigForm.get("endInterval").setValidators([i.Validators.required,i.Validators.min(1),i.Validators.max(2147483647)]),this.getTelemetryFromDatabaseConfigForm.get("endIntervalTimeUnit").setValidators([i.Validators.required]),this.getTelemetryFromDatabaseConfigForm.get("startIntervalPattern").setValidators([]),this.getTelemetryFromDatabaseConfigForm.get("endIntervalPattern").setValidators([])),this.getTelemetryFromDatabaseConfigForm.get("orderBy").updateValueAndValidity({emitEvent:e}),this.getTelemetryFromDatabaseConfigForm.get("limit").updateValueAndValidity({emitEvent:e}),this.getTelemetryFromDatabaseConfigForm.get("startInterval").updateValueAndValidity({emitEvent:e}),this.getTelemetryFromDatabaseConfigForm.get("startIntervalTimeUnit").updateValueAndValidity({emitEvent:e}),this.getTelemetryFromDatabaseConfigForm.get("endInterval").updateValueAndValidity({emitEvent:e}),this.getTelemetryFromDatabaseConfigForm.get("endIntervalTimeUnit").updateValueAndValidity({emitEvent:e}),this.getTelemetryFromDatabaseConfigForm.get("startIntervalPattern").updateValueAndValidity({emitEvent:e}),this.getTelemetryFromDatabaseConfigForm.get("endIntervalPattern").updateValueAndValidity({emitEvent:e})},n.prototype.removeKey=function(e,t){var n=this.getTelemetryFromDatabaseConfigForm.get(t).value,r=n.indexOf(e);r>=0&&(n.splice(r,1),this.getTelemetryFromDatabaseConfigForm.get(t).setValue(n,{emitEvent:!0}))},n.prototype.addKey=function(e,t){var n=e.input,r=e.value;if((r||"").trim()){r=r.trim();var a=this.getTelemetryFromDatabaseConfigForm.get(t).value;a&&-1!==a.indexOf(r)||(a||(a=[]),a.push(r),this.getTelemetryFromDatabaseConfigForm.get(t).setValue(a,{emitEvent:!0}))}n&&(n.value="")},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-enrichment-node-get-telemetry-from-database",template:'<section [formGroup]="getTelemetryFromDatabaseConfigForm" fxLayout="column">\n  <label translate class="tb-title no-padding">tb.rulenode.latest-timeseries</label>\n  <mat-form-field floatLabel="always" class="mat-block">\n    <mat-label></mat-label>\n    <mat-chip-list #latestTimeseriesChipList>\n      <mat-chip\n        *ngFor="let key of getTelemetryFromDatabaseConfigForm.get(\'latestTsKeyNames\').value;"\n        (removed)="removeKey(key, \'latestTsKeyNames\')">\n        {{key}}\n        <mat-icon matChipRemove>close</mat-icon>\n      </mat-chip>\n      <input matInput type="text" placeholder="{{\'tb.rulenode.latest-timeseries\' | translate}}"\n             style="max-width: 200px;"\n             [matChipInputFor]="latestTimeseriesChipList"\n             [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n             (matChipInputTokenEnd)="addKey($event, \'latestTsKeyNames\')"\n             [matChipInputAddOnBlur]="true">\n    </mat-chip-list>\n    <mat-hint innerHTML="{{ \'tb.rulenode.latest-timeseries-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.fetch-mode</mat-label>\n    <mat-select formControlName="fetchMode" required>\n      <mat-option *ngFor="let mode of fetchModes" [value]="mode">\n        {{ mode }}\n      </mat-option>\n    </mat-select>\n    <mat-hint translate>tb.rulenode.fetch-mode-hint</mat-hint>\n  </mat-form-field>\n  <div fxLayout="column" *ngIf="getTelemetryFromDatabaseConfigForm.get(\'fetchMode\').value === fetchMode.ALL">\n    <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n      <mat-label translate>tb.rulenode.order-by</mat-label>\n      <mat-select formControlName="orderBy" required>\n        <mat-option *ngFor="let order of samplingOrders" [value]="order">\n          {{ order }}\n        </mat-option>\n      </mat-select>\n      <mat-hint translate>tb.rulenode.order-by-hint</mat-hint>\n    </mat-form-field>\n    <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n      <mat-label translate>tb.rulenode.limit</mat-label>\n      <input type="number" min="2" max="1000" step="1" matInput formControlName="limit" required>\n      <mat-hint translate>tb.rulenode.limit-hint</mat-hint>\n    </mat-form-field>\n  </div>\n  <mat-checkbox formControlName="useMetadataIntervalPatterns">\n    {{ \'tb.rulenode.use-metadata-interval-patterns\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" style="padding-bottom: 16px;" translate>tb.rulenode.use-metadata-interval-patterns-hint</div>\n  <div fxLayout="column" *ngIf="getTelemetryFromDatabaseConfigForm.get(\'useMetadataIntervalPatterns\').value === false; else intervalPattern">\n    <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.start-interval</mat-label>\n        <input type="number" step="1" min="1" max="2147483647" matInput formControlName="startInterval" required>\n        <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'startInterval\').hasError(\'required\')">\n          {{ \'tb.rulenode.start-interval-value-required\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'startInterval\').hasError(\'min\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'startInterval\').hasError(\'max\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.start-interval-time-unit</mat-label>\n        <mat-select formControlName="startIntervalTimeUnit" required>\n          <mat-option *ngFor="let timeUnit of timeUnits" [value]="timeUnit">\n            {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.end-interval</mat-label>\n        <input type="number" step="1" min="1" max="2147483647" matInput formControlName="endInterval" required>\n        <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'endInterval\').hasError(\'required\')">\n          {{ \'tb.rulenode.end-interval-value-required\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'endInterval\').hasError(\'min\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'endInterval\').hasError(\'max\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.end-interval-time-unit</mat-label>\n        <mat-select formControlName="endIntervalTimeUnit" required>\n          <mat-option *ngFor="let timeUnit of timeUnits" [value]="timeUnit">\n            {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n  </div>\n  <ng-template #intervalPattern>\n    <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n      <mat-label translate>tb.rulenode.start-interval-pattern</mat-label>\n      <input matInput formControlName="startIntervalPattern" required>\n      <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'startIntervalPattern\').hasError(\'required\')">\n        {{ \'tb.rulenode.start-interval-pattern-required\' | translate }}\n      </mat-error>\n      <mat-hint innerHTML="{{ \'tb.rulenode.start-interval-pattern-hint\' | translate }}"></mat-hint>\n    </mat-form-field>\n    <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n      <mat-label translate>tb.rulenode.end-interval-pattern</mat-label>\n      <input matInput formControlName="endIntervalPattern" required>\n      <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'endIntervalPattern\').hasError(\'required\')">\n        {{ \'tb.rulenode.end-interval-pattern-required\' | translate }}\n      </mat-error>\n      <mat-hint innerHTML="{{ \'tb.rulenode.end-interval-pattern-hint\' | translate }}"></mat-hint>\n    </mat-form-field>\n  </ng-template>\n</section>\n',styles:[":host label.tb-title{margin-bottom:-10px}"]}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),rt=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.relatedAttributesConfigForm},n.prototype.onConfigurationSet=function(e){this.relatedAttributesConfigForm=this.fb.group({relationsQuery:[e?e.relationsQuery:null,[i.Validators.required]],telemetry:[!!e&&e.telemetry,[]],attrMapping:[e?e.attrMapping:null,[i.Validators.required]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-enrichment-node-related-attributes-config",template:'<section [formGroup]="relatedAttributesConfigForm" fxLayout="column">\n  <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n  <tb-relations-query-config\n    required\n    formControlName="relationsQuery"\n    style="padding-bottom: 15px;">\n  </tb-relations-query-config>\n  <label translate class="tb-title tb-required">tb.rulenode.attr-mapping</label>\n  <mat-checkbox fxFlex formControlName="telemetry" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.latest-telemetry\' | translate }}\n  </mat-checkbox>\n  <tb-kv-map-config\n    required\n    formControlName="attrMapping"\n    requiredText="tb.rulenode.attr-mapping-required"\n    keyText="{{ relatedAttributesConfigForm.get(\'telemetry\').value ? \'tb.rulenode.source-telemetry\' : \'tb.rulenode.source-attribute\' }}"\n    keyRequiredText="{{ relatedAttributesConfigForm.get(\'telemetry\').value ? \'tb.rulenode.source-telemetry-required\' : \'tb.rulenode.source-attribute-required\' }}"\n    valText="tb.rulenode.target-attribute"\n    valRequiredText="tb.rulenode.target-attribute-required">\n  </tb-kv-map-config>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),at=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.tenantAttributesConfigForm},n.prototype.onConfigurationSet=function(e){this.tenantAttributesConfigForm=this.fb.group({telemetry:[!!e&&e.telemetry,[]],attrMapping:[e?e.attrMapping:null,[i.Validators.required]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-enrichment-node-tenant-attributes-config",template:'<section [formGroup]="tenantAttributesConfigForm" fxLayout="column">\n  <label translate class="tb-title tb-required">tb.rulenode.attr-mapping</label>\n  <mat-checkbox fxFlex formControlName="telemetry" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.latest-telemetry\' | translate }}\n  </mat-checkbox>\n  <tb-kv-map-config\n    required\n    formControlName="attrMapping"\n    requiredText="tb.rulenode.attr-mapping-required"\n    keyText="{{ tenantAttributesConfigForm.get(\'telemetry\').value ? \'tb.rulenode.source-telemetry\' : \'tb.rulenode.source-attribute\' }}"\n    keyRequiredText="{{ tenantAttributesConfigForm.get(\'telemetry\').value ? \'tb.rulenode.source-telemetry-required\' : \'tb.rulenode.source-attribute-required\' }}"\n    valText="tb.rulenode.target-attribute"\n    valRequiredText="tb.rulenode.target-attribute-required">\n  </tb-kv-map-config>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),ot=function(){function e(){}return e=v([t.NgModule({declarations:[Je,Ze,Xe,et,tt,nt,rt,at],imports:[n.CommonModule,a.SharedModule,Te],exports:[Je,Ze,Xe,et,tt,nt,rt,at]})],e)}(),it=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.originatorSource=I,r.originatorSources=Object.keys(I),r.originatorSourceTranslationMap=D,r}return C(n,e),n.prototype.configForm=function(){return this.changeOriginatorConfigForm},n.prototype.onConfigurationSet=function(e){this.changeOriginatorConfigForm=this.fb.group({originatorSource:[e?e.originatorSource:null,[i.Validators.required]],relationsQuery:[e?e.relationsQuery:null,[]]})},n.prototype.validatorTriggers=function(){return["originatorSource"]},n.prototype.updateValidators=function(e){var t=this.changeOriginatorConfigForm.get("originatorSource").value;t&&t===I.RELATED?this.changeOriginatorConfigForm.get("relationsQuery").setValidators([i.Validators.required]):this.changeOriginatorConfigForm.get("relationsQuery").setValidators([]),this.changeOriginatorConfigForm.get("relationsQuery").updateValueAndValidity({emitEvent:e})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-transformation-node-change-originator-config",template:'<section [formGroup]="changeOriginatorConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.originator-source</mat-label>\n    <mat-select formControlName="originatorSource" required>\n      <mat-option *ngFor="let source of originatorSources" [value]="source">\n        {{ originatorSourceTranslationMap.get(source) | translate }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <section fxLayout="column" *ngIf="changeOriginatorConfigForm.get(\'originatorSource\').value === originatorSource.RELATED">\n    <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n    <tb-relations-query-config\n      required\n      formControlName="relationsQuery"\n      style="padding-bottom: 15px;">\n    </tb-relations-query-config>\n  </section>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),lt=function(e){function n(t,n,r,a){var o=e.call(this,t)||this;return o.store=t,o.fb=n,o.nodeScriptTestService=r,o.translate=a,o}return C(n,e),n.prototype.configForm=function(){return this.scriptConfigForm},n.prototype.onConfigurationSet=function(e){this.scriptConfigForm=this.fb.group({jsScript:[e?e.jsScript:null,[i.Validators.required]]})},n.prototype.testScript=function(){var e=this,t=this.scriptConfigForm.get("jsScript").value;this.nodeScriptTestService.testNodeScript(t,"update",this.translate.instant("tb.rulenode.transformer"),"Transform",["msg","metadata","msgType"],this.ruleNodeId).subscribe((function(t){t&&e.scriptConfigForm.get("jsScript").setValue(t)}))},n.prototype.onValidate=function(){this.jsFuncComponent.validateOnSubmit()},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder},{type:s.NodeScriptTestService},{type:r.TranslateService}]},v([t.ViewChild("jsFuncComponent",{static:!0}),x("design:type",a.JsFuncComponent)],n.prototype,"jsFuncComponent",void 0),n=v([t.Component({selector:"tb-transformation-node-script-config",template:'<section [formGroup]="scriptConfigForm" fxLayout="column">\n  <label translate class="tb-title no-padding">tb.rulenode.transform</label>\n  <tb-js-func #jsFuncComponent\n              formControlName="jsScript"\n              functionName="Transform"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              noValidate="true">\n  </tb-js-func>\n  <div fxLayout="row">\n    <button mat-button mat-raised-button color="primary" (click)="testScript()">\n      {{ \'tb.rulenode.test-transformer-function\' | translate }}\n    </button>\n  </div>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder,s.NodeScriptTestService,r.TranslateService])],n)}(a.RuleNodeConfigurationComponent),st=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.toEmailConfigForm},n.prototype.onConfigurationSet=function(e){this.toEmailConfigForm=this.fb.group({fromTemplate:[e?e.fromTemplate:null,[i.Validators.required]],toTemplate:[e?e.toTemplate:null,[i.Validators.required]],ccTemplate:[e?e.ccTemplate:null,[]],bccTemplate:[e?e.bccTemplate:null,[]],subjectTemplate:[e?e.subjectTemplate:null,[i.Validators.required]],bodyTemplate:[e?e.bodyTemplate:null,[i.Validators.required]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-transformation-node-to-email-config",template:'<section [formGroup]="toEmailConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.from-template</mat-label>\n    <textarea required matInput formControlName="fromTemplate" rows="2"></textarea>\n    <mat-error *ngIf="toEmailConfigForm.get(\'fromTemplate\').hasError(\'required\')">\n      {{ \'tb.rulenode.from-template-required\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.from-template-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.to-template</mat-label>\n    <textarea required matInput formControlName="toTemplate" rows="2"></textarea>\n    <mat-error *ngIf="toEmailConfigForm.get(\'toTemplate\').hasError(\'required\')">\n      {{ \'tb.rulenode.to-template-required\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.mail-address-list-template-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.cc-template</mat-label>\n    <textarea matInput formControlName="ccTemplate" rows="2"></textarea>\n    <mat-hint innerHTML="{{ \'tb.rulenode.mail-address-list-template-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.bcc-template</mat-label>\n    <textarea matInput formControlName="bccTemplate" rows="2"></textarea>\n    <mat-hint innerHTML="{{ \'tb.rulenode.mail-address-list-template-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.subject-template</mat-label>\n    <textarea required matInput formControlName="subjectTemplate" rows="2"></textarea>\n    <mat-error *ngIf="toEmailConfigForm.get(\'subjectTemplate\').hasError(\'required\')">\n      {{ \'tb.rulenode.subject-template-required\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.subject-template-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" style="padding-bottom: 16px;">\n    <mat-label translate>tb.rulenode.body-template</mat-label>\n    <textarea required matInput formControlName="bodyTemplate" rows="6"></textarea>\n    <mat-error *ngIf="toEmailConfigForm.get(\'bodyTemplate\').hasError(\'required\')">\n      {{ \'tb.rulenode.body-template-required\' | translate }}\n    </mat-error>\n    <mat-hint innerHTML="{{ \'tb.rulenode.body-template-hint\' | translate }}"></mat-hint>\n  </mat-form-field>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),mt=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.duplicateToGroupConfigForm},n.prototype.onConfigurationSet=function(e){this.duplicateToGroupConfigForm=this.fb.group({entityGroupIsMessageOriginator:[!!e&&e.entityGroupIsMessageOriginator,[]],entityGroupId:[e?e.entityGroupId:null,[]]})},n.prototype.validatorTriggers=function(){return["entityGroupIsMessageOriginator"]},n.prototype.updateValidators=function(e){var t=this.duplicateToGroupConfigForm.get("entityGroupIsMessageOriginator").value,n=this.duplicateToGroupConfigForm.get("entityGroupId").value;e&&t&&n&&this.duplicateToGroupConfigForm.get("entityGroupId").reset(null,{emitEvent:!1}),t?this.duplicateToGroupConfigForm.get("entityGroupId").setValidators([]):this.duplicateToGroupConfigForm.get("entityGroupId").setValidators([i.Validators.required]),this.duplicateToGroupConfigForm.get("entityGroupId").updateValueAndValidity({emitEvent:e})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-transformation-node-duplicate-to-group-config",template:'<section [formGroup]="duplicateToGroupConfigForm" fxLayout="column">\n  <mat-checkbox fxFlex formControlName="entityGroupIsMessageOriginator" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.entity-group-is-message-originator\' | translate }}\n  </mat-checkbox>\n  <section fxLayout="column" *ngIf="!duplicateToGroupConfigForm.get(\'entityGroupIsMessageOriginator\').value">\n    <label translate class="tb-title tb-required">tb.rulenode.target-entity-group</label>\n    <tb-entity-group-select\n      fxFlex\n      formControlName="entityGroupId"\n      required\n      placeholderText="entity-group.select-entity-group"\n      notFoundText="entity-group.no-entity-groups-matching"\n      requiredText="entity-group.target-entity-group-required">\n    </tb-entity-group-select>\n  </section>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),ut=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r}return C(n,e),n.prototype.configForm=function(){return this.duplicateToRelatedConfigForm},n.prototype.onConfigurationSet=function(e){this.duplicateToRelatedConfigForm=this.fb.group({relationsQuery:[e?e.relationsQuery:null,[i.Validators.required]]})},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-transformation-node-duplicate-to-related-config",template:'<section [formGroup]="duplicateToRelatedConfigForm" fxLayout="column">\n  <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n  <tb-relations-query-config\n    style="padding-bottom: 15px;"\n    formControlName="relationsQuery">\n  </tb-relations-query-config>\n</section>\n'}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),pt=function(){function e(){}return e=v([t.NgModule({declarations:[it,lt,st,mt,ut],imports:[n.CommonModule,a.SharedModule,Te],exports:[it,lt,st,mt,ut]})],e)}(),dt=[i.Validators.required,i.Validators.min(1),i.Validators.max(2147483647)],ct=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.defaultTimezone=f.tz.guess(),r.aggPeriodTimeUnits=[G.MINUTES,G.HOURS,G.DAYS],r.timeUnitsTranslationMap=B,r.mathFunctions=Object.keys(ne),r.mathFunctionsTranslationMap=oe,r.aggIntervalType=ae,r.aggIntervalTypes=Object.keys(ae),r.aggIntervalTypesTranslationMap=le,r.intervalPersistPolicies=Object.keys(ie),r.intervalPersistPolicyTranslationMap=me,r.statePersistPolicies=Object.keys(se),r.statePersistPolicyTranslationMap=ue,r}return C(n,e),n.prototype.configForm=function(){return this.aggregateIncomingConfigForm},n.prototype.onConfigurationSet=function(e){this.aggregateIncomingConfigForm=this.fb.group({inputValueKey:[e?e.inputValueKey:null,[i.Validators.required]],outputValueKey:[e?e.outputValueKey:null,[i.Validators.required]],mathFunction:[e?e.mathFunction:null,[i.Validators.required]],aggIntervalType:[e&&e.aggIntervalType?e.aggIntervalType:ae.CUSTOM,[i.Validators.required]],timeZoneId:[e?e.mathFunction:null,[]],aggIntervalValue:[e?e.aggIntervalValue:null,[]],aggIntervalTimeUnit:[e?e.aggIntervalValue:null,[]],intervalPersistencePolicy:[e?e.intervalPersistencePolicy:null,[i.Validators.required]],intervalCheckValue:[e?e.intervalCheckValue:null,dt],intervalCheckTimeUnit:[e?e.intervalCheckTimeUnit:null,[i.Validators.required]],intervalTtlValue:[e?e.intervalTtlValue:null,dt],intervalTtlTimeUnit:[e?e.intervalTtlTimeUnit:null,[i.Validators.required]],statePersistencePolicy:[e?e.statePersistencePolicy:null,[i.Validators.required]],statePersistenceValue:[e?e.statePersistenceValue:null,dt],statePersistenceTimeUnit:[e?e.statePersistenceTimeUnit:null,[i.Validators.required]],autoCreateIntervals:[!!e&&e.autoCreateIntervals,[]],periodValue:[e?e.periodValue:null,[]],periodTimeUnit:[e?e.periodTimeUnit:null,[]],parentEntitiesQuery:this.fb.group({type:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.type:null,[i.Validators.required]],rootEntityId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.rootEntityId:null,[]],relationsQuery:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.relationsQuery:null,[]],entityId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.entityId:null,[]],entityGroupId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.entityGroupId:null,[]]})})},n.prototype.validatorTriggers=function(){return["aggIntervalType","parentEntitiesQuery.type","autoCreateIntervals"]},n.prototype.updateValidators=function(e,t){var n=this.aggregateIncomingConfigForm.get("parentEntitiesQuery"),r=n.get("type").value;if(e&&"parentEntitiesQuery.type"===t){var a={type:r};"relationsQuery"===r?(a.rootEntityId=null,a.relationsQuery=s.deepClone(ce)):"single"===r?a.entityId=null:"group"===r&&(a.entityGroupId=null),n.reset(a,{emitEvent:!1})}this.aggregateIncomingConfigForm.get("aggIntervalType").value===ae.CUSTOM?(this.aggregateIncomingConfigForm.get("timeZoneId").setValidators([]),this.aggregateIncomingConfigForm.get("aggIntervalValue").setValidators(dt),this.aggregateIncomingConfigForm.get("aggIntervalTimeUnit").setValidators([i.Validators.required])):(this.aggregateIncomingConfigForm.get("timeZoneId").setValidators([i.Validators.required]),this.aggregateIncomingConfigForm.get("aggIntervalValue").setValidators([]),this.aggregateIncomingConfigForm.get("aggIntervalTimeUnit").setValidators([])),this.aggregateIncomingConfigForm.get("timeZoneId").updateValueAndValidity({emitEvent:e}),this.aggregateIncomingConfigForm.get("aggIntervalValue").updateValueAndValidity({emitEvent:e}),this.aggregateIncomingConfigForm.get("aggIntervalTimeUnit").updateValueAndValidity({emitEvent:e});var o=this.aggregateIncomingConfigForm.get("autoCreateIntervals").value;n.get("rootEntityId").setValidators([]),n.get("relationsQuery").setValidators([]),n.get("entityId").setValidators([]),n.get("entityGroupId").setValidators([]),o?(this.aggregateIncomingConfigForm.get("periodValue").setValidators(dt),this.aggregateIncomingConfigForm.get("periodTimeUnit").setValidators([i.Validators.required]),"relationsQuery"===r?(n.get("rootEntityId").setValidators([i.Validators.required]),n.get("relationsQuery").setValidators([i.Validators.required])):"single"===r?n.get("entityId").setValidators([i.Validators.required]):"group"===r&&n.get("entityGroupId").setValidators([i.Validators.required])):(this.aggregateIncomingConfigForm.get("periodValue").setValidators([]),this.aggregateIncomingConfigForm.get("periodTimeUnit").setValidators([])),this.aggregateIncomingConfigForm.get("periodValue").updateValueAndValidity({emitEvent:e}),this.aggregateIncomingConfigForm.get("periodTimeUnit").updateValueAndValidity({emitEvent:e}),n.get("rootEntityId").updateValueAndValidity({emitEvent:e}),n.get("relationsQuery").updateValueAndValidity({emitEvent:e}),n.get("entityId").updateValueAndValidity({emitEvent:e}),n.get("entityGroupId").updateValueAndValidity({emitEvent:e})},n.prototype.prepareOutputConfig=function(e){return e.parentEntitiesQuery=ge(e.parentEntitiesQuery),e},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-analytics-node-aggregate-incoming-config",template:'<section [formGroup]="aggregateIncomingConfigForm" fxLayout="column">\n  <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.input-value-key</mat-label>\n      <input required matInput formControlName="inputValueKey">\n      <mat-error *ngIf="aggregateIncomingConfigForm.get(\'inputValueKey\').hasError(\'required\')">\n        {{ \'tb.rulenode.input-value-key-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.output-value-key</mat-label>\n      <input required matInput formControlName="outputValueKey">\n      <mat-error *ngIf="aggregateIncomingConfigForm.get(\'outputValueKey\').hasError(\'required\')">\n        {{ \'tb.rulenode.output-value-key-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <mat-expansion-panel [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.aggregation</mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.rulenode.math-function</mat-label>\n      <mat-select formControlName="mathFunction" required>\n        <mat-option *ngFor="let mathFunction of mathFunctions" [value]="mathFunction">\n          {{ mathFunctionsTranslationMap.get(mathFunction) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.rulenode.aggregate-interval-type</mat-label>\n      <mat-select formControlName="aggIntervalType" required>\n        <mat-option *ngFor="let type of aggIntervalTypes" [value]="type">\n          {{ aggIntervalTypesTranslationMap.get(type) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <tb-timezone-select\n      *ngIf="aggregateIncomingConfigForm.get(\'aggIntervalType\').value !== aggIntervalType.CUSTOM"\n      required\n      [defaultTimezone]="defaultTimezone"\n      formControlName="timeZoneId">\n    </tb-timezone-select>\n    <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px"\n         *ngIf="aggregateIncomingConfigForm.get(\'aggIntervalType\').value === aggIntervalType.CUSTOM">\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.agg-interval-value</mat-label>\n        <input type="number" step="1" min="1" max="2147483647" matInput formControlName="aggIntervalValue" required>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'aggIntervalValue\').hasError(\'required\')">\n          {{ \'tb.rulenode.agg-interval-value-required\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'aggIntervalValue\').hasError(\'min\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'aggIntervalValue\').hasError(\'max\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.agg-interval-time-unit</mat-label>\n        <mat-select formControlName="aggIntervalTimeUnit" required>\n          <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n            {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n  </mat-expansion-panel>\n  <mat-expansion-panel [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.interval-persistence-and-ttl</mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.rulenode.interval-persistence-policy</mat-label>\n      <mat-select formControlName="intervalPersistencePolicy" required>\n        <mat-option *ngFor="let policy of intervalPersistPolicies" [value]="policy">\n          {{ intervalPersistPolicyTranslationMap.get(policy) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.interval-check-value</mat-label>\n        <input type="number" step="1" min="1" max="2147483647" matInput formControlName="intervalCheckValue" required>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'intervalCheckValue\').hasError(\'required\')">\n          {{ \'tb.rulenode.interval-check-value-required\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'intervalCheckValue\').hasError(\'min\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'intervalCheckValue\').hasError(\'max\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.interval-check-time-unit</mat-label>\n        <mat-select formControlName="intervalCheckTimeUnit" required>\n          <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n            {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.interval-ttl-value</mat-label>\n        <input type="number" step="1" min="1" max="2147483647" matInput formControlName="intervalTtlValue" required>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'intervalTtlValue\').hasError(\'required\')">\n          {{ \'tb.rulenode.interval-ttl-value-required\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'intervalTtlValue\').hasError(\'min\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'intervalTtlValue\').hasError(\'max\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.interval-ttl-time-unit</mat-label>\n        <mat-select formControlName="intervalTtlTimeUnit" required>\n          <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n            {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n  </mat-expansion-panel>\n  <mat-expansion-panel [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.state-persistence</mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.rulenode.state-persistence-policy</mat-label>\n      <mat-select formControlName="statePersistencePolicy" required>\n        <mat-option *ngFor="let policy of statePersistPolicies" [value]="policy">\n          {{ statePersistPolicyTranslationMap.get(policy) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.state-persistence-value</mat-label>\n        <input type="number" step="1" min="1" max="2147483647" matInput formControlName="statePersistenceValue" required>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'statePersistenceValue\').hasError(\'required\')">\n          {{ \'tb.rulenode.state-persistence-value-required\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'statePersistenceValue\').hasError(\'min\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'statePersistenceValue\').hasError(\'max\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.state-persistence-time-unit</mat-label>\n        <mat-select formControlName="statePersistenceTimeUnit" required>\n          <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n            {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n  </mat-expansion-panel>\n  <mat-checkbox fxFlex formControlName="autoCreateIntervals" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.auto-create-intervals\' | translate }}\n  </mat-checkbox>\n  <mat-expansion-panel *ngIf="aggregateIncomingConfigForm.get(\'autoCreateIntervals\').value"\n    [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.interval-entities</mat-panel-title>\n    </mat-expansion-panel-header>\n    <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.execution-period-value</mat-label>\n        <input type="number" step="1" min="1" max="2147483647" matInput formControlName="periodValue" required>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'periodValue\').hasError(\'required\')">\n          {{ \'tb.rulenode.execution-period-value-required\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'periodValue\').hasError(\'min\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'periodValue\').hasError(\'max\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.execution-period-time-unit</mat-label>\n        <mat-select formControlName="periodTimeUnit" required>\n          <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n            {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <mat-expansion-panel [expanded]="true">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.entities</mat-panel-title>\n      </mat-expansion-panel-header>\n      <div formGroupName="parentEntitiesQuery" fxLayout="column">\n        <mat-radio-group formControlName="type" fxLayout="row" fxLayoutGap="8px"\n                         style="padding-top: 16px; padding-bottom: 16px;">\n          <mat-radio-button [value]="\'single\'" color="primary">\n            <span translate>tb.rulenode.single-entity</span>\n          </mat-radio-button>\n          <mat-radio-button [value]="\'group\'" color="primary">\n            <span translate>tb.rulenode.group-of-entities</span>\n          </mat-radio-button>\n          <mat-radio-button [value]="\'relationsQuery\'" color="primary">\n            <span translate>tb.rulenode.relations-query</span>\n          </mat-radio-button>\n        </mat-radio-group>\n        <section *ngIf="aggregateIncomingConfigForm.get(\'parentEntitiesQuery.type\').value === \'relationsQuery\'"\n                 fxLayout="column">\n          <label translate class="tb-title tb-required">tb.rulenode.root-entity</label>\n          <tb-entity-select\n            required\n            formControlName="rootEntityId">\n          </tb-entity-select>\n          <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n          <tb-relations-query-config\n            style="padding-bottom: 15px;"\n            formControlName="relationsQuery">\n          </tb-relations-query-config>\n        </section>\n        <tb-entity-select\n          *ngIf="aggregateIncomingConfigForm.get(\'parentEntitiesQuery.type\').value === \'single\'"\n          required\n          formControlName="entityId">\n        </tb-entity-select>\n        <tb-entity-group-select\n          *ngIf="aggregateIncomingConfigForm.get(\'parentEntitiesQuery.type\').value === \'group\'"\n          required\n          formControlName="entityGroupId"\n          placeholderText="entity-group.select-entity-group"\n          notFoundText="entity-group.no-entity-groups-matching"\n          requiredText="entity-group.target-entity-group-required">\n        </tb-entity-group-select>\n      </div>\n    </mat-expansion-panel>\n  </mat-expansion-panel>\n</section>\n',styles:[":host .mat-expansion-panel{margin:0 6px 16px}"]}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),gt=[i.Validators.required,i.Validators.min(1),i.Validators.max(2147483647)],ft=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.aggPeriodTimeUnits=[G.MINUTES,G.HOURS,G.DAYS],r.timeUnitsTranslationMap=B,r}return C(n,e),n.prototype.configForm=function(){return this.aggregateLatestConfigForm},n.prototype.onConfigurationSet=function(e){this.aggregateLatestConfigForm=this.fb.group({periodValue:[e?e.periodValue:null,gt],periodTimeUnit:[e?e.periodTimeUnit:null,[i.Validators.required]],parentEntitiesQuery:this.fb.group({type:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.type:null,[i.Validators.required]],rootEntityId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.rootEntityId:null,[]],relationsQuery:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.relationsQuery:null,[]],entityId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.entityId:null,[]],entityGroupId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.entityGroupId:null,[]],childRelationsQuery:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.childRelationsQuery:null,[]]}),aggMappings:[e?e.aggMappings:null,[i.Validators.required]]})},n.prototype.validatorTriggers=function(){return["parentEntitiesQuery.type"]},n.prototype.updateValidators=function(e,t){var n=this.aggregateLatestConfigForm.get("parentEntitiesQuery"),r=n.get("type").value;if(e&&"parentEntitiesQuery.type"===t){var a={type:r};"relationsQuery"===r?(a.rootEntityId=null,a.relationsQuery=s.deepClone(ce),a.childRelationsQuery=s.deepClone(ce)):"single"===r?(a.entityId=null,a.childRelationsQuery=s.deepClone(ce)):"group"===r&&(a.entityGroupId=null),n.reset(a,{emitEvent:!1})}n.get("rootEntityId").setValidators([]),n.get("relationsQuery").setValidators([]),n.get("entityId").setValidators([]),n.get("entityGroupId").setValidators([]),n.get("childRelationsQuery").setValidators([]),"relationsQuery"===r?(n.get("rootEntityId").setValidators([i.Validators.required]),n.get("relationsQuery").setValidators([i.Validators.required]),n.get("childRelationsQuery").setValidators([i.Validators.required])):"single"===r?(n.get("entityId").setValidators([i.Validators.required]),n.get("childRelationsQuery").setValidators([i.Validators.required])):"group"===r&&n.get("entityGroupId").setValidators([i.Validators.required]),n.get("rootEntityId").updateValueAndValidity({emitEvent:e}),n.get("relationsQuery").updateValueAndValidity({emitEvent:e}),n.get("entityId").updateValueAndValidity({emitEvent:e}),n.get("entityGroupId").updateValueAndValidity({emitEvent:e}),n.get("childRelationsQuery").updateValueAndValidity({emitEvent:e})},n.prototype.prepareOutputConfig=function(e){return e.parentEntitiesQuery=ge(e.parentEntitiesQuery),e},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-analytics-node-aggregate-latest-config",template:'<section [formGroup]="aggregateLatestConfigForm" fxLayout="column">\n  <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.execution-period-value</mat-label>\n      <input type="number" step="1" min="1" max="2147483647" matInput formControlName="periodValue" required>\n      <mat-error *ngIf="aggregateLatestConfigForm.get(\'periodValue\').hasError(\'required\')">\n        {{ \'tb.rulenode.execution-period-value-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="aggregateLatestConfigForm.get(\'periodValue\').hasError(\'min\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="aggregateLatestConfigForm.get(\'periodValue\').hasError(\'max\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.execution-period-time-unit</mat-label>\n      <mat-select formControlName="periodTimeUnit" required>\n        <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n          {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div formGroupName="parentEntitiesQuery">\n    <mat-expansion-panel [expanded]="true">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.entities</mat-panel-title>\n      </mat-expansion-panel-header>\n        <mat-radio-group formControlName="type" fxLayout="row" fxLayoutGap="8px"\n                         style="padding-top: 16px; padding-bottom: 16px;">\n          <mat-radio-button [value]="\'single\'" color="primary">\n            <span translate>tb.rulenode.single-entity</span>\n          </mat-radio-button>\n          <mat-radio-button [value]="\'group\'" color="primary">\n            <span translate>tb.rulenode.group-of-entities</span>\n          </mat-radio-button>\n          <mat-radio-button [value]="\'relationsQuery\'" color="primary">\n            <span translate>tb.rulenode.relations-query</span>\n          </mat-radio-button>\n        </mat-radio-group>\n        <section *ngIf="aggregateLatestConfigForm.get(\'parentEntitiesQuery.type\').value === \'relationsQuery\'"\n                 fxLayout="column">\n          <label translate class="tb-title tb-required">tb.rulenode.root-entity</label>\n          <tb-entity-select\n            required\n            formControlName="rootEntityId">\n          </tb-entity-select>\n          <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n          <tb-relations-query-config\n            style="padding-bottom: 15px;"\n            formControlName="relationsQuery">\n          </tb-relations-query-config>\n        </section>\n        <tb-entity-select\n          *ngIf="aggregateLatestConfigForm.get(\'parentEntitiesQuery.type\').value === \'single\'"\n          required\n          formControlName="entityId">\n        </tb-entity-select>\n        <tb-entity-group-select\n          *ngIf="aggregateLatestConfigForm.get(\'parentEntitiesQuery.type\').value === \'group\'"\n          required\n          formControlName="entityGroupId"\n          placeholderText="entity-group.select-entity-group"\n          notFoundText="entity-group.no-entity-groups-matching"\n          requiredText="entity-group.target-entity-group-required">\n        </tb-entity-group-select>\n    </mat-expansion-panel>\n    <mat-expansion-panel *ngIf="aggregateLatestConfigForm.get(\'parentEntitiesQuery.type\').value === \'relationsQuery\' ||\n                                aggregateLatestConfigForm.get(\'parentEntitiesQuery.type\').value === \'single\'"\n                         [expanded]="true">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.child-entities</mat-panel-title>\n      </mat-expansion-panel-header>\n      <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n      <tb-relations-query-config\n        style="padding-bottom: 15px;"\n        formControlName="childRelationsQuery">\n      </tb-relations-query-config>\n    </mat-expansion-panel>\n  </div>\n  <mat-expansion-panel [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.agg-latest-mappings</mat-panel-title>\n    </mat-expansion-panel-header>\n    <tb-agg-latest-mapping-table\n      required\n      formControlName="aggMappings"\n      style="padding-bottom: 15px;">\n    </tb-agg-latest-mapping-table>\n  </mat-expansion-panel>\n</section>\n',styles:[":host .mat-expansion-panel{margin:0 6px 16px}"]}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),yt=function(e){function n(t,n,r,o,i,l){var s=e.call(this,t,n,o)||this;return s.store=t,s.router=n,s.data=r,s.dialogRef=o,s.fb=i,s.translate=l,s.latestTelemetry=a.LatestTelemetry,s.attributeScope=a.AttributeScope,s.attributeScopes=Object.keys(a.AttributeScope),s.telemetryTypeTranslationMap=a.telemetryTypeTranslations,s.mathFunctions=Object.keys(ne),s.mathFunctionsTranslationMap=oe,s.separatorKeysCodes=[m.ENTER,m.COMMA,m.SEMICOLON],s.isAdd=r.isAdd,s.mapping=r.mapping,s.isAdd&&!s.mapping&&(s.mapping={source:"",sourceScope:a.LatestTelemetry.LATEST_TELEMETRY,defaultValue:0,target:"",aggFunction:ne.AVG}),s.filterEntities=!!s.mapping.filter,s}return C(n,e),n.prototype.ngOnInit=function(){this.aggLatestMappingFormGroup=this.fb.group({sourceScope:[this.mapping.sourceScope,[]],source:[this.mapping.source,[]],defaultValue:[this.mapping.defaultValue,[i.Validators.required]],aggFunction:[this.mapping.aggFunction,[]],target:[this.mapping.target,[i.Validators.required]],filter:this.fb.group({clientAttributeNames:[this.mapping.filter?this.mapping.filter.clientAttributeNames:[],[]],sharedAttributeNames:[this.mapping.filter?this.mapping.filter.sharedAttributeNames:[],[]],serverAttributeNames:[this.mapping.filter?this.mapping.filter.serverAttributeNames:[],[]],latestTsKeyNames:[this.mapping.filter?this.mapping.filter.latestTsKeyNames:[],[]],filterFunction:[this.mapping.filter?this.mapping.filter.filterFunction:null,[]]})}),this.filterEntities||this.aggLatestMappingFormGroup.get("filter").disable({emitEvent:!1})},n.prototype.filterEntitiesChange=function(){this.filterEntities?(this.aggLatestMappingFormGroup.get("filter").setValue({clientAttributeNames:[],sharedAttributeNames:[],serverAttributeNames:[],latestTsKeyNames:[],filterFunction:"return true;"},{emitEvent:!0}),this.aggLatestMappingFormGroup.get("filter").enable({emitEvent:!0})):this.aggLatestMappingFormGroup.get("filter").disable({emitEvent:!0}),this.aggLatestMappingFormGroup.get("filter").markAsDirty()},n.prototype.removeKey=function(e,t){var n=this.aggLatestMappingFormGroup.get("filter").get(t).value,r=n.indexOf(e);r>=0&&(n.splice(r,1),this.aggLatestMappingFormGroup.get("filter").get(t).setValue(n,{emitEvent:!0}),this.aggLatestMappingFormGroup.get("filter").get(t).markAsDirty())},n.prototype.addKey=function(e,t){var n=e.input,r=e.value;if((r||"").trim()){r=r.trim();var a=this.aggLatestMappingFormGroup.get("filter").get(t).value;a&&-1!==a.indexOf(r)||(a||(a=[]),a.push(r),this.aggLatestMappingFormGroup.get("filter").get(t).setValue(a,{emitEvent:!0}),this.aggLatestMappingFormGroup.get("filter").get(t).markAsDirty())}n&&(n.value="")},n.prototype.cancel=function(){this.dialogRef.close()},n.prototype.save=function(){this.mapping=this.aggLatestMappingFormGroup.value,this.dialogRef.close(this.mapping)},n.ctorParameters=function(){return[{type:o.Store},{type:b.Router},{type:void 0,decorators:[{type:t.Inject,args:[y.MAT_DIALOG_DATA]}]},{type:y.MatDialogRef},{type:i.FormBuilder},{type:r.TranslateService}]},n=v([t.Component({selector:"tb-agg-latest-mapping-dialog",template:'\x3c!--\n\n    ThingsBoard, Inc. ("COMPANY") CONFIDENTIAL\n\n    Copyright © 2016-2020 ThingsBoard, Inc. All Rights Reserved.\n\n    NOTICE: All information contained herein is, and remains\n    the property of ThingsBoard, Inc. and its suppliers,\n    if any.  The intellectual and technical concepts contained\n    herein are proprietary to ThingsBoard, Inc.\n    and its suppliers and may be covered by U.S. and Foreign Patents,\n    patents in process, and are protected by trade secret or copyright law.\n\n    Dissemination of this information or reproduction of this material is strictly forbidden\n    unless prior written permission is obtained from COMPANY.\n\n    Access to the source code contained herein is hereby forbidden to anyone except current COMPANY employees,\n    managers or contractors who have executed Confidentiality and Non-disclosure agreements\n    explicitly covering such access.\n\n    The copyright notice above does not evidence any actual or intended publication\n    or disclosure  of  this source code, which includes\n    information that is confidential and/or proprietary, and is a trade secret, of  COMPANY.\n    ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,\n    OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT\n    THE EXPRESS WRITTEN CONSENT OF COMPANY IS STRICTLY PROHIBITED,\n    AND IN VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.\n    THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION\n    DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS,\n    OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.\n\n--\x3e\n<form [formGroup]="aggLatestMappingFormGroup" (ngSubmit)="save()" style="width: 650px;">\n  <mat-toolbar fxLayout="row" color="primary">\n    <h2>{{ (isAdd ? \'tb.rulenode.add-mapping\' : \'tb.rulenode.edit-mapping\') | translate }}</h2>\n    <span fxFlex></span>\n    <button mat-button mat-icon-button\n            (click)="cancel()"\n            type="button">\n      <mat-icon class="material-icons">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color="warn" mode="indeterminate" *ngIf="isLoading$ | async">\n  </mat-progress-bar>\n  <div style="height: 4px;" *ngIf="!(isLoading$ | async)"></div>\n  <div mat-dialog-content>\n    <fieldset [disabled]="isLoading$ | async">\n      <tb-checkbox\n        [trueValue]="latestTelemetry.LATEST_TELEMETRY"\n        [falseValue]="attributeScope.SERVER_SCOPE"\n        formControlName="sourceScope" style="display: block; margin-bottom: 16px;">\n        {{ \'tb.rulenode.latest-telemetry\' | translate }}\n      </tb-checkbox>\n      <div fxLayout="row" fxLayoutGap="8px">\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label>{{(aggLatestMappingFormGroup.get(\'sourceScope\').value ===\n                   latestTelemetry.LATEST_TELEMETRY ? \'tb.rulenode.source-telemetry\'\n                            : \'tb.rulenode.source-attribute\') | translate}}</mat-label>\n          <input matInput formControlName="source">\n        </mat-form-field>\n        <mat-form-field class="mat-block"\n                        *ngIf="aggLatestMappingFormGroup.get(\'sourceScope\').value !== latestTelemetry.LATEST_TELEMETRY"\n                        style="width: 200px;">\n          <mat-label translate>tb.rulenode.attribute-scope</mat-label>\n          <mat-select formControlName="sourceScope">\n            <mat-option *ngFor="let scope of attributeScopes" [value]="scope">\n              {{ telemetryTypeTranslationMap.get(scope) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.default-value</mat-label>\n          <input required type="number" matInput formControlName="defaultValue">\n          <mat-error *ngIf="aggLatestMappingFormGroup.get(\'defaultValue\').hasError(\'required\')">\n            {{ \'tb.rulenode.default-value-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <div fxLayout="row" fxLayoutGap="8px">\n        <mat-form-field class="mat-block" style="width: 200px;">\n          <mat-label translate>tb.rulenode.math-function</mat-label>\n          <mat-select formControlName="aggFunction" required>\n            <mat-option *ngFor="let mathFunction of mathFunctions" [value]="mathFunction">\n              {{ mathFunctionsTranslationMap.get(mathFunction) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.target-telemetry</mat-label>\n          <input required matInput formControlName="target">\n          <mat-error *ngIf="aggLatestMappingFormGroup.get(\'target\').hasError(\'required\')">\n            {{ \'tb.rulenode.target-telemetry-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <mat-checkbox\n        [(ngModel)]="filterEntities"\n        [ngModelOptions]="{ standalone: true}"\n        (ngModelChange)="filterEntitiesChange()" style="display: block; margin-bottom: 16px;">\n        {{ \'tb.rulenode.filter-entities\' | translate }}\n      </mat-checkbox>\n      <mat-expansion-panel *ngIf="filterEntities"\n        [expanded]="true" formGroupName="filter">\n        <mat-expansion-panel-header>\n          <mat-panel-title translate>tb.rulenode.entity-filter</mat-panel-title>\n        </mat-expansion-panel-header>\n        <section fxLayout="column">\n          <label translate class="tb-title no-padding" style="padding-bottom: 10px;">tb.rulenode.fetch-entity-attributes</label>\n          <label translate class="tb-title no-padding">tb.rulenode.client-attributes</label>\n          <mat-form-field floatLabel="always" class="mat-block">\n            <mat-label></mat-label>\n            <mat-chip-list #clientAttributesChipList>\n              <mat-chip\n                *ngFor="let key of aggLatestMappingFormGroup.get(\'filter\').get(\'clientAttributeNames\').value;"\n                (removed)="removeKey(key, \'clientAttributeNames\')">\n                {{key}}\n                <mat-icon matChipRemove>close</mat-icon>\n              </mat-chip>\n              <input matInput type="text" placeholder="{{\'tb.rulenode.client-attributes\' | translate}}"\n                     style="max-width: 200px;"\n                     [matChipInputFor]="clientAttributesChipList"\n                     [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                     (matChipInputTokenEnd)="addKey($event, \'clientAttributeNames\')"\n                     [matChipInputAddOnBlur]="true">\n            </mat-chip-list>\n          </mat-form-field>\n          <label translate class="tb-title no-padding">tb.rulenode.shared-attributes</label>\n          <mat-form-field floatLabel="always" class="mat-block">\n            <mat-label></mat-label>\n            <mat-chip-list #sharedAttributesChipList>\n              <mat-chip\n                *ngFor="let key of aggLatestMappingFormGroup.get(\'filter\').get(\'sharedAttributeNames\').value;"\n                (removed)="removeKey(key, \'sharedAttributeNames\')">\n                {{key}}\n                <mat-icon matChipRemove>close</mat-icon>\n              </mat-chip>\n              <input matInput type="text" placeholder="{{\'tb.rulenode.shared-attributes\' | translate}}"\n                     style="max-width: 200px;"\n                     [matChipInputFor]="sharedAttributesChipList"\n                     [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                     (matChipInputTokenEnd)="addKey($event, \'sharedAttributeNames\')"\n                     [matChipInputAddOnBlur]="true">\n            </mat-chip-list>\n          </mat-form-field>\n          <label translate class="tb-title no-padding">tb.rulenode.server-attributes</label>\n          <mat-form-field floatLabel="always" class="mat-block">\n            <mat-label></mat-label>\n            <mat-chip-list #serverAttributesChipList>\n              <mat-chip\n                *ngFor="let key of aggLatestMappingFormGroup.get(\'filter\').get(\'serverAttributeNames\').value;"\n                (removed)="removeKey(key, \'serverAttributeNames\')">\n                {{key}}\n                <mat-icon matChipRemove>close</mat-icon>\n              </mat-chip>\n              <input matInput type="text" placeholder="{{\'tb.rulenode.server-attributes\' | translate}}"\n                     style="max-width: 200px;"\n                     [matChipInputFor]="serverAttributesChipList"\n                     [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                     (matChipInputTokenEnd)="addKey($event, \'serverAttributeNames\')"\n                     [matChipInputAddOnBlur]="true">\n            </mat-chip-list>\n          </mat-form-field>\n          <label translate class="tb-title no-padding">tb.rulenode.latest-timeseries</label>\n          <mat-form-field floatLabel="always" class="mat-block">\n            <mat-label></mat-label>\n            <mat-chip-list #latestTimeseriesChipList>\n              <mat-chip\n                *ngFor="let key of aggLatestMappingFormGroup.get(\'filter\').get(\'latestTsKeyNames\').value;"\n                (removed)="removeKey(key, \'latestTsKeyNames\')">\n                {{key}}\n                <mat-icon matChipRemove>close</mat-icon>\n              </mat-chip>\n              <input matInput type="text" placeholder="{{\'tb.rulenode.latest-timeseries\' | translate}}"\n                     style="max-width: 200px;"\n                     [matChipInputFor]="latestTimeseriesChipList"\n                     [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                     (matChipInputTokenEnd)="addKey($event, \'latestTsKeyNames\')"\n                     [matChipInputAddOnBlur]="true">\n            </mat-chip-list>\n          </mat-form-field>\n          <label translate class="tb-title no-padding">tb.rulenode.filter</label>\n          <tb-js-func\n            formControlName="filterFunction"\n            functionName="Filter"\n            [functionArgs]="[\'attributes\']"\n            noValidate>\n          </tb-js-func>\n        </section>\n      </mat-expansion-panel>\n    </fieldset>\n  </div>\n  <div mat-dialog-actions fxLayout="row" fxLayoutAlign="end center">\n    <span fxFlex></span>\n    <button mat-button mat-raised-button color="primary"\n            type="submit"\n            [disabled]="(isLoading$ | async) || aggLatestMappingFormGroup.invalid || !aggLatestMappingFormGroup.dirty">\n      {{ (isAdd ? \'action.add\' : \'action.save\') | translate }}\n    </button>\n    <button mat-button color="primary"\n            style="margin-right: 20px;"\n            type="button"\n            [disabled]="(isLoading$ | async)"\n            (click)="cancel()" cdkFocusInitial>\n      {{ \'action.cancel\' | translate }}\n    </button>\n  </div>\n</form>\n'}),F(2,t.Inject(y.MAT_DIALOG_DATA)),x("design:paramtypes",[o.Store,b.Router,Object,y.MatDialogRef,i.FormBuilder,r.TranslateService])],n)}(a.DialogComponent),bt=function(e){function n(t,n,r,a){var o=e.call(this,t)||this;return o.store=t,o.translate=n,o.injector=r,o.dialog=a,o.propagateChange=null,o}var a;return C(n,e),a=n,Object.defineProperty(n.prototype,"required",{get:function(){return this.requiredValue},set:function(e){this.requiredValue=u.coerceBooleanProperty(e)},enumerable:!0,configurable:!0}),n.prototype.ngOnInit=function(){},n.prototype.registerOnChange=function(e){this.propagateChange=e},n.prototype.registerOnTouched=function(e){},n.prototype.setDisabledState=function(e){this.disabled=e},n.prototype.writeValue=function(e){this.mappings=e||[]},n.prototype.mappingDisplayValue=function(e){var t="";return e.filter&&(t+=this.translate.instant("tb.rulenode.filter-entities")+" -> "),t+=this.translate.instant(oe.get(e.aggFunction)),e.aggFunction!==ne.COUNT&&(t+="("+e.source+")"),t+=" -> "+e.target},n.prototype.removeAggMapping=function(e){e>-1&&(this.mappings.splice(e,1),this.updateModel())},n.prototype.addAggMapping=function(e){this.openAggMappingDialog(e)},n.prototype.editAggMapping=function(e,t){this.openAggMappingDialog(e,t)},n.prototype.openAggMappingDialog=function(e,t){var n=this;e&&e.stopPropagation();var r,a=!t;a||(r=this.mappings.indexOf(t)),this.dialog.open(yt,{disableClose:!0,panelClass:["tb-dialog","tb-fullscreen-dialog"],data:{isAdd:a,mapping:a?null:s.deepClone(t)}}).afterClosed().subscribe((function(e){e&&(a?n.mappings.push(e):n.mappings[r]=e,n.updateModel())}))},n.prototype.updateModel=function(){this.required&&!this.mappings.length?this.propagateChange(null):this.propagateChange(this.mappings)},n.ctorParameters=function(){return[{type:o.Store},{type:r.TranslateService},{type:t.Injector},{type:y.MatDialog}]},v([t.Input(),x("design:type",Boolean)],n.prototype,"disabled",void 0),v([t.Input(),x("design:type",Boolean),x("design:paramtypes",[Boolean])],n.prototype,"required",null),n=a=v([t.Component({selector:"tb-agg-latest-mapping-table",template:'<section class="tb-agg-latest-mapping-table" fxLayout="column">\n  <label translate class="tb-title no-padding">tb.rulenode.mappings</label>\n  <div class="body">\n    <div class="row mat-elevation-z1" fxFlex fxLayout="row" fxLayoutAlign="start center"\n         *ngFor="let aggMapping of mappings; let $index = index">\n      <span class="cell tb-agg-mapping-display-value" fxFlex>{{ mappingDisplayValue(aggMapping)}}</span>\n      <button [fxShow]="!disabled"\n              [disabled]="isLoading$ | async"\n              mat-icon-button color="primary" type="button"\n              (click)="editAggMapping($event, aggMapping)"\n              matTooltip="{{\'tb.rulenode.edit-mapping\' | translate}}"\n              matTooltipPosition="above">\n        <mat-icon>edit</mat-icon>\n      </button>\n      <button [fxShow]="!disabled"\n              [disabled]="isLoading$ | async"\n              mat-icon-button color="primary" type="button"\n              (click)="removeAggMapping($index)"\n              matTooltip="{{\'tb.rulenode.remove-mapping\' | translate}}"\n              matTooltipPosition="above">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n  </div>\n  <span [fxShow]="!mappings.length"\n        fxLayoutAlign="center center" [ngClass]="{\'disabled\': disabled, \'required\': required}"\n        class="no-data-found" translate>tb.rulenode.add-mapping-prompt</span>\n  <div style="padding-top: 20px;">\n    <button [fxShow]="!disabled" [disabled]="isLoading$ | async" type="button"\n            mat-raised-button color="primary" (click)="addAggMapping($event)"\n            matTooltip="{{ \'tb.rulenode.add-mapping\' | translate }}"\n            matTooltipPosition="above">\n      <mat-icon>add</mat-icon>\n      {{ \'action.add\' | translate }}\n    </button>\n  </div>\n</section>\n',providers:[{provide:i.NG_VALUE_ACCESSOR,useExisting:t.forwardRef((function(){return a})),multi:!0}],styles:[":host .tb-agg-latest-mapping-table .body{padding-left:5px;padding-right:5px;max-height:300px;overflow:auto}:host .tb-agg-latest-mapping-table .body .row{padding:0 0 0 5px;margin:5px 5px 5px 0;max-height:40px}:host .tb-agg-latest-mapping-table .body .cell{padding-left:5px;padding-right:5px}:host .tb-agg-latest-mapping-table .body .cell.tb-agg-mapping-display-value{font-size:14px;line-height:16px;color:rgba(0,0,0,.7)}:host .tb-agg-latest-mapping-table span.no-data-found{position:relative;height:40px;text-transform:uppercase;display:flex}:host .tb-agg-latest-mapping-table span.no-data-found.disabled{color:rgba(0,0,0,.38)}:host .tb-agg-latest-mapping-table span.no-data-found.required{color:#dd2c00}"]}),x("design:paramtypes",[o.Store,r.TranslateService,t.Injector,y.MatDialog])],n)}(a.PageComponent),ht=[i.Validators.required,i.Validators.min(1),i.Validators.max(2147483647)],Ct=function(e){function n(t,n){var r=e.call(this,t)||this;return r.store=t,r.fb=n,r.aggPeriodTimeUnits=[G.MINUTES,G.HOURS,G.DAYS],r.timeUnits=Object.keys(G),r.timeUnitsTranslationMap=B,r}return C(n,e),n.prototype.configForm=function(){return this.alarmsCountConfigForm},n.prototype.onConfigurationSet=function(e){this.alarmsCountConfigForm=this.fb.group({periodValue:[e?e.periodValue:null,ht],periodTimeUnit:[e?e.periodTimeUnit:null,[i.Validators.required]],countAlarmsForChildEntities:[e?e.countAlarmsForChildEntities:null,[]],parentEntitiesQuery:this.fb.group({type:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.type:null,[i.Validators.required]],rootEntityId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.rootEntityId:null,[]],relationsQuery:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.relationsQuery:null,[]],entityId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.entityId:null,[]],entityGroupId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.entityGroupId:null,[]],childRelationsQuery:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.childRelationsQuery:null,[]]}),alarmsCountMappings:[e?e.alarmsCountMappings:null,[i.Validators.required]]})},n.prototype.validatorTriggers=function(){return["parentEntitiesQuery.type","countAlarmsForChildEntities"]},n.prototype.updateValidators=function(e,t){var n=this.alarmsCountConfigForm.get("parentEntitiesQuery"),r=n.get("type").value,a=this.alarmsCountConfigForm.get("countAlarmsForChildEntities").value;if(e&&"parentEntitiesQuery.type"===t){var o={type:r};"relationsQuery"===r?(o.rootEntityId=null,o.relationsQuery=s.deepClone(ce),a&&(o.childRelationsQuery=s.deepClone(ce))):"single"===r?(o.entityId=null,a&&(o.childRelationsQuery=s.deepClone(ce))):"group"===r&&(o.entityGroupId=null),n.reset(o,{emitEvent:!1})}n.get("rootEntityId").setValidators([]),n.get("relationsQuery").setValidators([]),n.get("entityId").setValidators([]),n.get("entityGroupId").setValidators([]),n.get("childRelationsQuery").setValidators([]),"relationsQuery"===r?(n.get("rootEntityId").setValidators([i.Validators.required]),n.get("relationsQuery").setValidators([i.Validators.required]),a&&n.get("childRelationsQuery").setValidators([i.Validators.required])):"single"===r?(n.get("entityId").setValidators([i.Validators.required]),a&&n.get("childRelationsQuery").setValidators([i.Validators.required])):"group"===r&&n.get("entityGroupId").setValidators([i.Validators.required]),n.get("rootEntityId").updateValueAndValidity({emitEvent:e}),n.get("relationsQuery").updateValueAndValidity({emitEvent:e}),n.get("entityId").updateValueAndValidity({emitEvent:e}),n.get("entityGroupId").updateValueAndValidity({emitEvent:e}),n.get("childRelationsQuery").updateValueAndValidity({emitEvent:e})},n.prototype.prepareOutputConfig=function(e){return e.parentEntitiesQuery=ge(e.parentEntitiesQuery),e},n.ctorParameters=function(){return[{type:o.Store},{type:i.FormBuilder}]},n=v([t.Component({selector:"tb-analytics-node-alarms-count-config",template:'<section [formGroup]="alarmsCountConfigForm" fxLayout="column">\n  <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.execution-period-value</mat-label>\n      <input type="number" step="1" min="1" max="2147483647" matInput formControlName="periodValue" required>\n      <mat-error *ngIf="alarmsCountConfigForm.get(\'periodValue\').hasError(\'required\')">\n        {{ \'tb.rulenode.execution-period-value-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="alarmsCountConfigForm.get(\'periodValue\').hasError(\'min\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="alarmsCountConfigForm.get(\'periodValue\').hasError(\'max\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.execution-period-time-unit</mat-label>\n      <mat-select formControlName="periodTimeUnit" required>\n        <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n          {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <mat-expansion-panel formGroupName="parentEntitiesQuery" [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.entities</mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-radio-group formControlName="type" fxLayout="row" fxLayoutGap="8px"\n                     style="padding-top: 16px; padding-bottom: 16px;">\n      <mat-radio-button [value]="\'single\'" color="primary">\n        <span translate>tb.rulenode.single-entity</span>\n      </mat-radio-button>\n      <mat-radio-button [value]="\'group\'" color="primary">\n        <span translate>tb.rulenode.group-of-entities</span>\n      </mat-radio-button>\n      <mat-radio-button [value]="\'relationsQuery\'" color="primary">\n        <span translate>tb.rulenode.relations-query</span>\n      </mat-radio-button>\n    </mat-radio-group>\n    <section *ngIf="alarmsCountConfigForm.get(\'parentEntitiesQuery.type\').value === \'relationsQuery\'"\n             fxLayout="column">\n      <label translate class="tb-title tb-required">tb.rulenode.root-entity</label>\n      <tb-entity-select\n        required\n        formControlName="rootEntityId">\n      </tb-entity-select>\n      <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n      <tb-relations-query-config\n        style="padding-bottom: 15px;"\n        formControlName="relationsQuery">\n      </tb-relations-query-config>\n    </section>\n    <tb-entity-select\n      *ngIf="alarmsCountConfigForm.get(\'parentEntitiesQuery.type\').value === \'single\'"\n      required\n      formControlName="entityId">\n    </tb-entity-select>\n    <tb-entity-group-select\n      *ngIf="alarmsCountConfigForm.get(\'parentEntitiesQuery.type\').value === \'group\'"\n      required\n      formControlName="entityGroupId"\n      placeholderText="entity-group.select-entity-group"\n      notFoundText="entity-group.no-entity-groups-matching"\n      requiredText="entity-group.target-entity-group-required">\n    </tb-entity-group-select>\n  </mat-expansion-panel>\n  <mat-checkbox formControlName="countAlarmsForChildEntities" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.count-alarms-for-child-entities\' | translate }}\n  </mat-checkbox>\n  <mat-expansion-panel formGroupName="parentEntitiesQuery"\n                       *ngIf="alarmsCountConfigForm.get(\'countAlarmsForChildEntities\').value &&\n                              (alarmsCountConfigForm.get(\'parentEntitiesQuery.type\').value === \'relationsQuery\' ||\n                               alarmsCountConfigForm.get(\'parentEntitiesQuery.type\').value === \'single\')"\n                       [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.child-entities</mat-panel-title>\n    </mat-expansion-panel-header>\n    <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n    <tb-relations-query-config\n      style="padding-bottom: 15px;"\n      formControlName="childRelationsQuery">\n    </tb-relations-query-config>\n  </mat-expansion-panel>\n  <mat-expansion-panel [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.alarms-count-mappings</mat-panel-title>\n    </mat-expansion-panel-header>\n    <tb-alarms-count-mapping-table\n      required\n      formControlName="alarmsCountMappings"\n      style="padding-bottom: 15px;">\n    </tb-alarms-count-mapping-table>\n  </mat-expansion-panel>\n</section>\n',styles:[":host .mat-expansion-panel{margin:0 6px 16px}"]}),x("design:paramtypes",[o.Store,i.FormBuilder])],n)}(a.RuleNodeConfigurationComponent),vt=function(e){function n(t,n,r,o,l,s){var u,p,d,c,f=e.call(this,t,n,o)||this;f.store=t,f.router=n,f.data=r,f.dialogRef=o,f.fb=l,f.translate=s,f.separatorKeysCodes=[m.ENTER,m.COMMA,m.SEMICOLON],f.alarmStatusTranslationsMap=a.alarmStatusTranslations,f.alarmSeverityTranslationsMap=a.alarmSeverityTranslations,f.displayStatusFn=f.displayStatus.bind(f),f.alarmStatusList=[],f.alarmStatusSearchText="",f.displaySeverityFn=f.displaySeverity.bind(f),f.alarmSeverityList=[],f.alarmSeveritySearchText="",f.isAdd=r.isAdd,f.mapping=r.mapping,f.isAdd&&!f.mapping&&(f.mapping={latestInterval:0,target:""}),f.specifyInterval=f.mapping.latestInterval>0;try{for(var y=T(Object.keys(a.AlarmStatus)),b=y.next();!b.done;b=y.next()){var h=b.value;f.alarmStatusList.push(a.AlarmStatus[h])}}catch(e){u={error:e}}finally{try{b&&!b.done&&(p=y.return)&&p.call(y)}finally{if(u)throw u.error}}try{for(var C=T(Object.keys(a.AlarmSeverity)),v=C.next();!v.done;v=C.next()){h=v.value;f.alarmSeverityList.push(a.AlarmSeverity[h])}}catch(e){d={error:e}}finally{try{v&&!v.done&&(c=C.return)&&c.call(C)}finally{if(d)throw d.error}}return f.statusFormControl=new i.FormControl(""),f.severityFormControl=new i.FormControl(""),f.filteredAlarmStatus=f.statusFormControl.valueChanges.pipe(g.startWith(""),g.map((function(e){return e||""})),g.mergeMap((function(e){return f.fetchAlarmStatus(e)})),g.share()),f.filteredAlarmSeverity=f.severityFormControl.valueChanges.pipe(g.startWith(""),g.map((function(e){return e||""})),g.mergeMap((function(e){return f.fetchAlarmSeverity(e)})),g.share()),f}return C(n,e),n.prototype.ngOnInit=function(){this.alarmsCountMappingFormGroup=this.fb.group({target:[this.mapping.target,[i.Validators.required]],latestInterval:[this.mapping.latestInterval,[]],typesList:[this.mapping.typesList?this.mapping.typesList:[],[]],severityList:[this.mapping.severityList?this.mapping.severityList:[],[]],statusList:[this.mapping.statusList?this.mapping.statusList:[],[]]}),this.specifyInterval||this.alarmsCountMappingFormGroup.get("latestInterval").disable({emitEvent:!1})},n.prototype.specifyIntervalChange=function(){this.specifyInterval?(this.alarmsCountMappingFormGroup.get("latestInterval").setValue(a.DAY,{emitEvent:!0}),this.alarmsCountMappingFormGroup.get("latestInterval").enable({emitEvent:!0})):(this.alarmsCountMappingFormGroup.get("latestInterval").setValue(0,{emitEvent:!0}),this.alarmsCountMappingFormGroup.get("latestInterval").disable({emitEvent:!0})),this.alarmsCountMappingFormGroup.get("latestInterval").markAsDirty()},n.prototype.removeKey=function(e,t){var n=this.alarmsCountMappingFormGroup.get(t).value,r=n.indexOf(e);r>=0&&(n.splice(r,1),this.alarmsCountMappingFormGroup.get(t).setValue(n,{emitEvent:!0}),this.alarmsCountMappingFormGroup.get(t).markAsDirty())},n.prototype.addKey=function(e,t){var n=e.input,r=e.value;if((r||"").trim()){r=r.trim();var a=this.alarmsCountMappingFormGroup.get(t).value;a&&-1!==a.indexOf(r)||(a||(a=[]),a.push(r),this.alarmsCountMappingFormGroup.get(t).setValue(a,{emitEvent:!0}),this.alarmsCountMappingFormGroup.get(t).markAsDirty())}n&&(n.value="")},n.prototype.displayStatus=function(e){return e?this.translate.instant(a.alarmStatusTranslations.get(e)):void 0},n.prototype.onAlarmStatusInputFocus=function(){this.statusFormControl.updateValueAndValidity({onlySelf:!0,emitEvent:!0})},n.prototype.getAlarmStatusList=function(){var e=this;return this.alarmStatusList.filter((function(t){return-1===e.alarmsCountMappingFormGroup.get("statusList").value.indexOf(t)}))},n.prototype.fetchAlarmStatus=function(e){var t=this,n=this.getAlarmStatusList();if(this.alarmStatusSearchText=e,this.alarmStatusSearchText&&this.alarmStatusSearchText.length){var r=this.alarmStatusSearchText.toUpperCase();return c.of(n.filter((function(e){return t.translate.instant(a.alarmStatusTranslations.get(a.AlarmStatus[e])).toUpperCase().includes(r)})))}return c.of(n)},n.prototype.alarmStatusSelected=function(e){this.addAlarmStatus(e.option.value),this.clearAlarmStatus("")},n.prototype.addAlarmStatus=function(e){var t=this.alarmsCountMappingFormGroup.get("statusList").value;t||(t=[]),-1===t.indexOf(e)&&(t.push(e),this.alarmsCountMappingFormGroup.get("statusList").setValue(t),this.alarmsCountMappingFormGroup.get("statusList").markAsDirty())},n.prototype.clearAlarmStatus=function(e){var t=this;void 0===e&&(e=""),this.alarmStatusInput.nativeElement.value=e,this.statusFormControl.patchValue(null,{emitEvent:!0}),setTimeout((function(){t.alarmStatusInput.nativeElement.blur(),t.alarmStatusInput.nativeElement.focus()}),0)},n.prototype.displaySeverity=function(e){return e?this.translate.instant(a.alarmSeverityTranslations.get(e)):void 0},n.prototype.onAlarmSeverityInputFocus=function(){this.severityFormControl.updateValueAndValidity({onlySelf:!0,emitEvent:!0})},n.prototype.getAlarmSeverityList=function(){var e=this;return this.alarmSeverityList.filter((function(t){return-1===e.alarmsCountMappingFormGroup.get("severityList").value.indexOf(t)}))},n.prototype.fetchAlarmSeverity=function(e){var t=this,n=this.getAlarmSeverityList();if(this.alarmSeveritySearchText=e,this.alarmSeveritySearchText&&this.alarmSeveritySearchText.length){var r=this.alarmSeveritySearchText.toUpperCase();return c.of(n.filter((function(e){return t.translate.instant(a.alarmSeverityTranslations.get(a.AlarmSeverity[e])).toUpperCase().includes(r)})))}return c.of(n)},n.prototype.alarmSeveritySelected=function(e){this.addAlarmSeverity(e.option.value),this.clearAlarmSeverity("")},n.prototype.addAlarmSeverity=function(e){var t=this.alarmsCountMappingFormGroup.get("severityList").value;t||(t=[]),-1===t.indexOf(e)&&(t.push(e),this.alarmsCountMappingFormGroup.get("severityList").setValue(t),this.alarmsCountMappingFormGroup.get("severityList").markAsDirty())},n.prototype.clearAlarmSeverity=function(e){var t=this;void 0===e&&(e=""),this.alarmSeverityInput.nativeElement.value=e,this.severityFormControl.patchValue(null,{emitEvent:!0}),setTimeout((function(){t.alarmSeverityInput.nativeElement.blur(),t.alarmSeverityInput.nativeElement.focus()}),0)},n.prototype.cancel=function(){this.dialogRef.close()},n.prototype.save=function(){this.mapping=this.alarmsCountMappingFormGroup.value,this.dialogRef.close(this.mapping)},n.ctorParameters=function(){return[{type:o.Store},{type:b.Router},{type:void 0,decorators:[{type:t.Inject,args:[y.MAT_DIALOG_DATA]}]},{type:y.MatDialogRef},{type:i.FormBuilder},{type:r.TranslateService}]},v([t.ViewChild("alarmStatusInput",{static:!1}),x("design:type",t.ElementRef)],n.prototype,"alarmStatusInput",void 0),v([t.ViewChild("alarmSeverityInput",{static:!1}),x("design:type",t.ElementRef)],n.prototype,"alarmSeverityInput",void 0),n=v([t.Component({selector:"tb-alarms-count-mapping-dialog",template:'\x3c!--\n\n    ThingsBoard, Inc. ("COMPANY") CONFIDENTIAL\n\n    Copyright © 2016-2020 ThingsBoard, Inc. All Rights Reserved.\n\n    NOTICE: All information contained herein is, and remains\n    the property of ThingsBoard, Inc. and its suppliers,\n    if any.  The intellectual and technical concepts contained\n    herein are proprietary to ThingsBoard, Inc.\n    and its suppliers and may be covered by U.S. and Foreign Patents,\n    patents in process, and are protected by trade secret or copyright law.\n\n    Dissemination of this information or reproduction of this material is strictly forbidden\n    unless prior written permission is obtained from COMPANY.\n\n    Access to the source code contained herein is hereby forbidden to anyone except current COMPANY employees,\n    managers or contractors who have executed Confidentiality and Non-disclosure agreements\n    explicitly covering such access.\n\n    The copyright notice above does not evidence any actual or intended publication\n    or disclosure  of  this source code, which includes\n    information that is confidential and/or proprietary, and is a trade secret, of  COMPANY.\n    ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,\n    OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT\n    THE EXPRESS WRITTEN CONSENT OF COMPANY IS STRICTLY PROHIBITED,\n    AND IN VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.\n    THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION\n    DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS,\n    OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.\n\n--\x3e\n<form [formGroup]="alarmsCountMappingFormGroup" (ngSubmit)="save()" style="width: 650px;">\n  <mat-toolbar fxLayout="row" color="primary">\n    <h2>{{ (isAdd ? \'tb.rulenode.add-mapping\' : \'tb.rulenode.edit-mapping\') | translate }}</h2>\n    <span fxFlex></span>\n    <button mat-button mat-icon-button\n            (click)="cancel()"\n            type="button">\n      <mat-icon class="material-icons">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color="warn" mode="indeterminate" *ngIf="isLoading$ | async">\n  </mat-progress-bar>\n  <div style="height: 4px;" *ngIf="!(isLoading$ | async)"></div>\n  <div mat-dialog-content>\n    <fieldset [disabled]="isLoading$ | async">\n      <div fxFlex fxLayout="column">\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.target-telemetry</mat-label>\n          <input required matInput formControlName="target">\n          <mat-error *ngIf="alarmsCountMappingFormGroup.get(\'target\').hasError(\'required\')">\n            {{ \'tb.rulenode.target-telemetry-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <label translate class="tb-title no-padding">tb.rulenode.status-filter</label>\n        <mat-form-field floatLabel="always" class="mat-block">\n          <mat-label></mat-label>\n          <mat-chip-list #alarmStatusChipList>\n            <mat-chip\n              *ngFor="let alarmStatus of alarmsCountMappingFormGroup.get(\'statusList\').value;"\n              (removed)="removeKey(alarmStatus, \'statusList\')">\n                <span>\n                  <strong>{{alarmStatusTranslationsMap.get(alarmStatus) | translate}}</strong>\n                </span>\n              <mat-icon matChipRemove>close</mat-icon>\n            </mat-chip>\n            <input matInput type="text"\n                   placeholder="{{(alarmsCountMappingFormGroup.get(\'statusList\').value.length ?\n                                   \'tb.rulenode.add-alarm-status\' : \'tb.rulenode.all-statuses\') | translate}}"\n                   style="max-width: 200px;"\n                   #alarmStatusInput\n                   (focusin)="onAlarmStatusInputFocus()"\n                   [formControl]="statusFormControl"\n                   matAutocompleteOrigin\n                   #origin="matAutocompleteOrigin"\n                   [matAutocompleteConnectedTo]="origin"\n                   [matAutocomplete]="alarmStatusAutocomplete"\n                   [matChipInputFor]="alarmStatusChipList">\n          </mat-chip-list>\n          <mat-autocomplete #alarmStatusAutocomplete="matAutocomplete"\n                            class="tb-autocomplete"\n                            (optionSelected)="alarmStatusSelected($event)"\n                            [displayWith]="displayStatusFn">\n            <mat-option *ngFor="let status of filteredAlarmStatus | async" [value]="status">\n              <span [innerHTML]="alarmStatusTranslationsMap.get(status) | translate | highlight:alarmStatusSearchText"></span>\n            </mat-option>\n            <mat-option *ngIf="(filteredAlarmStatus | async)?.length === 0" [value]="null" class="tb-not-found">\n              <div class="tb-not-found-content" (click)="$event.stopPropagation()">\n                <div>\n                  <span translate>tb.rulenode.no-alarm-status-matching</span>\n                </div>\n              </div>\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n        <label translate class="tb-title no-padding">tb.rulenode.severity-filter</label>\n        <mat-form-field floatLabel="always" class="mat-block">\n          <mat-label></mat-label>\n          <mat-chip-list #alarmSeverityChipList>\n            <mat-chip\n              *ngFor="let alarmSeverity of alarmsCountMappingFormGroup.get(\'severityList\').value;"\n              (removed)="removeKey(alarmSeverity, \'severityList\')">\n                <span>\n                  <strong>{{alarmSeverityTranslationsMap.get(alarmSeverity) | translate}}</strong>\n                </span>\n              <mat-icon matChipRemove>close</mat-icon>\n            </mat-chip>\n            <input matInput type="text"\n                   placeholder="{{(alarmsCountMappingFormGroup.get(\'severityList\').value.length ?\n                                   \'tb.rulenode.add-alarm-severity\' : \'tb.rulenode.all-severities\') | translate}}"\n                   style="max-width: 200px;"\n                   #alarmSeverityInput\n                   (focusin)="onAlarmSeverityInputFocus()"\n                   [formControl]="severityFormControl"\n                   matAutocompleteOrigin\n                   #origin="matAutocompleteOrigin"\n                   [matAutocompleteConnectedTo]="origin"\n                   [matAutocomplete]="alarmSeverityAutocomplete"\n                   [matChipInputFor]="alarmSeverityChipList">\n          </mat-chip-list>\n          <mat-autocomplete #alarmSeverityAutocomplete="matAutocomplete"\n                            class="tb-autocomplete"\n                            (optionSelected)="alarmSeveritySelected($event)"\n                            [displayWith]="displaySeverityFn">\n            <mat-option *ngFor="let severity of filteredAlarmSeverity | async" [value]="severity">\n              <span [innerHTML]="alarmSeverityTranslationsMap.get(severity) | translate | highlight:alarmSeveritySearchText"></span>\n            </mat-option>\n            <mat-option *ngIf="(filteredAlarmSeverity | async)?.length === 0" [value]="null" class="tb-not-found">\n              <div class="tb-not-found-content" (click)="$event.stopPropagation()">\n                <div>\n                  <span translate>tb.rulenode.no-alarm-severity-matching</span>\n                </div>\n              </div>\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n        <label translate class="tb-title no-padding">tb.rulenode.type-filter</label>\n        <mat-form-field floatLabel="always" class="mat-block">\n          <mat-label></mat-label>\n          <mat-chip-list #typesChipList>\n            <mat-chip\n              *ngFor="let key of alarmsCountMappingFormGroup.get(\'typesList\').value;"\n              (removed)="removeKey(key, \'typesList\')">\n              {{key}}\n              <mat-icon matChipRemove>close</mat-icon>\n            </mat-chip>\n            <input matInput type="text"\n                   placeholder="{{(alarmsCountMappingFormGroup.get(\'typesList\').value.length ?\n                                   \'tb.rulenode.add-alarm-type\' : \'tb.rulenode.all-types\') | translate}}"\n                   style="max-width: 200px;"\n                   [matChipInputFor]="typesChipList"\n                   [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                   (matChipInputTokenEnd)="addKey($event, \'typesList\')"\n                   [matChipInputAddOnBlur]="true">\n          </mat-chip-list>\n        </mat-form-field>\n        <mat-checkbox\n          [(ngModel)]="specifyInterval"\n          [ngModelOptions]="{ standalone: true}"\n          (ngModelChange)="specifyIntervalChange()" style="display: block; margin-bottom: 16px;">\n          {{ \'tb.rulenode.specify-interval\' | translate }}\n        </mat-checkbox>\n        <tb-timeinterval\n          *ngIf="specifyInterval"\n          predefinedName="timewindow.last"\n          formControlName="latestInterval"\n          style="padding-top: 8px">\n        </tb-timeinterval>\n      </div>\n    </fieldset>\n  </div>\n  <div mat-dialog-actions fxLayout="row" fxLayoutAlign="end center">\n    <span fxFlex></span>\n    <button mat-button mat-raised-button color="primary"\n            type="submit"\n            [disabled]="(isLoading$ | async) || alarmsCountMappingFormGroup.invalid || !alarmsCountMappingFormGroup.dirty">\n      {{ (isAdd ? \'action.add\' : \'action.save\') | translate }}\n    </button>\n    <button mat-button color="primary"\n            style="margin-right: 20px;"\n            type="button"\n            [disabled]="(isLoading$ | async)"\n            (click)="cancel()" cdkFocusInitial>\n      {{ \'action.cancel\' | translate }}\n    </button>\n  </div>\n</form>\n'}),F(2,t.Inject(y.MAT_DIALOG_DATA)),x("design:paramtypes",[o.Store,b.Router,Object,y.MatDialogRef,i.FormBuilder,r.TranslateService])],n)}(a.DialogComponent),Ft=function(e){function n(t,n,r,a,o){var i=e.call(this,t)||this;return i.store=t,i.translate=n,i.injector=r,i.millisecondsToTimeStringPipe=a,i.dialog=o,i.propagateChange=null,i}var l;return C(n,e),l=n,Object.defineProperty(n.prototype,"required",{get:function(){return this.requiredValue},set:function(e){this.requiredValue=u.coerceBooleanProperty(e)},enumerable:!0,configurable:!0}),n.prototype.ngOnInit=function(){},n.prototype.registerOnChange=function(e){this.propagateChange=e},n.prototype.registerOnTouched=function(e){},n.prototype.setDisabledState=function(e){this.disabled=e},n.prototype.writeValue=function(e){this.mappings=e||[]},n.prototype.mappingDisplayValue=function(e){var t=this.translate.instant("tb.rulenode.func-count")+"("+this.filterText(e);return e.latestInterval>0&&(t+=" "+this.translate.instant("tb.rulenode.for")+" "+this.translate.instant("timewindow.last-prefix")+" "+this.millisecondsToTimeStringPipe.transform(e.latestInterval)),t=t.trim(),t+=")",t+=" -> "+e.target},n.prototype.filterText=function(e){var t="";return t=this.statusFilterText(e.statusList,t),t=this.severityFilterText(e.severityList,t),(t=this.typeFilterText(e.typesList,t)).length||(t=this.translate.instant("tb.rulenode.all-alarms")+""),t},n.prototype.statusFilterText=function(e,t){var n=this,r=[];return e&&e.length&&e.forEach((function(e){return r.push(n.translate.instant(a.alarmStatusTranslations.get(e)))})),this.updateFilterText(r,t)},n.prototype.severityFilterText=function(e,t){var n=this,r=[];return e&&e.length&&e.forEach((function(e){return r.push(n.translate.instant(a.alarmSeverityTranslations.get(e)))})),this.updateFilterText(r,t)},n.prototype.typeFilterText=function(e,t){var n=[];return e&&e.length&&e.forEach((function(e){return n.push(e)})),this.updateFilterText(n,t)},n.prototype.updateFilterText=function(e,t){var n=e.join(", ");return n&&n.length&&(t.length&&(t+=" "+this.translate.instant("tb.rulenode.and")+" "),t+=n),t},n.prototype.removeAlarmsCountMapping=function(e){e>-1&&(this.mappings.splice(e,1),this.updateModel())},n.prototype.addAlarmsCountMapping=function(e){this.openAlarmsCountMappingDialog(e)},n.prototype.editAlarmsCountMapping=function(e,t){this.openAlarmsCountMappingDialog(e,t)},n.prototype.openAlarmsCountMappingDialog=function(e,t){var n=this;e&&e.stopPropagation();var r,a=!t;a||(r=this.mappings.indexOf(t)),this.dialog.open(vt,{disableClose:!0,panelClass:["tb-dialog","tb-fullscreen-dialog"],data:{isAdd:a,mapping:a?null:s.deepClone(t)}}).afterClosed().subscribe((function(e){e&&(a?n.mappings.push(e):n.mappings[r]=e,n.updateModel())}))},n.prototype.updateModel=function(){this.required&&!this.mappings.length?this.propagateChange(null):this.propagateChange(this.mappings)},n.ctorParameters=function(){return[{type:o.Store},{type:r.TranslateService},{type:t.Injector},{type:a.MillisecondsToTimeStringPipe},{type:y.MatDialog}]},v([t.Input(),x("design:type",Boolean)],n.prototype,"disabled",void 0),v([t.Input(),x("design:type",Boolean),x("design:paramtypes",[Boolean])],n.prototype,"required",null),n=l=v([t.Component({selector:"tb-alarms-count-mapping-table",template:'<section class="tb-alarms-count-mapping-table" fxLayout="column">\n  <label translate class="tb-title no-padding">tb.rulenode.mappings</label>\n  <div class="body">\n    <div class="row mat-elevation-z1" fxFlex fxLayout="row" fxLayoutAlign="start center"\n         *ngFor="let alarmsCountMapping of mappings; let $index = index">\n      <span class="cell tb-alarms-count-mapping-display-value" fxFlex>{{ mappingDisplayValue(alarmsCountMapping)}}</span>\n      <button [fxShow]="!disabled"\n              [disabled]="isLoading$ | async"\n              mat-icon-button color="primary" type="button"\n              (click)="editAlarmsCountMapping($event, alarmsCountMapping)"\n              matTooltip="{{\'tb.rulenode.edit-mapping\' | translate}}"\n              matTooltipPosition="above">\n        <mat-icon>edit</mat-icon>\n      </button>\n      <button [fxShow]="!disabled"\n              [disabled]="isLoading$ | async"\n              mat-icon-button color="primary" type="button"\n              (click)="removeAlarmsCountMapping($index)"\n              matTooltip="{{\'tb.rulenode.remove-mapping\' | translate}}"\n              matTooltipPosition="above">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n  </div>\n  <span [fxShow]="!mappings.length"\n        fxLayoutAlign="center center" [ngClass]="{\'disabled\': disabled, \'required\': required}"\n        class="no-data-found" translate>tb.rulenode.add-mapping-prompt</span>\n  <div style="padding-top: 20px;">\n    <button [fxShow]="!disabled" [disabled]="isLoading$ | async" type="button"\n            mat-raised-button color="primary" (click)="addAlarmsCountMapping($event)"\n            matTooltip="{{ \'tb.rulenode.add-mapping\' | translate }}"\n            matTooltipPosition="above">\n      <mat-icon>add</mat-icon>\n      {{ \'action.add\' | translate }}\n    </button>\n  </div>\n</section>\n',providers:[{provide:i.NG_VALUE_ACCESSOR,useExisting:t.forwardRef((function(){return l})),multi:!0}],styles:[":host .tb-alarms-count-mapping-table .body{padding-left:5px;padding-right:5px;max-height:300px;overflow:auto}:host .tb-alarms-count-mapping-table .body .row{padding:0 0 0 5px;margin:5px 5px 5px 0}:host .tb-alarms-count-mapping-table .body .cell{padding-left:5px;padding-right:5px}:host .tb-alarms-count-mapping-table .body .cell.tb-alarms-count-mapping-display-value{font-size:14px;line-height:16px;color:rgba(0,0,0,.7)}:host .tb-alarms-count-mapping-table span.no-data-found{position:relative;height:40px;text-transform:uppercase;display:flex}:host .tb-alarms-count-mapping-table span.no-data-found.disabled{color:rgba(0,0,0,.38)}:host .tb-alarms-count-mapping-table span.no-data-found.required{color:#dd2c00}"]}),x("design:paramtypes",[o.Store,r.TranslateService,t.Injector,a.MillisecondsToTimeStringPipe,y.MatDialog])],n)}(a.PageComponent),xt=function(){function e(){}return e=v([t.NgModule({declarations:[ct,yt,bt,ft,vt,Ft,Ct],imports:[n.CommonModule,a.SharedModule,Te],exports:[ct,ft,Ct]})],e)}(),Tt=function(){function e(e){!function(e){e.setTranslation("en_US",{tb:{rulenode:{"create-entity-if-not-exists":"Create new entity if not exists","create-entity-if-not-exists-hint":"Create a new entity set above if it does not exist.","entity-name-pattern":"Name pattern","entity-name-pattern-required":"Name pattern is required","entity-name-pattern-hint":"Name pattern, use <code>${metaKeyName}</code> to substitute variables from metadata","entity-type-pattern":"Type pattern","entity-type-pattern-required":"Type pattern is required","entity-type-pattern-hint":"Type pattern, use <code>${metaKeyName}</code> to substitute variables from metadata","entity-cache-expiration":"Entities cache expiration time (sec)","entity-cache-expiration-hint":"Specifies maximum time interval allowed to store found entity records. 0 value means that records will never expire.","entity-cache-expiration-required":"Entities cache expiration time is required.","entity-cache-expiration-range":"Entities cache expiration time should be greater than or equal to 0.","customer-name-pattern":"Customer name pattern","customer-name-pattern-required":"Customer name pattern is required","create-customer-if-not-exists":"Create new customer if not exists","customer-cache-expiration":"Customers cache expiration time (sec)","customer-name-pattern-hint":"Customer name pattern, use <code>${metaKeyName}</code> to substitute variables from metadata","customer-cache-expiration-hint":"Specifies maximum time interval allowed to store found customer records. 0 value means that records will never expire.","customer-cache-expiration-required":"Customers cache expiration time is required.","customer-cache-expiration-range":"Customers cache expiration time should be greater than or equal to 0.","start-interval":"Start Interval","end-interval":"End Interval","start-interval-time-unit":"Start Interval Time Unit","end-interval-time-unit":"End Interval Time Unit","fetch-mode":"Fetch mode","fetch-mode-hint":"If selected fetch mode 'ALL'  you able to choose telemetry sampling order.","order-by":"Order by","order-by-hint":"Select to choose telemetry sampling order.",limit:"Limit","limit-hint":"Min limit value is 2, max - 1000. In case you want to fetch a single entry, select fetch mode 'FIRST' or 'LAST'.","start-interval-value-required":"Start interval value is required.","end-interval-value-required":"End interval value is required.",filter:"Filter",switch:"Switch","message-type":"Message type","message-type-required":"Message type is required.","message-types-filter":"Message types filter","no-message-types-found":"No message types found","no-message-type-matching":"'{{messageType}}' not found.","create-new-message-type":"Create a new one!","message-types-required":"Message types are required.","client-attributes":"Client attributes","client-attributes-hint":"Client attributes, use <code>${metaKeyName}</code> to substitute variables from metadata","shared-attributes":"Shared attributes","shared-attributes-hint":"Shared attributes, use <code>${metaKeyName}</code> to substitute variables from metadata","server-attributes":"Server attributes","server-attributes-hint":"Server attributes, use <code>${metaKeyName}</code> to substitute variables from metadata","notify-device":"Notify Device","notify-device-hint":"If the message arrives from the device, we will push it back to the device by default.","latest-timeseries":"Latest timeseries","latest-timeseries-hint":"Latest timeseries, use <code>${metaKeyName}</code> to substitute variables from metadata","data-keys":"Message data","metadata-keys":"Message metadata","relations-query":"Relations query","device-relations-query":"Device relations query","max-relation-level":"Max relation level","relation-type-pattern":"Relation type pattern","relation-type-pattern-hint":"Relation type pattern, use <code>${metaKeyName}</code> to substitute variables from metadata","relation-type-pattern-required":"Relation type pattern is required","relation-types-list":"Relation types to propagate","relation-types-list-hint":"If Propagate relation types are not selected, alarms will be propagated without filtering by relation type.","unlimited-level":"Unlimited level","latest-telemetry":"Latest telemetry","attr-mapping":"Attributes mapping","source-attribute":"Source attribute","source-attribute-required":"Source attribute is required.","source-telemetry":"Source telemetry","source-telemetry-required":"Source telemetry is required.","target-attribute":"Target attribute","target-attribute-required":"Target attribute is required.","attr-mapping-required":"At least one attribute mapping should be specified.","fields-mapping":"Fields mapping","fields-mapping-required":"At least one field mapping should be specified.","source-field":"Source field","source-field-required":"Source field is required.","originator-source":"Originator source","originator-customer":"Customer","originator-tenant":"Tenant","originator-related":"Related","originator-alarm-originator":"Alarm Originator","clone-message":"Clone message",transform:"Transform","default-ttl":"Default TTL in seconds","default-ttl-required":"Default TTL is required.","min-default-ttl-message":"Only 0 minimum TTL is allowed.","message-count":"Message count (0 - unlimited)","message-count-required":"Message count is required.","min-message-count-message":"Only 0 minimum message count is allowed.","period-seconds":"Period in seconds","period-seconds-required":"Period is required.","use-metadata-period-in-seconds-patterns":"Use metadata period in seconds pattern","use-metadata-period-in-seconds-patterns-hint":"If selected, rule node use period in seconds interval pattern from message metadata assuming that intervals are in the seconds.","period-in-seconds-pattern":"Period in seconds metadata pattern","period-in-seconds-pattern-required":"Period in seconds pattern is required","period-in-seconds-pattern-hint":"Period in seconds pattern, use <code>${metaKeyName}</code> to substitute variables from metadata","min-period-seconds-message":"Only 1 second minimum period is allowed.",originator:"Originator","message-body":"Message body","message-metadata":"Message metadata",generate:"Generate","test-generator-function":"Test generator function",generator:"Generator","test-filter-function":"Test filter function","test-switch-function":"Test switch function","test-transformer-function":"Test transformer function",transformer:"Transformer","alarm-create-condition":"Alarm create condition","test-condition-function":"Test condition function","alarm-clear-condition":"Alarm clear condition","alarm-details-builder":"Alarm details builder","test-details-function":"Test details function","alarm-type":"Alarm type","alarm-type-required":"Alarm type is required.","alarm-severity":"Alarm severity","alarm-severity-required":"Alarm severity is required","alarm-status-filter":"Alarm status filter","alarm-status-list-empty":"Alarm status list is empty","no-alarm-status-matching":"No alarm status matching were found.","no-alarm-severity-matching":"No alarm severity matching were found.",propagate:"Propagate",condition:"Condition",details:"Details","to-string":"To string","test-to-string-function":"Test to string function","from-template":"From Template","from-template-required":"From Template is required","from-template-hint":"From address template, use <code>${metaKeyName}</code> to substitute variables from metadata","to-template":"To Template","to-template-required":"To Template is required","mail-address-list-template-hint":"Comma separated address list, use <code>${metaKeyName}</code> to substitute variables from metadata","cc-template":"Cc Template","bcc-template":"Bcc Template","subject-template":"Subject Template","subject-template-required":"Subject Template is required","subject-template-hint":"Mail subject template, use <code>${metaKeyName}</code> to substitute variables from metadata","body-template":"Body Template","body-template-required":"Body Template is required","body-template-hint":"Mail body template, use <code>${metaKeyName}</code> to substitute variables from metadata","request-id-metadata-attribute":"Request Id Metadata attribute name","timeout-sec":"Timeout in seconds","timeout-required":"Timeout is required","min-timeout-message":"Only 0 minimum timeout value is allowed.","endpoint-url-pattern":"Endpoint URL pattern","endpoint-url-pattern-required":"Endpoint URL pattern is required","endpoint-url-pattern-hint":"HTTP URL address pattern, use <code>${metaKeyName}</code> to substitute variables from metadata","request-method":"Request method","use-simple-client-http-factory":"Use simple client HTTP factory","read-timeout":"Read timeout in millis","read-timeout-hint":"The value of 0 means an infinite timeout","max-parallel-requests-count":"Max number of parallel requests","max-parallel-requests-count-hint":"The value of 0 specifies no limit in parallel processing",headers:"Headers","headers-hint":"Use <code>${metaKeyName}</code> in header/value fields to substitute variables from metadata",header:"Header","header-required":"Header is required",value:"Value","value-required":"Value is required","topic-pattern":"Topic pattern","topic-pattern-required":"Topic pattern is required","mqtt-topic-pattern-hint":"MQTT topic pattern, use <code>${metaKeyName}</code> to substitute variables from metadata",topic:"Topic","topic-required":"Topic is required","bootstrap-servers":"Bootstrap servers","bootstrap-servers-required":"Bootstrap servers value is required","other-properties":"Other properties",key:"Key","key-required":"Key is required",retries:"Automatically retry times if fails","min-retries-message":"Only 0 minimum retries is allowed.","batch-size-bytes":"Produces batch size in bytes","min-batch-size-bytes-message":"Only 0 minimum batch size is allowed.","linger-ms":"Time to buffer locally (ms)","min-linger-ms-message":"Only 0 ms minimum value is allowed.","buffer-memory-bytes":"Client buffer max size in bytes","min-buffer-memory-message":"Only 0 minimum buffer size is allowed.",acks:"Number of acknowledgments","key-serializer":"Key serializer","key-serializer-required":"Key serializer is required","value-serializer":"Value serializer","value-serializer-required":"Value serializer is required","topic-arn-pattern":"Topic ARN pattern","topic-arn-pattern-required":"Topic ARN pattern is required","topic-arn-pattern-hint":"Topic ARN pattern, use <code>${metaKeyName}</code> to substitute variables from metadata","aws-access-key-id":"AWS Access Key ID","aws-access-key-id-required":"AWS Access Key ID is required","aws-secret-access-key":"AWS Secret Access Key","aws-secret-access-key-required":"AWS Secret Access Key is required","aws-region":"AWS Region","aws-region-required":"AWS Region is required","exchange-name-pattern":"Exchange name pattern","routing-key-pattern":"Routing key pattern","message-properties":"Message properties",host:"Host","host-required":"Host is required",port:"Port","port-required":"Port is required","port-range":"Port should be in a range from 1 to 65535.","virtual-host":"Virtual host",username:"Username",password:"Password","automatic-recovery":"Automatic recovery","connection-timeout-ms":"Connection timeout (ms)","min-connection-timeout-ms-message":"Only 0 ms minimum value is allowed.","handshake-timeout-ms":"Handshake timeout (ms)","min-handshake-timeout-ms-message":"Only 0 ms minimum value is allowed.","client-properties":"Client properties","queue-url-pattern":"Queue URL pattern","queue-url-pattern-required":"Queue URL pattern is required","queue-url-pattern-hint":"Queue URL pattern, use <code>${metaKeyName}</code> to substitute variables from metadata","delay-seconds":"Delay (seconds)","min-delay-seconds-message":"Only 0 seconds minimum value is allowed.","max-delay-seconds-message":"Only 900 seconds maximum value is allowed.",name:"Name","name-required":"Name is required","queue-type":"Queue type","sqs-queue-standard":"Standard","sqs-queue-fifo":"FIFO","gcp-project-id":"GCP project ID","gcp-project-id-required":"GCP project ID is required","gcp-service-account-key":"GCP service account key file","gcp-service-account-key-required":"GCP service account key file is required","pubsub-topic-name":"Topic name","pubsub-topic-name-required":"Topic name is required","message-attributes":"Message attributes","message-attributes-hint":"Use <code>${metaKeyName}</code> in name/value fields to substitute variables from metadata","connect-timeout":"Connection timeout (sec)","connect-timeout-required":"Connection timeout is required.","connect-timeout-range":"Connection timeout should be in a range from 1 to 200.","client-id":"Client ID","device-id":"Device ID","device-id-required":"Device ID is required.","clean-session":"Clean session","enable-ssl":"Enable SSL",credentials:"Credentials","credentials-type":"Credentials type","credentials-type-required":"Credentials type is required.","credentials-anonymous":"Anonymous","credentials-basic":"Basic","credentials-pem":"PEM","credentials-sas":"Shared Access Signature","sas-key":"SAS Key","sas-key-required":"SAS Key is required.",hostname:"Hostname","hostname-required":"Hostname is required.","azure-ca-cert":"CA certificate file","username-required":"Username is required.","password-required":"Password is required.","ca-cert":"CA certificate file *","private-key":"Private key file *",cert:"Certificate file *","no-file":"No file selected.","drop-file":"Drop a file or click to select a file to upload.","private-key-password":"Private key password","use-system-smtp-settings":"Use system SMTP settings","use-metadata-interval-patterns":"Use metadata interval patterns","use-metadata-interval-patterns-hint":"If selected, rule node use start and end interval patterns from message metadata assuming that intervals are in the milliseconds.","use-message-alarm-data":"Use message alarm data","check-all-keys":"Check that all selected keys are present","check-all-keys-hint":"If selected, checks that all specified keys are present in the message data and metadata.","check-relation-to-specific-entity":"Check relation to specific entity","check-relation-hint":"Checks existence of relation to specific entity or to any entity based on direction and relation type.","delete-relation-to-specific-entity":"Delete relation to specific entity","delete-relation-hint":"Deletes relation from the originator of the incoming message to the specified entity or list of entities based on direction and type.","remove-current-relations":"Remove current relations","remove-current-relations-hint":"Removes current relations from the originator of the incoming message based on direction and type.","change-originator-to-related-entity":"Change originator to related entity","change-originator-to-related-entity-hint":"Used to process submitted message as a message from another entity.","start-interval-pattern":"Start interval pattern","end-interval-pattern":"End interval pattern","start-interval-pattern-required":"Start interval pattern is required","end-interval-pattern-required":"End interval pattern is required","start-interval-pattern-hint":"Start interval pattern, use <code>${metaKeyName}</code> to substitute variables from metadata","end-interval-pattern-hint":"End interval pattern, use <code>${metaKeyName}</code> to substitute variables from metadata","smtp-protocol":"Protocol","smtp-host":"SMTP host","smtp-host-required":"SMTP host is required.","smtp-port":"SMTP port","smtp-port-required":"You must supply a smtp port.","smtp-port-range":"SMTP port should be in a range from 1 to 65535.","timeout-msec":"Timeout ms","min-timeout-msec-message":"Only 0 ms minimum value is allowed.","enter-username":"Enter username","enter-password":"Enter password","enable-tls":"Enable TLS","group-name-pattern":"Group name pattern","group-name-pattern-required":"Group name pattern is required","group-name-pattern-hint":"Group name pattern, use <code>${metaKeyName}</code> to substitute variables from metadata","create-group-if-not-exists":"Create new group if not exists","group-cache-expiration":"Groups cache expiration time (sec)","group-cache-expiration-required":"Groups cache expiration time is required.","group-cache-expiration-range":"Groups cache expiration time should be greater than or equal to 0.","group-cache-expiration-hint":"Specifies maximum time interval allowed to store found entity group records. 0 value means that records will never expire.","remove-from-current-groups":"Remove from current groups","use-report-config-from-message":"Use report config from message","use-system-reports-server":"Use system reports server","reports-server-endpoint-url":"Reports server endpoint URL","reports-server-endpoint-url-is-required":"Reports server endpoint URL is required.","tls-version":"TLS version","enable-proxy":"Enable proxy","use-system-proxy-properties":"Use system proxy properties","proxy-host":"Proxy host","proxy-host-required":"Proxy host is required.","proxy-port":"Proxy port","proxy-port-required":"Proxy port is required.","proxy-port-range":"Proxy port should be in a range from 1 to 65535.","proxy-user":"Proxy user","proxy-password":"Proxy password","proxy-scheme":"Proxy scheme","min-period-0-seconds-message":"Only 0 second minimum period is allowed.","max-pending-messages":"Maximum pending messages","max-pending-messages-required":"Maximum pending messages is required.","max-pending-messages-range":"Maximum pending messages should be in a range from 1 to 100000.",aggregation:"Aggregation","math-function":"Aggregation function","func-min":"Minimum","func-max":"Maximum","func-sum":"Sum","func-avg":"Average","func-count":"Count","func-count-unique":"Count unique","time-unit-milliseconds":"Milliseconds","time-unit-seconds":"Seconds","time-unit-minutes":"Minutes","time-unit-hours":"Hours","time-unit-days":"Days","time-value-range":"Time value should be in a range from 1 to 2147483647.","agg-interval-value":"Aggregation interval value","agg-interval-value-required":"Aggregation interval value is required.","agg-interval-time-unit":"Aggregation interval time unit","auto-create-intervals":"Create intervals automatically","interval-entities":"Interval entities","interval-persistence-and-ttl":"Interval persistence and TTL","interval-persistence-policy":"Interval persistence policy","interval-persist-policy-on-each-check":"On each check","interval-persist-policy-on-each-check-after-interval-end":"On each check after interval end","interval-check-value":"Interval check value","interval-check-value-required":"Interval check value is required.","interval-check-time-unit":"Interval check time unit","interval-ttl-value":"Interval TTL value","interval-ttl-value-required":"Interval TTL value is required.","interval-ttl-time-unit":"Interval TTL time unit","input-value-key":"Input value key","input-value-key-required":"Input value key is required.","output-value-key":"Output value key","output-value-key-required":"Output value key is required.","state-persistence":"State persistence","state-persistence-policy":"State persistence policy","state-persist-policy-on-each-change":"On each change","state-persist-policy-periodically":"Periodically","state-persistence-value":"State persistence value","state-persistence-value-required":"State persistence value is required.","state-persistence-time-unit":"State persistence time unit","target-entity-group":"Target entity group","entity-group-is-message-originator":"Entity group is message originator","originator-types-filter":"Originator types filter","single-entity":"Single entity","group-of-entities":"Group of entities",entities:"Entities","root-entity":"Root entity","child-entities-query":"Child entities query","child-entities":"Child entities","execution-period-value":"Execution period value","execution-period-value-required":"Execution period value is required.","execution-period-time-unit":"Execution period time unit","agg-latest-mappings":"Aggregate latest mappings",mappings:"Mappings","edit-mapping":"Edit mapping","remove-mapping":"Remove mapping","add-mapping":"Add mapping","add-mapping-prompt":"Please add mapping","attribute-scope":"Attribute scope","default-value":"Default value","default-value-required":"Default value is required.","target-telemetry":"Target telemetry","target-telemetry-required":"Target telemetry is required.","filter-entities":"Filter entities","entity-filter":"Entity filter","fetch-entity-attributes":"Fetch entity attributes","count-alarms-for-child-entities":"Count alarms for child entities","alarms-count-mappings":"Alarms count mappings",and:"and","all-alarms":"All alarms",for:"for","status-filter":"Status filter","severity-filter":"Severity filter","type-filter":"Type filter","all-statuses":"All statuses","all-severities":"All severities","all-types":"All types","add-alarm-status":"+Alarm status","add-alarm-severity":"+Alarm severity","add-alarm-type":"+Alarm type","specify-interval":"Specify interval","interval-seconds":"Interval in seconds","interval-seconds-required":"Interval is required.","min-interval-seconds-message":"Only 1 second minimum interval is allowed.","output-timeseries-key-prefix":"Output timeseries key prefix","output-timeseries-key-prefix-required":"Output timeseries key prefix required.","separator-hint":'You should press "enter" to complete field input.',"owner-type":"Owner type","owner-name-pattern":"Owner name pattern","owner-name-pattern-required":"Owner name pattern is required","owner-name-pattern-hint":"Owner name pattern, use <code>${metaKeyName}</code> to substitute variables from metadata","create-owner-if-not-exists":"Create new owner if not exists","owner-cache-expiration":"Owners cache expiration time (sec)","owner-cache-expiration-required":"Owners cache expiration time is required.","owner-cache-expiration-range":"Owners cache expiration time should be greater than or equal to 0.","owner-cache-expiration-hint":"Specifies maximum time interval allowed to store found owner records. 0 value means that records will never expire.","entity-details":"Select entity details:","entity-details-title":"Title","entity-details-country":"Country","entity-details-state":"State","entity-details-zip":"Zip","entity-details-address":"Address","entity-details-address2":"Address2","entity-details-additional_info":"Additional Info","entity-details-phone":"Phone","entity-details-email":"Email","add-to-metadata":"Add selected details to message metadata","add-to-metadata-hint":"If selected, adds the selected details keys to the message metadata instead of message data.","entity-details-list-empty":"No entity details selected.","no-entity-details-matching":"No entity details matching were found.","custom-table-name":"Custom table name","custom-table-name-required":"Table Name is required","custom-table-hint":"You should enter the table name without prefix 'cs_tb_'.","message-field":"Message field","message-field-required":"Message field is required.","table-col":"Table column","table-col-required":"Table column is required.","latitude-key-name":"Latitude key name","longitude-key-name":"Longitude key name","latitude-key-name-required":"Latitude key name is required.","longitude-key-name-required":"Longitude key name is required.","fetch-perimeter-info-from-message-metadata":"Fetch perimeter information from message metadata","perimeter-circle":"Circle","perimeter-polygon":"Polygon","perimeter-type":"Perimeter type","circle-center-latitude":"Center latitude","circle-center-latitude-required":"Center latitude is required.","circle-center-longitude":"Center longitude","circle-center-longitude-required":"Center longitude is required.","range-unit-meter":"Meter","range-unit-kilometer":"Kilometer","range-unit-foot":"Foot","range-unit-mile":"Mile","range-unit-nautical-mile":"Nautical mile","range-units":"Range units",range:"Range","range-required":"Range is required.","polygon-definition":"Polygon definition","polygon-definition-required":"Polygon definition is required.","polygon-definition-hint":"Please, use the following format for manual definition of polygon: [[lat1,lon1],[lat2,lon2], ... ,[latN,lonN]].","min-inside-duration":"Minimal inside duration","min-inside-duration-value-required":"Minimal inside duration is required","min-inside-duration-time-unit":"Minimal inside duration time unit","min-outside-duration":"Minimal outside duration","min-outside-duration-value-required":"Minimal outside duration is required","min-outside-duration-time-unit":"Minimal outside duration time unit","tell-failure-if-absent":"Tell Failure","tell-failure-if-absent-hint":'If at least one selected key doesn\'t exist the outbound message will report "Failure".',"get-latest-value-with-ts":"Fetch Latest telemetry with Timestamp","get-latest-value-with-ts-hint":'If selected, latest telemetry values will be added to the outbound message metadata with timestamp, e.g: "temp": "&lcub;\\"ts\\":1574329385897,\\"value\\":42&rcub;"',"use-redis-queue":"Use redis queue for message persistence","trim-redis-queue":"Trim redis queue","redis-queue-max-size":"Redis queue max size","aggregate-interval-type":"Aggregate interval type","aggregate-period-hour":"Hour","aggregate-period-day":"Day","aggregate-period-week":"Week","aggregate-period-month":"Month","aggregate-period-year":"Year","aggregate-period-custom":"Custom","add-metadata-key-values-as-kafka-headers":"Add Message metadata key-value pairs to Kafka record headers","add-metadata-key-values-as-kafka-headers-hint":"If selected, key-value pairs from message metadata will be added to the outgoing records headers as byte arrays with predefined charset encoding.","charset-encoding":"Charset encoding","charset-encoding-required":"Charset encoding is required.","charset-us-ascii":"US-ASCII","charset-iso-8859-1":"ISO-8859-1","charset-utf-8":"UTF-8","charset-utf-16be":"UTF-16BE","charset-utf-16le":"UTF-16LE","charset-utf-16":"UTF-16","select-queue-hint":"The queue name can be selected from a drop-down list or add a custom name."},"key-val":{key:"Key",value:"Value","remove-entry":"Remove entry","add-entry":"Add entry"}}},!0)}(e)}return e.ctorParameters=function(){return[{type:r.TranslateService}]},e=v([t.NgModule({declarations:[q],imports:[n.CommonModule,a.SharedModule],exports:[Ke,We,ot,pt,xt,q]}),x("design:paramtypes",[r.TranslateService])],e)}();e.RuleNodeCoreConfigModule=Tt,e.ɵa=q,e.ɵb=Ke,e.ɵba=Me,e.ɵbb=Pe,e.ɵbc=Re,e.ɵbd=Oe,e.ɵbe=we,e.ɵbf=De,e.ɵbg=Ge,e.ɵbh=Ue,e.ɵbi=Te,e.ɵbj=Ce,e.ɵbk=ve,e.ɵbl=Fe,e.ɵbm=xe,e.ɵbn=We,e.ɵbo=Be,e.ɵbp=He,e.ɵbq=Qe,e.ɵbr=je,e.ɵbs=_e,e.ɵbt=$e,e.ɵbu=ze,e.ɵbv=Ye,e.ɵbw=ot,e.ɵbx=Je,e.ɵby=Ze,e.ɵbz=Xe,e.ɵc=S,e.ɵca=et,e.ɵcb=tt,e.ɵcc=nt,e.ɵcd=rt,e.ɵce=at,e.ɵcf=pt,e.ɵcg=it,e.ɵch=lt,e.ɵci=st,e.ɵcj=mt,e.ɵck=ut,e.ɵcl=xt,e.ɵcm=ct,e.ɵcn=yt,e.ɵcp=bt,e.ɵcq=ft,e.ɵcr=vt,e.ɵct=Ft,e.ɵcu=Ct,e.ɵd=E,e.ɵe=N,e.ɵf=V,e.ɵg=A,e.ɵh=k,e.ɵi=L,e.ɵj=M,e.ɵk=P,e.ɵl=R,e.ɵm=O,e.ɵn=fe,e.ɵo=ye,e.ɵp=be,e.ɵq=he,e.ɵr=Ie,e.ɵs=qe,e.ɵt=Se,e.ɵu=Ee,e.ɵv=Ne,e.ɵw=Ve,e.ɵx=Ae,e.ɵy=ke,e.ɵz=Le,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=rulenode-core-config.umd.min.js.map