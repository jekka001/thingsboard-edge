/**
 * ThingsBoard, Inc. ("COMPANY") CONFIDENTIAL
 *
 * Copyright Â© 2016-2020 ThingsBoard, Inc. All Rights Reserved.
 *
 * NOTICE: All information contained herein is, and remains
 * the property of ThingsBoard, Inc. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to ThingsBoard, Inc.
 * and its suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material is strictly forbidden
 * unless prior written permission is obtained from COMPANY.
 *
 * Access to the source code contained herein is hereby forbidden to anyone except current COMPANY employees,
 * managers or contractors who have executed Confidentiality and Non-disclosure agreements
 * explicitly covering such access.
 *
 * The copyright notice above does not evidence any actual or intended publication
 * or disclosure  of  this source code, which includes
 * information that is confidential and/or proprietary, and is a trade secret, of  COMPANY.
 * ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
 * OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT
 * THE EXPRESS WRITTEN CONSENT OF COMPANY IS STRICTLY PROHIBITED,
 * AND IN VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.
 * THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION
 * DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS,
 * OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
 */
syntax = "proto3";
package transportapi;

option java_package = "org.thingsboard.server.gen.transport";
option java_outer_classname = "TransportApiProtos";

import "queue.proto";

message ClaimDevice {
  string secretKey = 1;
  int64 durationMs = 2;
}

message AttributesRequest {
  string clientKeys = 1;
  string sharedKeys = 2;
}

message RpcRequest {
  string method = 1;
  string params = 2;
}

message DisconnectMsg {
  string deviceName = 1;
}

message ConnectMsg {
  string deviceName = 1;
  string deviceType = 2;
}

message TelemetryMsg {
  string deviceName = 1;
  transport.PostTelemetryMsg msg = 3;
}

message AttributesMsg {
  string deviceName = 1;
  transport.PostAttributeMsg msg = 2;
}

message ClaimDeviceMsg {
  string deviceName = 1;
  ClaimDevice claimRequest = 2;
}

message GatewayTelemetryMsg {
  repeated TelemetryMsg msg = 1;
}

message GatewayClaimMsg {
  repeated ClaimDeviceMsg msg = 1;
}

message GatewayAttributesMsg {
  repeated AttributesMsg msg = 1;
}

message GatewayRpcResponseMsg {
  string deviceName = 1;
  int32  id = 2;
  string data = 3;
}

message GatewayAttributeResponseMsg {
  string deviceName = 1;
  transport.GetAttributeResponseMsg responseMsg = 2;
}

message GatewayAttributeUpdateNotificationMsg {
  string deviceName = 1;
  transport.AttributeUpdateNotificationMsg notificationMsg = 2;
}

message GatewayDeviceRpcRequestMsg {
  string deviceName = 1;
  transport.ToDeviceRpcRequestMsg rpcRequestMsg = 2;
}

message GatewayAttributesRequestMsg {
  int32  id = 1;
  string deviceName = 2;
  bool client = 3;
  repeated string keys = 4;
}
